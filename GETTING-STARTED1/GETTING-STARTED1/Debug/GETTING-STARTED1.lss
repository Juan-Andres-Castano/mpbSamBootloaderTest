
GETTING-STARTED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004228  000c0000  000c0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000c4228  000c4228  00014228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b70  20070000  000c4230  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000204  20070b70  000c4da0  00020b70  2**2
                  ALLOC
  4 .stack        00002004  20070d74  000c4fa4  00020b70  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b70  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b99  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015ef2  00000000  00000000  00020bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003357  00000000  00000000  00036ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005522  00000000  00000000  00039e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b08  00000000  00000000  0003f35d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a48  00000000  00000000  0003fe65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000195f7  00000000  00000000  000408ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e77b  00000000  00000000  00059ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000672a3  00000000  00000000  0006861f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000024dc  00000000  00000000  000cf8c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000c0000 <exception_table>:
   c0000:	78 2d 07 20 f1 08 0c 00 ed 08 0c 00 ed 08 0c 00     x-. ............
   c0010:	ed 08 0c 00 ed 08 0c 00 ed 08 0c 00 00 00 00 00     ................
	...
   c002c:	ed 08 0c 00 ed 08 0c 00 00 00 00 00 ed 08 0c 00     ................
   c003c:	a1 0e 0c 00 ed 08 0c 00 ed 08 0c 00 ed 08 0c 00     ................
   c004c:	ed 08 0c 00 ed 08 0c 00 ed 08 0c 00 ed 08 0c 00     ................
   c005c:	ed 08 0c 00 ed 08 0c 00 ed 08 0c 00 00 00 00 00     ................
   c006c:	dd 05 0c 00 f1 05 0c 00 05 06 0c 00 19 06 0c 00     ................
	...
   c0084:	ed 08 0c 00 ed 08 0c 00 ed 08 0c 00 ed 08 0c 00     ................
   c0094:	ed 08 0c 00 ed 08 0c 00 ed 08 0c 00 ed 08 0c 00     ................
   c00a4:	00 00 00 00 ed 08 0c 00 b1 0e 0c 00 ed 08 0c 00     ................
   c00b4:	ed 08 0c 00 ed 08 0c 00 ed 08 0c 00 ed 08 0c 00     ................
   c00c4:	ed 08 0c 00 ed 08 0c 00 ed 08 0c 00 ed 08 0c 00     ................
   c00d4:	ed 08 0c 00 ed 08 0c 00 ed 08 0c 00 ed 08 0c 00     ................
   c00e4:	ed 08 0c 00 ed 08 0c 00 ed 08 0c 00 ed 08 0c 00     ................

000c00f4 <__do_global_dtors_aux>:
   c00f4:	b510      	push	{r4, lr}
   c00f6:	4c05      	ldr	r4, [pc, #20]	; (c010c <__do_global_dtors_aux+0x18>)
   c00f8:	7823      	ldrb	r3, [r4, #0]
   c00fa:	b933      	cbnz	r3, c010a <__do_global_dtors_aux+0x16>
   c00fc:	4b04      	ldr	r3, [pc, #16]	; (c0110 <__do_global_dtors_aux+0x1c>)
   c00fe:	b113      	cbz	r3, c0106 <__do_global_dtors_aux+0x12>
   c0100:	4804      	ldr	r0, [pc, #16]	; (c0114 <__do_global_dtors_aux+0x20>)
   c0102:	f3af 8000 	nop.w
   c0106:	2301      	movs	r3, #1
   c0108:	7023      	strb	r3, [r4, #0]
   c010a:	bd10      	pop	{r4, pc}
   c010c:	20070b70 	.word	0x20070b70
   c0110:	00000000 	.word	0x00000000
   c0114:	000c4230 	.word	0x000c4230

000c0118 <frame_dummy>:
   c0118:	4b0c      	ldr	r3, [pc, #48]	; (c014c <frame_dummy+0x34>)
   c011a:	b143      	cbz	r3, c012e <frame_dummy+0x16>
   c011c:	480c      	ldr	r0, [pc, #48]	; (c0150 <frame_dummy+0x38>)
   c011e:	b510      	push	{r4, lr}
   c0120:	490c      	ldr	r1, [pc, #48]	; (c0154 <frame_dummy+0x3c>)
   c0122:	f3af 8000 	nop.w
   c0126:	480c      	ldr	r0, [pc, #48]	; (c0158 <frame_dummy+0x40>)
   c0128:	6803      	ldr	r3, [r0, #0]
   c012a:	b923      	cbnz	r3, c0136 <frame_dummy+0x1e>
   c012c:	bd10      	pop	{r4, pc}
   c012e:	480a      	ldr	r0, [pc, #40]	; (c0158 <frame_dummy+0x40>)
   c0130:	6803      	ldr	r3, [r0, #0]
   c0132:	b933      	cbnz	r3, c0142 <frame_dummy+0x2a>
   c0134:	4770      	bx	lr
   c0136:	4b09      	ldr	r3, [pc, #36]	; (c015c <frame_dummy+0x44>)
   c0138:	2b00      	cmp	r3, #0
   c013a:	d0f7      	beq.n	c012c <frame_dummy+0x14>
   c013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c0140:	4718      	bx	r3
   c0142:	4b06      	ldr	r3, [pc, #24]	; (c015c <frame_dummy+0x44>)
   c0144:	2b00      	cmp	r3, #0
   c0146:	d0f5      	beq.n	c0134 <frame_dummy+0x1c>
   c0148:	4718      	bx	r3
   c014a:	bf00      	nop
   c014c:	00000000 	.word	0x00000000
   c0150:	000c4230 	.word	0x000c4230
   c0154:	20070b74 	.word	0x20070b74
   c0158:	000c4230 	.word	0x000c4230
   c015c:	00000000 	.word	0x00000000

000c0160 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   c0160:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   c0162:	480e      	ldr	r0, [pc, #56]	; (c019c <sysclk_init+0x3c>)
   c0164:	4b0e      	ldr	r3, [pc, #56]	; (c01a0 <sysclk_init+0x40>)
   c0166:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   c0168:	213e      	movs	r1, #62	; 0x3e
   c016a:	2000      	movs	r0, #0
   c016c:	4b0d      	ldr	r3, [pc, #52]	; (c01a4 <sysclk_init+0x44>)
   c016e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   c0170:	4c0d      	ldr	r4, [pc, #52]	; (c01a8 <sysclk_init+0x48>)
   c0172:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   c0174:	2800      	cmp	r0, #0
   c0176:	d0fc      	beq.n	c0172 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   c0178:	4b0c      	ldr	r3, [pc, #48]	; (c01ac <sysclk_init+0x4c>)
   c017a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   c017c:	4a0c      	ldr	r2, [pc, #48]	; (c01b0 <sysclk_init+0x50>)
   c017e:	4b0d      	ldr	r3, [pc, #52]	; (c01b4 <sysclk_init+0x54>)
   c0180:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   c0182:	4c0d      	ldr	r4, [pc, #52]	; (c01b8 <sysclk_init+0x58>)
   c0184:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   c0186:	2800      	cmp	r0, #0
   c0188:	d0fc      	beq.n	c0184 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   c018a:	2010      	movs	r0, #16
   c018c:	4b0b      	ldr	r3, [pc, #44]	; (c01bc <sysclk_init+0x5c>)
   c018e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   c0190:	4b0b      	ldr	r3, [pc, #44]	; (c01c0 <sysclk_init+0x60>)
   c0192:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   c0194:	4801      	ldr	r0, [pc, #4]	; (c019c <sysclk_init+0x3c>)
   c0196:	4b02      	ldr	r3, [pc, #8]	; (c01a0 <sysclk_init+0x40>)
   c0198:	4798      	blx	r3
   c019a:	bd10      	pop	{r4, pc}
   c019c:	0501bd00 	.word	0x0501bd00
   c01a0:	200700a5 	.word	0x200700a5
   c01a4:	000c0715 	.word	0x000c0715
   c01a8:	000c0769 	.word	0x000c0769
   c01ac:	000c0779 	.word	0x000c0779
   c01b0:	200d3f01 	.word	0x200d3f01
   c01b4:	400e0600 	.word	0x400e0600
   c01b8:	000c0789 	.word	0x000c0789
   c01bc:	000c06b1 	.word	0x000c06b1
   c01c0:	000c0989 	.word	0x000c0989

000c01c4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   c01c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   c01c8:	b980      	cbnz	r0, c01ec <_read+0x28>
   c01ca:	460c      	mov	r4, r1
   c01cc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   c01ce:	2a00      	cmp	r2, #0
   c01d0:	dd0f      	ble.n	c01f2 <_read+0x2e>
   c01d2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   c01d4:	4e08      	ldr	r6, [pc, #32]	; (c01f8 <_read+0x34>)
   c01d6:	4d09      	ldr	r5, [pc, #36]	; (c01fc <_read+0x38>)
   c01d8:	6830      	ldr	r0, [r6, #0]
   c01da:	4621      	mov	r1, r4
   c01dc:	682b      	ldr	r3, [r5, #0]
   c01de:	4798      	blx	r3
		ptr++;
   c01e0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   c01e2:	42bc      	cmp	r4, r7
   c01e4:	d1f8      	bne.n	c01d8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   c01e6:	4640      	mov	r0, r8
   c01e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   c01ec:	f04f 38ff 	mov.w	r8, #4294967295
   c01f0:	e7f9      	b.n	c01e6 <_read+0x22>
	for (; len > 0; --len) {
   c01f2:	4680      	mov	r8, r0
   c01f4:	e7f7      	b.n	c01e6 <_read+0x22>
   c01f6:	bf00      	nop
   c01f8:	20070d48 	.word	0x20070d48
   c01fc:	20070d40 	.word	0x20070d40

000c0200 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   c0200:	3801      	subs	r0, #1
   c0202:	2802      	cmp	r0, #2
   c0204:	d815      	bhi.n	c0232 <_write+0x32>
{
   c0206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c020a:	460e      	mov	r6, r1
   c020c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   c020e:	b19a      	cbz	r2, c0238 <_write+0x38>
   c0210:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   c0212:	f8df 8038 	ldr.w	r8, [pc, #56]	; c024c <_write+0x4c>
   c0216:	4f0c      	ldr	r7, [pc, #48]	; (c0248 <_write+0x48>)
   c0218:	f8d8 0000 	ldr.w	r0, [r8]
   c021c:	f815 1b01 	ldrb.w	r1, [r5], #1
   c0220:	683b      	ldr	r3, [r7, #0]
   c0222:	4798      	blx	r3
   c0224:	2800      	cmp	r0, #0
   c0226:	db0a      	blt.n	c023e <_write+0x3e>
   c0228:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   c022a:	3c01      	subs	r4, #1
   c022c:	d1f4      	bne.n	c0218 <_write+0x18>
   c022e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   c0232:	f04f 30ff 	mov.w	r0, #4294967295
   c0236:	4770      	bx	lr
	for (; len != 0; --len) {
   c0238:	4610      	mov	r0, r2
   c023a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   c023e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   c0242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c0246:	bf00      	nop
   c0248:	20070d44 	.word	0x20070d44
   c024c:	20070d48 	.word	0x20070d48

000c0250 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   c0250:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   c0252:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   c0256:	4b12      	ldr	r3, [pc, #72]	; (c02a0 <board_init+0x50>)
   c0258:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   c025a:	200b      	movs	r0, #11
   c025c:	4c11      	ldr	r4, [pc, #68]	; (c02a4 <board_init+0x54>)
   c025e:	47a0      	blx	r4
   c0260:	200c      	movs	r0, #12
   c0262:	47a0      	blx	r4
   c0264:	200d      	movs	r0, #13
   c0266:	47a0      	blx	r4
   c0268:	200e      	movs	r0, #14
   c026a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   c026c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   c0270:	203b      	movs	r0, #59	; 0x3b
   c0272:	4c0d      	ldr	r4, [pc, #52]	; (c02a8 <board_init+0x58>)
   c0274:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   c0276:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   c027a:	2055      	movs	r0, #85	; 0x55
   c027c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   c027e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   c0282:	2056      	movs	r0, #86	; 0x56
   c0284:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   c0286:	4909      	ldr	r1, [pc, #36]	; (c02ac <board_init+0x5c>)
   c0288:	2068      	movs	r0, #104	; 0x68
   c028a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   c028c:	4908      	ldr	r1, [pc, #32]	; (c02b0 <board_init+0x60>)
   c028e:	205c      	movs	r0, #92	; 0x5c
   c0290:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   c0292:	4a08      	ldr	r2, [pc, #32]	; (c02b4 <board_init+0x64>)
   c0294:	f44f 7140 	mov.w	r1, #768	; 0x300
   c0298:	4807      	ldr	r0, [pc, #28]	; (c02b8 <board_init+0x68>)
   c029a:	4b08      	ldr	r3, [pc, #32]	; (c02bc <board_init+0x6c>)
   c029c:	4798      	blx	r3
   c029e:	bd10      	pop	{r4, pc}
   c02a0:	400e1a50 	.word	0x400e1a50
   c02a4:	000c0799 	.word	0x000c0799
   c02a8:	000c03b1 	.word	0x000c03b1
   c02ac:	28000079 	.word	0x28000079
   c02b0:	28000001 	.word	0x28000001
   c02b4:	08000001 	.word	0x08000001
   c02b8:	400e0e00 	.word	0x400e0e00
   c02bc:	000c0481 	.word	0x000c0481

000c02c0 <pio_set_debounce_filter>:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
#elif (SAM3XA || SAM3U)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_DIFSR = ul_mask;
   c02c0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
   c02c4:	0053      	lsls	r3, r2, #1
   c02c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   c02ca:	fbb2 f2f3 	udiv	r2, r2, r3
   c02ce:	3a01      	subs	r2, #1
   c02d0:	f3c2 020d 	ubfx	r2, r2, #0, #14
   c02d4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
   c02d8:	4770      	bx	lr

000c02da <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   c02da:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   c02dc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   c02e0:	d016      	beq.n	c0310 <pio_set_peripheral+0x36>
   c02e2:	d80b      	bhi.n	c02fc <pio_set_peripheral+0x22>
   c02e4:	b149      	cbz	r1, c02fa <pio_set_peripheral+0x20>
   c02e6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   c02ea:	d105      	bne.n	c02f8 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   c02ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   c02ee:	6f01      	ldr	r1, [r0, #112]	; 0x70
   c02f0:	400b      	ands	r3, r1
   c02f2:	ea23 0302 	bic.w	r3, r3, r2
   c02f6:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   c02f8:	6042      	str	r2, [r0, #4]
   c02fa:	4770      	bx	lr
	switch (ul_type) {
   c02fc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   c0300:	d0fb      	beq.n	c02fa <pio_set_peripheral+0x20>
   c0302:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   c0306:	d0f8      	beq.n	c02fa <pio_set_peripheral+0x20>
   c0308:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   c030c:	d1f4      	bne.n	c02f8 <pio_set_peripheral+0x1e>
   c030e:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   c0310:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   c0312:	4313      	orrs	r3, r2
   c0314:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   c0316:	e7ef      	b.n	c02f8 <pio_set_peripheral+0x1e>

000c0318 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   c0318:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   c031a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   c031e:	bf14      	ite	ne
   c0320:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   c0322:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   c0324:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   c0328:	bf14      	ite	ne
   c032a:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   c032c:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   c032e:	f012 0f02 	tst.w	r2, #2
   c0332:	d107      	bne.n	c0344 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   c0334:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   c0338:	bf18      	it	ne
   c033a:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   c033e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   c0340:	6001      	str	r1, [r0, #0]
   c0342:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   c0344:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   c0348:	e7f9      	b.n	c033e <pio_set_input+0x26>

000c034a <pio_set_output>:
{
   c034a:	b410      	push	{r4}
   c034c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   c034e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   c0350:	b944      	cbnz	r4, c0364 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   c0352:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   c0354:	b143      	cbz	r3, c0368 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   c0356:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   c0358:	b942      	cbnz	r2, c036c <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   c035a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   c035c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   c035e:	6001      	str	r1, [r0, #0]
}
   c0360:	bc10      	pop	{r4}
   c0362:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   c0364:	6641      	str	r1, [r0, #100]	; 0x64
   c0366:	e7f5      	b.n	c0354 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   c0368:	6541      	str	r1, [r0, #84]	; 0x54
   c036a:	e7f5      	b.n	c0358 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   c036c:	6301      	str	r1, [r0, #48]	; 0x30
   c036e:	e7f5      	b.n	c035c <pio_set_output+0x12>

000c0370 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   c0370:	f012 0f10 	tst.w	r2, #16
   c0374:	d010      	beq.n	c0398 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   c0376:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   c037a:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   c037e:	bf14      	ite	ne
   c0380:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   c0384:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   c0388:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   c038c:	bf14      	ite	ne
   c038e:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   c0392:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   c0396:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   c0398:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   c039c:	4770      	bx	lr

000c039e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   c039e:	6401      	str	r1, [r0, #64]	; 0x40
   c03a0:	4770      	bx	lr

000c03a2 <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
   c03a2:	6441      	str	r1, [r0, #68]	; 0x44
   c03a4:	4770      	bx	lr

000c03a6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   c03a6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   c03a8:	4770      	bx	lr

000c03aa <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   c03aa:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   c03ac:	4770      	bx	lr
	...

000c03b0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   c03b0:	b570      	push	{r4, r5, r6, lr}
   c03b2:	b082      	sub	sp, #8
   c03b4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   c03b6:	0943      	lsrs	r3, r0, #5
   c03b8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   c03bc:	f203 7307 	addw	r3, r3, #1799	; 0x707
   c03c0:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   c03c2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   c03c6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   c03ca:	d031      	beq.n	c0430 <pio_configure_pin+0x80>
   c03cc:	d816      	bhi.n	c03fc <pio_configure_pin+0x4c>
   c03ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   c03d2:	d01b      	beq.n	c040c <pio_configure_pin+0x5c>
   c03d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   c03d8:	d116      	bne.n	c0408 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   c03da:	f000 001f 	and.w	r0, r0, #31
   c03de:	2601      	movs	r6, #1
   c03e0:	4086      	lsls	r6, r0
   c03e2:	4632      	mov	r2, r6
   c03e4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   c03e8:	4620      	mov	r0, r4
   c03ea:	4b22      	ldr	r3, [pc, #136]	; (c0474 <pio_configure_pin+0xc4>)
   c03ec:	4798      	blx	r3
	if (ul_pull_up_enable) {
   c03ee:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   c03f2:	bf14      	ite	ne
   c03f4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   c03f6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   c03f8:	2001      	movs	r0, #1
   c03fa:	e017      	b.n	c042c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   c03fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   c0400:	d021      	beq.n	c0446 <pio_configure_pin+0x96>
   c0402:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   c0406:	d01e      	beq.n	c0446 <pio_configure_pin+0x96>
		return 0;
   c0408:	2000      	movs	r0, #0
   c040a:	e00f      	b.n	c042c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   c040c:	f000 001f 	and.w	r0, r0, #31
   c0410:	2601      	movs	r6, #1
   c0412:	4086      	lsls	r6, r0
   c0414:	4632      	mov	r2, r6
   c0416:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   c041a:	4620      	mov	r0, r4
   c041c:	4b15      	ldr	r3, [pc, #84]	; (c0474 <pio_configure_pin+0xc4>)
   c041e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   c0420:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   c0424:	bf14      	ite	ne
   c0426:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   c0428:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   c042a:	2001      	movs	r0, #1
}
   c042c:	b002      	add	sp, #8
   c042e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   c0430:	f000 011f 	and.w	r1, r0, #31
   c0434:	2601      	movs	r6, #1
   c0436:	462a      	mov	r2, r5
   c0438:	fa06 f101 	lsl.w	r1, r6, r1
   c043c:	4620      	mov	r0, r4
   c043e:	4b0e      	ldr	r3, [pc, #56]	; (c0478 <pio_configure_pin+0xc8>)
   c0440:	4798      	blx	r3
	return 1;
   c0442:	4630      	mov	r0, r6
		break;
   c0444:	e7f2      	b.n	c042c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   c0446:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   c044a:	f000 011f 	and.w	r1, r0, #31
   c044e:	2601      	movs	r6, #1
   c0450:	ea05 0306 	and.w	r3, r5, r6
   c0454:	9300      	str	r3, [sp, #0]
   c0456:	f3c5 0380 	ubfx	r3, r5, #2, #1
   c045a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   c045e:	bf14      	ite	ne
   c0460:	2200      	movne	r2, #0
   c0462:	2201      	moveq	r2, #1
   c0464:	fa06 f101 	lsl.w	r1, r6, r1
   c0468:	4620      	mov	r0, r4
   c046a:	4c04      	ldr	r4, [pc, #16]	; (c047c <pio_configure_pin+0xcc>)
   c046c:	47a0      	blx	r4
	return 1;
   c046e:	4630      	mov	r0, r6
		break;
   c0470:	e7dc      	b.n	c042c <pio_configure_pin+0x7c>
   c0472:	bf00      	nop
   c0474:	000c02db 	.word	0x000c02db
   c0478:	000c0319 	.word	0x000c0319
   c047c:	000c034b 	.word	0x000c034b

000c0480 <pio_configure_pin_group>:
{
   c0480:	b570      	push	{r4, r5, r6, lr}
   c0482:	b082      	sub	sp, #8
   c0484:	4605      	mov	r5, r0
   c0486:	460e      	mov	r6, r1
   c0488:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   c048a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   c048e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   c0492:	d027      	beq.n	c04e4 <pio_configure_pin_group+0x64>
   c0494:	d811      	bhi.n	c04ba <pio_configure_pin_group+0x3a>
   c0496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   c049a:	d016      	beq.n	c04ca <pio_configure_pin_group+0x4a>
   c049c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   c04a0:	d111      	bne.n	c04c6 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   c04a2:	460a      	mov	r2, r1
   c04a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   c04a8:	4b19      	ldr	r3, [pc, #100]	; (c0510 <pio_configure_pin_group+0x90>)
   c04aa:	4798      	blx	r3
	if (ul_pull_up_enable) {
   c04ac:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   c04b0:	bf14      	ite	ne
   c04b2:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   c04b4:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   c04b6:	2001      	movs	r0, #1
   c04b8:	e012      	b.n	c04e0 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   c04ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   c04be:	d015      	beq.n	c04ec <pio_configure_pin_group+0x6c>
   c04c0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   c04c4:	d012      	beq.n	c04ec <pio_configure_pin_group+0x6c>
		return 0;
   c04c6:	2000      	movs	r0, #0
   c04c8:	e00a      	b.n	c04e0 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   c04ca:	460a      	mov	r2, r1
   c04cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   c04d0:	4b0f      	ldr	r3, [pc, #60]	; (c0510 <pio_configure_pin_group+0x90>)
   c04d2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   c04d4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   c04d8:	bf14      	ite	ne
   c04da:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   c04dc:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   c04de:	2001      	movs	r0, #1
}
   c04e0:	b002      	add	sp, #8
   c04e2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   c04e4:	4b0b      	ldr	r3, [pc, #44]	; (c0514 <pio_configure_pin_group+0x94>)
   c04e6:	4798      	blx	r3
	return 1;
   c04e8:	2001      	movs	r0, #1
		break;
   c04ea:	e7f9      	b.n	c04e0 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   c04ec:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   c04f0:	f004 0301 	and.w	r3, r4, #1
   c04f4:	9300      	str	r3, [sp, #0]
   c04f6:	f3c4 0380 	ubfx	r3, r4, #2, #1
   c04fa:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   c04fe:	bf14      	ite	ne
   c0500:	2200      	movne	r2, #0
   c0502:	2201      	moveq	r2, #1
   c0504:	4631      	mov	r1, r6
   c0506:	4628      	mov	r0, r5
   c0508:	4c03      	ldr	r4, [pc, #12]	; (c0518 <pio_configure_pin_group+0x98>)
   c050a:	47a0      	blx	r4
	return 1;
   c050c:	2001      	movs	r0, #1
		break;
   c050e:	e7e7      	b.n	c04e0 <pio_configure_pin_group+0x60>
   c0510:	000c02db 	.word	0x000c02db
   c0514:	000c0319 	.word	0x000c0319
   c0518:	000c034b 	.word	0x000c034b

000c051c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   c051c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0520:	4604      	mov	r4, r0
   c0522:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   c0524:	4b0e      	ldr	r3, [pc, #56]	; (c0560 <pio_handler_process+0x44>)
   c0526:	4798      	blx	r3
   c0528:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   c052a:	4620      	mov	r0, r4
   c052c:	4b0d      	ldr	r3, [pc, #52]	; (c0564 <pio_handler_process+0x48>)
   c052e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   c0530:	4005      	ands	r5, r0
   c0532:	d013      	beq.n	c055c <pio_handler_process+0x40>
   c0534:	4c0c      	ldr	r4, [pc, #48]	; (c0568 <pio_handler_process+0x4c>)
   c0536:	f104 0660 	add.w	r6, r4, #96	; 0x60
   c053a:	e003      	b.n	c0544 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   c053c:	42b4      	cmp	r4, r6
   c053e:	d00d      	beq.n	c055c <pio_handler_process+0x40>
   c0540:	3410      	adds	r4, #16
		while (status != 0) {
   c0542:	b15d      	cbz	r5, c055c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   c0544:	6820      	ldr	r0, [r4, #0]
   c0546:	4540      	cmp	r0, r8
   c0548:	d1f8      	bne.n	c053c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   c054a:	6861      	ldr	r1, [r4, #4]
   c054c:	4229      	tst	r1, r5
   c054e:	d0f5      	beq.n	c053c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   c0550:	68e3      	ldr	r3, [r4, #12]
   c0552:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   c0554:	6863      	ldr	r3, [r4, #4]
   c0556:	ea25 0503 	bic.w	r5, r5, r3
   c055a:	e7ef      	b.n	c053c <pio_handler_process+0x20>
   c055c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c0560:	000c03a7 	.word	0x000c03a7
   c0564:	000c03ab 	.word	0x000c03ab
   c0568:	20070b8c 	.word	0x20070b8c

000c056c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   c056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   c056e:	4c18      	ldr	r4, [pc, #96]	; (c05d0 <pio_handler_set+0x64>)
   c0570:	6826      	ldr	r6, [r4, #0]
   c0572:	2e06      	cmp	r6, #6
   c0574:	d829      	bhi.n	c05ca <pio_handler_set+0x5e>
   c0576:	f04f 0c00 	mov.w	ip, #0
   c057a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   c057c:	4f15      	ldr	r7, [pc, #84]	; (c05d4 <pio_handler_set+0x68>)
   c057e:	e004      	b.n	c058a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   c0580:	3401      	adds	r4, #1
   c0582:	b2e4      	uxtb	r4, r4
   c0584:	46a4      	mov	ip, r4
   c0586:	42a6      	cmp	r6, r4
   c0588:	d309      	bcc.n	c059e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   c058a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   c058c:	0125      	lsls	r5, r4, #4
   c058e:	597d      	ldr	r5, [r7, r5]
   c0590:	428d      	cmp	r5, r1
   c0592:	d1f5      	bne.n	c0580 <pio_handler_set+0x14>
   c0594:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   c0598:	686d      	ldr	r5, [r5, #4]
   c059a:	4295      	cmp	r5, r2
   c059c:	d1f0      	bne.n	c0580 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   c059e:	4d0d      	ldr	r5, [pc, #52]	; (c05d4 <pio_handler_set+0x68>)
   c05a0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   c05a4:	eb05 040e 	add.w	r4, r5, lr
   c05a8:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   c05ac:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   c05ae:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   c05b0:	9906      	ldr	r1, [sp, #24]
   c05b2:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   c05b4:	3601      	adds	r6, #1
   c05b6:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   c05b8:	bf04      	itt	eq
   c05ba:	4905      	ldreq	r1, [pc, #20]	; (c05d0 <pio_handler_set+0x64>)
   c05bc:	600e      	streq	r6, [r1, #0]
   c05be:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   c05c0:	461a      	mov	r2, r3
   c05c2:	4b05      	ldr	r3, [pc, #20]	; (c05d8 <pio_handler_set+0x6c>)
   c05c4:	4798      	blx	r3

	return 0;
   c05c6:	2000      	movs	r0, #0
   c05c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   c05ca:	2001      	movs	r0, #1
}
   c05cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c05ce:	bf00      	nop
   c05d0:	20070bfc 	.word	0x20070bfc
   c05d4:	20070b8c 	.word	0x20070b8c
   c05d8:	000c0371 	.word	0x000c0371

000c05dc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   c05dc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   c05de:	210b      	movs	r1, #11
   c05e0:	4801      	ldr	r0, [pc, #4]	; (c05e8 <PIOA_Handler+0xc>)
   c05e2:	4b02      	ldr	r3, [pc, #8]	; (c05ec <PIOA_Handler+0x10>)
   c05e4:	4798      	blx	r3
   c05e6:	bd08      	pop	{r3, pc}
   c05e8:	400e0e00 	.word	0x400e0e00
   c05ec:	000c051d 	.word	0x000c051d

000c05f0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   c05f0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   c05f2:	210c      	movs	r1, #12
   c05f4:	4801      	ldr	r0, [pc, #4]	; (c05fc <PIOB_Handler+0xc>)
   c05f6:	4b02      	ldr	r3, [pc, #8]	; (c0600 <PIOB_Handler+0x10>)
   c05f8:	4798      	blx	r3
   c05fa:	bd08      	pop	{r3, pc}
   c05fc:	400e1000 	.word	0x400e1000
   c0600:	000c051d 	.word	0x000c051d

000c0604 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   c0604:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   c0606:	210d      	movs	r1, #13
   c0608:	4801      	ldr	r0, [pc, #4]	; (c0610 <PIOC_Handler+0xc>)
   c060a:	4b02      	ldr	r3, [pc, #8]	; (c0614 <PIOC_Handler+0x10>)
   c060c:	4798      	blx	r3
   c060e:	bd08      	pop	{r3, pc}
   c0610:	400e1200 	.word	0x400e1200
   c0614:	000c051d 	.word	0x000c051d

000c0618 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   c0618:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   c061a:	210e      	movs	r1, #14
   c061c:	4801      	ldr	r0, [pc, #4]	; (c0624 <PIOD_Handler+0xc>)
   c061e:	4b02      	ldr	r3, [pc, #8]	; (c0628 <PIOD_Handler+0x10>)
   c0620:	4798      	blx	r3
   c0622:	bd08      	pop	{r3, pc}
   c0624:	400e1400 	.word	0x400e1400
   c0628:	000c051d 	.word	0x000c051d

000c062c <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
   c062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c062e:	4606      	mov	r6, r0
   c0630:	460c      	mov	r4, r1
   c0632:	4615      	mov	r5, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
   c0634:	4b18      	ldr	r3, [pc, #96]	; (c0698 <pio_handler_set_priority+0x6c>)
   c0636:	4798      	blx	r3
   c0638:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
   c063a:	f04f 31ff 	mov.w	r1, #4294967295
   c063e:	4630      	mov	r0, r6
   c0640:	4b16      	ldr	r3, [pc, #88]	; (c069c <pio_handler_set_priority+0x70>)
   c0642:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
   c0644:	4630      	mov	r0, r6
   c0646:	4b16      	ldr	r3, [pc, #88]	; (c06a0 <pio_handler_set_priority+0x74>)
   c0648:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   c064a:	2c00      	cmp	r4, #0
   c064c:	db1d      	blt.n	c068a <pio_handler_set_priority+0x5e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   c064e:	0961      	lsrs	r1, r4, #5
   c0650:	f004 021f 	and.w	r2, r4, #31
   c0654:	2301      	movs	r3, #1
   c0656:	4093      	lsls	r3, r2
   c0658:	4a12      	ldr	r2, [pc, #72]	; (c06a4 <pio_handler_set_priority+0x78>)
   c065a:	f101 0020 	add.w	r0, r1, #32
   c065e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   c0662:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   c0666:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   c066a:	f101 0060 	add.w	r0, r1, #96	; 0x60
   c066e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   c0672:	012d      	lsls	r5, r5, #4
   c0674:	b2ed      	uxtb	r5, r5
   c0676:	4414      	add	r4, r2
   c0678:	f884 5300 	strb.w	r5, [r4, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   c067c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
   c0680:	4639      	mov	r1, r7
   c0682:	4630      	mov	r0, r6
   c0684:	4b08      	ldr	r3, [pc, #32]	; (c06a8 <pio_handler_set_priority+0x7c>)
   c0686:	4798      	blx	r3
   c0688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   c068a:	f004 040f 	and.w	r4, r4, #15
   c068e:	012d      	lsls	r5, r5, #4
   c0690:	b2ed      	uxtb	r5, r5
   c0692:	4b06      	ldr	r3, [pc, #24]	; (c06ac <pio_handler_set_priority+0x80>)
   c0694:	551d      	strb	r5, [r3, r4]
   c0696:	e7f3      	b.n	c0680 <pio_handler_set_priority+0x54>
   c0698:	000c03ab 	.word	0x000c03ab
   c069c:	000c03a3 	.word	0x000c03a3
   c06a0:	000c03a7 	.word	0x000c03a7
   c06a4:	e000e100 	.word	0xe000e100
   c06a8:	000c039f 	.word	0x000c039f
   c06ac:	e000ed14 	.word	0xe000ed14

000c06b0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   c06b0:	4a17      	ldr	r2, [pc, #92]	; (c0710 <pmc_switch_mck_to_pllack+0x60>)
   c06b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   c06b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   c06b8:	4318      	orrs	r0, r3
   c06ba:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   c06bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
   c06be:	f013 0f08 	tst.w	r3, #8
   c06c2:	d10a      	bne.n	c06da <pmc_switch_mck_to_pllack+0x2a>
   c06c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   c06c8:	4911      	ldr	r1, [pc, #68]	; (c0710 <pmc_switch_mck_to_pllack+0x60>)
   c06ca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   c06cc:	f012 0f08 	tst.w	r2, #8
   c06d0:	d103      	bne.n	c06da <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   c06d2:	3b01      	subs	r3, #1
   c06d4:	d1f9      	bne.n	c06ca <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   c06d6:	2001      	movs	r0, #1
   c06d8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   c06da:	4a0d      	ldr	r2, [pc, #52]	; (c0710 <pmc_switch_mck_to_pllack+0x60>)
   c06dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
   c06de:	f023 0303 	bic.w	r3, r3, #3
   c06e2:	f043 0302 	orr.w	r3, r3, #2
   c06e6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   c06e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   c06ea:	f013 0f08 	tst.w	r3, #8
   c06ee:	d10a      	bne.n	c0706 <pmc_switch_mck_to_pllack+0x56>
   c06f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   c06f4:	4906      	ldr	r1, [pc, #24]	; (c0710 <pmc_switch_mck_to_pllack+0x60>)
   c06f6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   c06f8:	f012 0f08 	tst.w	r2, #8
   c06fc:	d105      	bne.n	c070a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   c06fe:	3b01      	subs	r3, #1
   c0700:	d1f9      	bne.n	c06f6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   c0702:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   c0704:	4770      	bx	lr
	return 0;
   c0706:	2000      	movs	r0, #0
   c0708:	4770      	bx	lr
   c070a:	2000      	movs	r0, #0
   c070c:	4770      	bx	lr
   c070e:	bf00      	nop
   c0710:	400e0600 	.word	0x400e0600

000c0714 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   c0714:	b9c8      	cbnz	r0, c074a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   c0716:	4a11      	ldr	r2, [pc, #68]	; (c075c <pmc_switch_mainck_to_xtal+0x48>)
   c0718:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   c071a:	0209      	lsls	r1, r1, #8
   c071c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   c071e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   c0722:	f023 0303 	bic.w	r3, r3, #3
   c0726:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   c072a:	f043 0301 	orr.w	r3, r3, #1
   c072e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   c0730:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   c0732:	6e93      	ldr	r3, [r2, #104]	; 0x68
   c0734:	f013 0f01 	tst.w	r3, #1
   c0738:	d0fb      	beq.n	c0732 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   c073a:	4a08      	ldr	r2, [pc, #32]	; (c075c <pmc_switch_mainck_to_xtal+0x48>)
   c073c:	6a13      	ldr	r3, [r2, #32]
   c073e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   c0742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   c0746:	6213      	str	r3, [r2, #32]
   c0748:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   c074a:	4904      	ldr	r1, [pc, #16]	; (c075c <pmc_switch_mainck_to_xtal+0x48>)
   c074c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   c074e:	4a04      	ldr	r2, [pc, #16]	; (c0760 <pmc_switch_mainck_to_xtal+0x4c>)
   c0750:	401a      	ands	r2, r3
   c0752:	4b04      	ldr	r3, [pc, #16]	; (c0764 <pmc_switch_mainck_to_xtal+0x50>)
   c0754:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   c0756:	620b      	str	r3, [r1, #32]
   c0758:	4770      	bx	lr
   c075a:	bf00      	nop
   c075c:	400e0600 	.word	0x400e0600
   c0760:	fec8fffc 	.word	0xfec8fffc
   c0764:	01370002 	.word	0x01370002

000c0768 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   c0768:	4b02      	ldr	r3, [pc, #8]	; (c0774 <pmc_osc_is_ready_mainck+0xc>)
   c076a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   c076c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   c0770:	4770      	bx	lr
   c0772:	bf00      	nop
   c0774:	400e0600 	.word	0x400e0600

000c0778 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   c0778:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   c077c:	4b01      	ldr	r3, [pc, #4]	; (c0784 <pmc_disable_pllack+0xc>)
   c077e:	629a      	str	r2, [r3, #40]	; 0x28
   c0780:	4770      	bx	lr
   c0782:	bf00      	nop
   c0784:	400e0600 	.word	0x400e0600

000c0788 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   c0788:	4b02      	ldr	r3, [pc, #8]	; (c0794 <pmc_is_locked_pllack+0xc>)
   c078a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   c078c:	f000 0002 	and.w	r0, r0, #2
   c0790:	4770      	bx	lr
   c0792:	bf00      	nop
   c0794:	400e0600 	.word	0x400e0600

000c0798 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   c0798:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   c079c:	4b05      	ldr	r3, [pc, #20]	; (c07b4 <pmc_enable_periph_clk+0x1c>)
   c079e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   c07a2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   c07a6:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   c07aa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   c07ae:	2000      	movs	r0, #0
   c07b0:	4770      	bx	lr
   c07b2:	bf00      	nop
   c07b4:	400e0600 	.word	0x400e0600

000c07b8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   c07b8:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   c07ba:	0189      	lsls	r1, r1, #6
   c07bc:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   c07be:	2402      	movs	r4, #2
   c07c0:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   c07c2:	f04f 31ff 	mov.w	r1, #4294967295
   c07c6:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   c07c8:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   c07ca:	605a      	str	r2, [r3, #4]
}
   c07cc:	bc10      	pop	{r4}
   c07ce:	4770      	bx	lr

000c07d0 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   c07d0:	0189      	lsls	r1, r1, #6
   c07d2:	2305      	movs	r3, #5
   c07d4:	5043      	str	r3, [r0, r1]
   c07d6:	4770      	bx	lr

000c07d8 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   c07d8:	0189      	lsls	r1, r1, #6
   c07da:	2302      	movs	r3, #2
   c07dc:	5043      	str	r3, [r0, r1]
   c07de:	4770      	bx	lr

000c07e0 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   c07e0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   c07e4:	61ca      	str	r2, [r1, #28]
   c07e6:	4770      	bx	lr

000c07e8 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   c07e8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   c07ec:	624a      	str	r2, [r1, #36]	; 0x24
   c07ee:	4770      	bx	lr

000c07f0 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   c07f0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   c07f4:	6a08      	ldr	r0, [r1, #32]
}
   c07f6:	4770      	bx	lr

000c07f8 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
   c07f8:	b4f0      	push	{r4, r5, r6, r7}
   c07fa:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   c07fc:	2402      	movs	r4, #2
   c07fe:	9401      	str	r4, [sp, #4]
   c0800:	2408      	movs	r4, #8
   c0802:	9402      	str	r4, [sp, #8]
   c0804:	2420      	movs	r4, #32
   c0806:	9403      	str	r4, [sp, #12]
   c0808:	2480      	movs	r4, #128	; 0x80
   c080a:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
   c080c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   c080e:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   c0810:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
   c0812:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
   c0816:	d814      	bhi.n	c0842 <tc_find_mck_divisor+0x4a>
   c0818:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
   c081a:	42a0      	cmp	r0, r4
   c081c:	d217      	bcs.n	c084e <tc_find_mck_divisor+0x56>
   c081e:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
   c0820:	af01      	add	r7, sp, #4
   c0822:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
   c0826:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
   c082a:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
   c082c:	4284      	cmp	r4, r0
   c082e:	d30a      	bcc.n	c0846 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
   c0830:	4286      	cmp	r6, r0
   c0832:	d90d      	bls.n	c0850 <tc_find_mck_divisor+0x58>
			ul_index++) {
   c0834:	3501      	adds	r5, #1
	for (ul_index = 0;
   c0836:	2d05      	cmp	r5, #5
   c0838:	d1f3      	bne.n	c0822 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
   c083a:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
   c083c:	b006      	add	sp, #24
   c083e:	bcf0      	pop	{r4, r5, r6, r7}
   c0840:	4770      	bx	lr
			return 0;
   c0842:	2000      	movs	r0, #0
   c0844:	e7fa      	b.n	c083c <tc_find_mck_divisor+0x44>
   c0846:	2000      	movs	r0, #0
   c0848:	e7f8      	b.n	c083c <tc_find_mck_divisor+0x44>
	return 1;
   c084a:	2001      	movs	r0, #1
   c084c:	e7f6      	b.n	c083c <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
   c084e:	2500      	movs	r5, #0
	if (p_uldiv) {
   c0850:	b12a      	cbz	r2, c085e <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
   c0852:	a906      	add	r1, sp, #24
   c0854:	eb01 0185 	add.w	r1, r1, r5, lsl #2
   c0858:	f851 1c14 	ldr.w	r1, [r1, #-20]
   c085c:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
   c085e:	2b00      	cmp	r3, #0
   c0860:	d0f3      	beq.n	c084a <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
   c0862:	601d      	str	r5, [r3, #0]
	return 1;
   c0864:	2001      	movs	r0, #1
   c0866:	e7e9      	b.n	c083c <tc_find_mck_divisor+0x44>

000c0868 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   c0868:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   c086a:	23ac      	movs	r3, #172	; 0xac
   c086c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   c086e:	680b      	ldr	r3, [r1, #0]
   c0870:	684a      	ldr	r2, [r1, #4]
   c0872:	fbb3 f3f2 	udiv	r3, r3, r2
   c0876:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   c0878:	1e5c      	subs	r4, r3, #1
   c087a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   c087e:	4294      	cmp	r4, r2
   c0880:	d80b      	bhi.n	c089a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   c0882:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   c0884:	688b      	ldr	r3, [r1, #8]
   c0886:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   c0888:	f240 2302 	movw	r3, #514	; 0x202
   c088c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   c0890:	2350      	movs	r3, #80	; 0x50
   c0892:	6003      	str	r3, [r0, #0]

	return 0;
   c0894:	2000      	movs	r0, #0
}
   c0896:	bc10      	pop	{r4}
   c0898:	4770      	bx	lr
		return 1;
   c089a:	2001      	movs	r0, #1
   c089c:	e7fb      	b.n	c0896 <uart_init+0x2e>

000c089e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   c089e:	6943      	ldr	r3, [r0, #20]
   c08a0:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   c08a4:	bf1a      	itte	ne
   c08a6:	61c1      	strne	r1, [r0, #28]
	return 0;
   c08a8:	2000      	movne	r0, #0
		return 1;
   c08aa:	2001      	moveq	r0, #1
}
   c08ac:	4770      	bx	lr

000c08ae <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   c08ae:	6943      	ldr	r3, [r0, #20]
   c08b0:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   c08b4:	bf1d      	ittte	ne
   c08b6:	6983      	ldrne	r3, [r0, #24]
   c08b8:	700b      	strbne	r3, [r1, #0]
	return 0;
   c08ba:	2000      	movne	r0, #0
		return 1;
   c08bc:	2001      	moveq	r0, #1
}
   c08be:	4770      	bx	lr

000c08c0 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   c08c0:	6943      	ldr	r3, [r0, #20]
   c08c2:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   c08c6:	bf1d      	ittte	ne
   c08c8:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   c08cc:	61c1      	strne	r1, [r0, #28]
	return 0;
   c08ce:	2000      	movne	r0, #0
		return 1;
   c08d0:	2001      	moveq	r0, #1
}
   c08d2:	4770      	bx	lr

000c08d4 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   c08d4:	6943      	ldr	r3, [r0, #20]
   c08d6:	f013 0f01 	tst.w	r3, #1
   c08da:	d005      	beq.n	c08e8 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   c08dc:	6983      	ldr	r3, [r0, #24]
   c08de:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c08e2:	600b      	str	r3, [r1, #0]

	return 0;
   c08e4:	2000      	movs	r0, #0
   c08e6:	4770      	bx	lr
		return 1;
   c08e8:	2001      	movs	r0, #1
}
   c08ea:	4770      	bx	lr

000c08ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   c08ec:	e7fe      	b.n	c08ec <Dummy_Handler>
	...

000c08f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   c08f0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   c08f2:	4b1c      	ldr	r3, [pc, #112]	; (c0964 <Reset_Handler+0x74>)
   c08f4:	4a1c      	ldr	r2, [pc, #112]	; (c0968 <Reset_Handler+0x78>)
   c08f6:	429a      	cmp	r2, r3
   c08f8:	d010      	beq.n	c091c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   c08fa:	4b1c      	ldr	r3, [pc, #112]	; (c096c <Reset_Handler+0x7c>)
   c08fc:	4a19      	ldr	r2, [pc, #100]	; (c0964 <Reset_Handler+0x74>)
   c08fe:	429a      	cmp	r2, r3
   c0900:	d20c      	bcs.n	c091c <Reset_Handler+0x2c>
   c0902:	3b01      	subs	r3, #1
   c0904:	1a9b      	subs	r3, r3, r2
   c0906:	f023 0303 	bic.w	r3, r3, #3
   c090a:	3304      	adds	r3, #4
   c090c:	4413      	add	r3, r2
   c090e:	4916      	ldr	r1, [pc, #88]	; (c0968 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   c0910:	f851 0b04 	ldr.w	r0, [r1], #4
   c0914:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   c0918:	429a      	cmp	r2, r3
   c091a:	d1f9      	bne.n	c0910 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   c091c:	4b14      	ldr	r3, [pc, #80]	; (c0970 <Reset_Handler+0x80>)
   c091e:	4a15      	ldr	r2, [pc, #84]	; (c0974 <Reset_Handler+0x84>)
   c0920:	429a      	cmp	r2, r3
   c0922:	d20a      	bcs.n	c093a <Reset_Handler+0x4a>
   c0924:	3b01      	subs	r3, #1
   c0926:	1a9b      	subs	r3, r3, r2
   c0928:	f023 0303 	bic.w	r3, r3, #3
   c092c:	3304      	adds	r3, #4
   c092e:	4413      	add	r3, r2
		*pDest++ = 0;
   c0930:	2100      	movs	r1, #0
   c0932:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   c0936:	4293      	cmp	r3, r2
   c0938:	d1fb      	bne.n	c0932 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   c093a:	4b0f      	ldr	r3, [pc, #60]	; (c0978 <Reset_Handler+0x88>)
   c093c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   c0940:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   c0944:	490d      	ldr	r1, [pc, #52]	; (c097c <Reset_Handler+0x8c>)
   c0946:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   c0948:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   c094c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   c0950:	d203      	bcs.n	c095a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   c0952:	688b      	ldr	r3, [r1, #8]
   c0954:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   c0958:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   c095a:	4b09      	ldr	r3, [pc, #36]	; (c0980 <Reset_Handler+0x90>)
   c095c:	4798      	blx	r3

	/* Branch to main function */
	main();
   c095e:	4b09      	ldr	r3, [pc, #36]	; (c0984 <Reset_Handler+0x94>)
   c0960:	4798      	blx	r3
   c0962:	e7fe      	b.n	c0962 <Reset_Handler+0x72>
   c0964:	20070000 	.word	0x20070000
   c0968:	000c4230 	.word	0x000c4230
   c096c:	20070b70 	.word	0x20070b70
   c0970:	20070d74 	.word	0x20070d74
   c0974:	20070b70 	.word	0x20070b70
   c0978:	000c0000 	.word	0x000c0000
   c097c:	e000ed00 	.word	0xe000ed00
   c0980:	000c1189 	.word	0x000c1189
   c0984:	000c0ee9 	.word	0x000c0ee9

000c0988 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   c0988:	4b3d      	ldr	r3, [pc, #244]	; (c0a80 <SystemCoreClockUpdate+0xf8>)
   c098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   c098c:	f003 0303 	and.w	r3, r3, #3
   c0990:	2b03      	cmp	r3, #3
   c0992:	d80e      	bhi.n	c09b2 <SystemCoreClockUpdate+0x2a>
   c0994:	e8df f003 	tbb	[pc, r3]
   c0998:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   c099c:	4b39      	ldr	r3, [pc, #228]	; (c0a84 <SystemCoreClockUpdate+0xfc>)
   c099e:	695b      	ldr	r3, [r3, #20]
   c09a0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   c09a4:	bf14      	ite	ne
   c09a6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   c09aa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   c09ae:	4b36      	ldr	r3, [pc, #216]	; (c0a88 <SystemCoreClockUpdate+0x100>)
   c09b0:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   c09b2:	4b33      	ldr	r3, [pc, #204]	; (c0a80 <SystemCoreClockUpdate+0xf8>)
   c09b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   c09b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   c09ba:	2b70      	cmp	r3, #112	; 0x70
   c09bc:	d057      	beq.n	c0a6e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   c09be:	4b30      	ldr	r3, [pc, #192]	; (c0a80 <SystemCoreClockUpdate+0xf8>)
   c09c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   c09c2:	4931      	ldr	r1, [pc, #196]	; (c0a88 <SystemCoreClockUpdate+0x100>)
   c09c4:	f3c2 1202 	ubfx	r2, r2, #4, #3
   c09c8:	680b      	ldr	r3, [r1, #0]
   c09ca:	40d3      	lsrs	r3, r2
   c09cc:	600b      	str	r3, [r1, #0]
   c09ce:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   c09d0:	4b2b      	ldr	r3, [pc, #172]	; (c0a80 <SystemCoreClockUpdate+0xf8>)
   c09d2:	6a1b      	ldr	r3, [r3, #32]
   c09d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   c09d8:	d003      	beq.n	c09e2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   c09da:	4a2c      	ldr	r2, [pc, #176]	; (c0a8c <SystemCoreClockUpdate+0x104>)
   c09dc:	4b2a      	ldr	r3, [pc, #168]	; (c0a88 <SystemCoreClockUpdate+0x100>)
   c09de:	601a      	str	r2, [r3, #0]
   c09e0:	e7e7      	b.n	c09b2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   c09e2:	4a2b      	ldr	r2, [pc, #172]	; (c0a90 <SystemCoreClockUpdate+0x108>)
   c09e4:	4b28      	ldr	r3, [pc, #160]	; (c0a88 <SystemCoreClockUpdate+0x100>)
   c09e6:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   c09e8:	4b25      	ldr	r3, [pc, #148]	; (c0a80 <SystemCoreClockUpdate+0xf8>)
   c09ea:	6a1b      	ldr	r3, [r3, #32]
   c09ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
   c09f0:	2b10      	cmp	r3, #16
   c09f2:	d005      	beq.n	c0a00 <SystemCoreClockUpdate+0x78>
   c09f4:	2b20      	cmp	r3, #32
   c09f6:	d1dc      	bne.n	c09b2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   c09f8:	4a24      	ldr	r2, [pc, #144]	; (c0a8c <SystemCoreClockUpdate+0x104>)
   c09fa:	4b23      	ldr	r3, [pc, #140]	; (c0a88 <SystemCoreClockUpdate+0x100>)
   c09fc:	601a      	str	r2, [r3, #0]
				break;
   c09fe:	e7d8      	b.n	c09b2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   c0a00:	4a24      	ldr	r2, [pc, #144]	; (c0a94 <SystemCoreClockUpdate+0x10c>)
   c0a02:	4b21      	ldr	r3, [pc, #132]	; (c0a88 <SystemCoreClockUpdate+0x100>)
   c0a04:	601a      	str	r2, [r3, #0]
				break;
   c0a06:	e7d4      	b.n	c09b2 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   c0a08:	4b1d      	ldr	r3, [pc, #116]	; (c0a80 <SystemCoreClockUpdate+0xf8>)
   c0a0a:	6a1b      	ldr	r3, [r3, #32]
   c0a0c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   c0a10:	d00c      	beq.n	c0a2c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   c0a12:	4a1e      	ldr	r2, [pc, #120]	; (c0a8c <SystemCoreClockUpdate+0x104>)
   c0a14:	4b1c      	ldr	r3, [pc, #112]	; (c0a88 <SystemCoreClockUpdate+0x100>)
   c0a16:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   c0a18:	4b19      	ldr	r3, [pc, #100]	; (c0a80 <SystemCoreClockUpdate+0xf8>)
   c0a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   c0a1c:	f003 0303 	and.w	r3, r3, #3
   c0a20:	2b02      	cmp	r3, #2
   c0a22:	d016      	beq.n	c0a52 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   c0a24:	4a1c      	ldr	r2, [pc, #112]	; (c0a98 <SystemCoreClockUpdate+0x110>)
   c0a26:	4b18      	ldr	r3, [pc, #96]	; (c0a88 <SystemCoreClockUpdate+0x100>)
   c0a28:	601a      	str	r2, [r3, #0]
   c0a2a:	e7c2      	b.n	c09b2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   c0a2c:	4a18      	ldr	r2, [pc, #96]	; (c0a90 <SystemCoreClockUpdate+0x108>)
   c0a2e:	4b16      	ldr	r3, [pc, #88]	; (c0a88 <SystemCoreClockUpdate+0x100>)
   c0a30:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   c0a32:	4b13      	ldr	r3, [pc, #76]	; (c0a80 <SystemCoreClockUpdate+0xf8>)
   c0a34:	6a1b      	ldr	r3, [r3, #32]
   c0a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
   c0a3a:	2b10      	cmp	r3, #16
   c0a3c:	d005      	beq.n	c0a4a <SystemCoreClockUpdate+0xc2>
   c0a3e:	2b20      	cmp	r3, #32
   c0a40:	d1ea      	bne.n	c0a18 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   c0a42:	4a12      	ldr	r2, [pc, #72]	; (c0a8c <SystemCoreClockUpdate+0x104>)
   c0a44:	4b10      	ldr	r3, [pc, #64]	; (c0a88 <SystemCoreClockUpdate+0x100>)
   c0a46:	601a      	str	r2, [r3, #0]
				break;
   c0a48:	e7e6      	b.n	c0a18 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   c0a4a:	4a12      	ldr	r2, [pc, #72]	; (c0a94 <SystemCoreClockUpdate+0x10c>)
   c0a4c:	4b0e      	ldr	r3, [pc, #56]	; (c0a88 <SystemCoreClockUpdate+0x100>)
   c0a4e:	601a      	str	r2, [r3, #0]
				break;
   c0a50:	e7e2      	b.n	c0a18 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   c0a52:	4a0b      	ldr	r2, [pc, #44]	; (c0a80 <SystemCoreClockUpdate+0xf8>)
   c0a54:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   c0a56:	6a92      	ldr	r2, [r2, #40]	; 0x28
   c0a58:	480b      	ldr	r0, [pc, #44]	; (c0a88 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   c0a5a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   c0a5e:	6803      	ldr	r3, [r0, #0]
   c0a60:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   c0a64:	b2d2      	uxtb	r2, r2
   c0a66:	fbb3 f3f2 	udiv	r3, r3, r2
   c0a6a:	6003      	str	r3, [r0, #0]
   c0a6c:	e7a1      	b.n	c09b2 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   c0a6e:	4a06      	ldr	r2, [pc, #24]	; (c0a88 <SystemCoreClockUpdate+0x100>)
   c0a70:	6813      	ldr	r3, [r2, #0]
   c0a72:	490a      	ldr	r1, [pc, #40]	; (c0a9c <SystemCoreClockUpdate+0x114>)
   c0a74:	fba1 1303 	umull	r1, r3, r1, r3
   c0a78:	085b      	lsrs	r3, r3, #1
   c0a7a:	6013      	str	r3, [r2, #0]
   c0a7c:	4770      	bx	lr
   c0a7e:	bf00      	nop
   c0a80:	400e0600 	.word	0x400e0600
   c0a84:	400e1a10 	.word	0x400e1a10
   c0a88:	200701b8 	.word	0x200701b8
   c0a8c:	00b71b00 	.word	0x00b71b00
   c0a90:	003d0900 	.word	0x003d0900
   c0a94:	007a1200 	.word	0x007a1200
   c0a98:	0e4e1c00 	.word	0x0e4e1c00
   c0a9c:	aaaaaaab 	.word	0xaaaaaaab

000c0aa0 <efc_get_wait_state>:
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   c0aa0:	6800      	ldr	r0, [r0, #0]
}
   c0aa2:	f3c0 2003 	ubfx	r0, r0, #8, #4
   c0aa6:	4770      	bx	lr

000c0aa8 <efc_get_result>:
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
	return p_efc->EEFC_FRR;
   c0aa8:	68c0      	ldr	r0, [r0, #12]
}
   c0aaa:	4770      	bx	lr

000c0aac <efc_set_wait_state>:
{
   c0aac:	b508      	push	{r3, lr}
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   c0aae:	6803      	ldr	r3, [r0, #0]
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   c0ab0:	0209      	lsls	r1, r1, #8
   c0ab2:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   c0ab6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   c0aba:	4319      	orrs	r1, r3
   c0abc:	4b01      	ldr	r3, [pc, #4]	; (c0ac4 <efc_set_wait_state+0x18>)
   c0abe:	4798      	blx	r3
   c0ac0:	bd08      	pop	{r3, pc}
   c0ac2:	bf00      	nop
   c0ac4:	20070195 	.word	0x20070195

000c0ac8 <efc_perform_command>:
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   c0ac8:	f1a1 030e 	sub.w	r3, r1, #14
   c0acc:	2b01      	cmp	r3, #1
   c0ace:	d802      	bhi.n	c0ad6 <efc_perform_command+0xe>
		return EFC_RC_NOT_SUPPORT;
   c0ad0:	f04f 30ff 	mov.w	r0, #4294967295
   c0ad4:	4770      	bx	lr
{
   c0ad6:	b510      	push	{r4, lr}
   c0ad8:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   c0ada:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   c0ade:	fab3 f383 	clz	r3, r3
   c0ae2:	095b      	lsrs	r3, r3, #5
   c0ae4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   c0ae6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   c0ae8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   c0aec:	2400      	movs	r4, #0
   c0aee:	4b0b      	ldr	r3, [pc, #44]	; (c0b1c <efc_perform_command+0x54>)
   c0af0:	701c      	strb	r4, [r3, #0]
	return flags;
   c0af2:	9c01      	ldr	r4, [sp, #4]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   c0af4:	0212      	lsls	r2, r2, #8
   c0af6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   c0afa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   c0afe:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   c0b02:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   c0b04:	4311      	orrs	r1, r2
   c0b06:	4b06      	ldr	r3, [pc, #24]	; (c0b20 <efc_perform_command+0x58>)
   c0b08:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   c0b0a:	b12c      	cbz	r4, c0b18 <efc_perform_command+0x50>
		cpu_irq_enable();
   c0b0c:	2201      	movs	r2, #1
   c0b0e:	4b03      	ldr	r3, [pc, #12]	; (c0b1c <efc_perform_command+0x54>)
   c0b10:	701a      	strb	r2, [r3, #0]
   c0b12:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   c0b16:	b662      	cpsie	i
}
   c0b18:	b002      	add	sp, #8
   c0b1a:	bd10      	pop	{r4, pc}
   c0b1c:	200701b4 	.word	0x200701b4
   c0b20:	20070199 	.word	0x20070199

000c0b24 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   c0b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0b28:	b087      	sub	sp, #28
   c0b2a:	9102      	str	r1, [sp, #8]
   c0b2c:	4692      	mov	sl, r2
   c0b2e:	9304      	str	r3, [sp, #16]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
   c0b30:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
   c0b34:	f3c3 2b0f 	ubfx	fp, r3, #8, #16
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
   c0b38:	b2c7      	uxtb	r7, r0

	translate_address(&p_efc, ul_address, &us_page, &us_offset);

//#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   c0b3a:	4c2e      	ldr	r4, [pc, #184]	; (c0bf4 <flash_write+0xd0>)
   c0b3c:	4620      	mov	r0, r4
   c0b3e:	4b2e      	ldr	r3, [pc, #184]	; (c0bf8 <flash_write+0xd4>)
   c0b40:	4798      	blx	r3
   c0b42:	9005      	str	r0, [sp, #20]
	efc_set_wait_state(p_efc, 6);
   c0b44:	2106      	movs	r1, #6
   c0b46:	4620      	mov	r0, r4
   c0b48:	4b2c      	ldr	r3, [pc, #176]	; (c0bfc <flash_write+0xd8>)
   c0b4a:	4798      	blx	r3
//#else
//	UNUSED(ul_fws_temp);
//#endif

	/* Write all pages */
	while (ul_size > 0) {
   c0b4c:	f1ba 0f00 	cmp.w	sl, #0
   c0b50:	d048      	beq.n	c0be4 <flash_write+0xc0>
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   c0b52:	f8df 90b4 	ldr.w	r9, [pc, #180]	; c0c08 <flash_write+0xe4>
   c0b56:	f109 05fc 	add.w	r5, r9, #252	; 0xfc
   c0b5a:	e011      	b.n	c0b80 <flash_write+0x5c>

		if (ul_erase_flag) {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   c0b5c:	9a03      	ldr	r2, [sp, #12]
   c0b5e:	2101      	movs	r1, #1
   c0b60:	4824      	ldr	r0, [pc, #144]	; (c0bf4 <flash_write+0xd0>)
   c0b62:	4b27      	ldr	r3, [pc, #156]	; (c0c00 <flash_write+0xdc>)
   c0b64:	4798      	blx	r3
					us_page);
		}

		if (ul_error) {
   c0b66:	2800      	cmp	r0, #0
   c0b68:	d141      	bne.n	c0bee <flash_write+0xca>
			return ul_error;
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   c0b6a:	9b02      	ldr	r3, [sp, #8]
   c0b6c:	4433      	add	r3, r6
   c0b6e:	9302      	str	r3, [sp, #8]
		ul_size -= writeSize;
		us_page++;
   c0b70:	f10b 0b01 	add.w	fp, fp, #1
   c0b74:	fa1f fb8b 	uxth.w	fp, fp
		us_offset = 0;
   c0b78:	2700      	movs	r7, #0
	while (ul_size > 0) {
   c0b7a:	ebba 0a06 	subs.w	sl, sl, r6
   c0b7e:	d031      	beq.n	c0be4 <flash_write+0xc0>
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   c0b80:	f5c7 7880 	rsb	r8, r7, #256	; 0x100
   c0b84:	4646      	mov	r6, r8
   c0b86:	45d0      	cmp	r8, sl
   c0b88:	bf28      	it	cs
   c0b8a:	4656      	movcs	r6, sl
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   c0b8c:	f8cd b00c 	str.w	fp, [sp, #12]
   c0b90:	f50b 6400 	add.w	r4, fp, #2048	; 0x800
   c0b94:	0223      	lsls	r3, r4, #8
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   c0b96:	463a      	mov	r2, r7
   c0b98:	9301      	str	r3, [sp, #4]
   c0b9a:	4619      	mov	r1, r3
   c0b9c:	4648      	mov	r0, r9
   c0b9e:	4c19      	ldr	r4, [pc, #100]	; (c0c04 <flash_write+0xe0>)
   c0ba0:	47a0      	blx	r4
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   c0ba2:	4632      	mov	r2, r6
   c0ba4:	9902      	ldr	r1, [sp, #8]
   c0ba6:	eb09 0007 	add.w	r0, r9, r7
   c0baa:	47a0      	blx	r4
		memcpy(puc_page_buffer + us_offset + writeSize,
   c0bac:	19b8      	adds	r0, r7, r6
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   c0bae:	eba8 0206 	sub.w	r2, r8, r6
				(void *)(ul_page_addr + us_offset + writeSize),
   c0bb2:	9b01      	ldr	r3, [sp, #4]
   c0bb4:	18f1      	adds	r1, r6, r3
		memcpy(puc_page_buffer + us_offset + writeSize,
   c0bb6:	b292      	uxth	r2, r2
   c0bb8:	4439      	add	r1, r7
   c0bba:	4448      	add	r0, r9
   c0bbc:	47a0      	blx	r4
   c0bbe:	f1a9 0304 	sub.w	r3, r9, #4
   c0bc2:	9a01      	ldr	r2, [sp, #4]
   c0bc4:	1f14      	subs	r4, r2, #4
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   c0bc6:	f853 2f04 	ldr.w	r2, [r3, #4]!
   c0bca:	f844 2f04 	str.w	r2, [r4, #4]!
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   c0bce:	42ab      	cmp	r3, r5
   c0bd0:	d1f9      	bne.n	c0bc6 <flash_write+0xa2>
		if (ul_erase_flag) {
   c0bd2:	9b04      	ldr	r3, [sp, #16]
   c0bd4:	2b00      	cmp	r3, #0
   c0bd6:	d0c1      	beq.n	c0b5c <flash_write+0x38>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   c0bd8:	9a03      	ldr	r2, [sp, #12]
   c0bda:	2103      	movs	r1, #3
   c0bdc:	4805      	ldr	r0, [pc, #20]	; (c0bf4 <flash_write+0xd0>)
   c0bde:	4b08      	ldr	r3, [pc, #32]	; (c0c00 <flash_write+0xdc>)
   c0be0:	4798      	blx	r3
   c0be2:	e7c0      	b.n	c0b66 <flash_write+0x42>
	}

//#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   c0be4:	9905      	ldr	r1, [sp, #20]
   c0be6:	4803      	ldr	r0, [pc, #12]	; (c0bf4 <flash_write+0xd0>)
   c0be8:	4b04      	ldr	r3, [pc, #16]	; (c0bfc <flash_write+0xd8>)
   c0bea:	4798      	blx	r3
//#endif

	return FLASH_RC_OK;
   c0bec:	2000      	movs	r0, #0
}
   c0bee:	b007      	add	sp, #28
   c0bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c0bf4:	400e0a00 	.word	0x400e0a00
   c0bf8:	000c0aa1 	.word	0x000c0aa1
   c0bfc:	000c0aad 	.word	0x000c0aad
   c0c00:	000c0ac9 	.word	0x000c0ac9
   c0c04:	000c1201 	.word	0x000c1201
   c0c08:	20070c00 	.word	0x20070c00

000c0c0c <flash_is_gpnvm_set>:
 */
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
	uint32_t ul_gpnvm_bits;

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   c0c0c:	2802      	cmp	r0, #2
   c0c0e:	d901      	bls.n	c0c14 <flash_is_gpnvm_set+0x8>
		return FLASH_RC_INVALID;
   c0c10:	2011      	movs	r0, #17
   c0c12:	4770      	bx	lr
{
   c0c14:	b510      	push	{r4, lr}
   c0c16:	4604      	mov	r4, r0
	}

	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
   c0c18:	2200      	movs	r2, #0
   c0c1a:	210d      	movs	r1, #13
   c0c1c:	4808      	ldr	r0, [pc, #32]	; (c0c40 <flash_is_gpnvm_set+0x34>)
   c0c1e:	4b09      	ldr	r3, [pc, #36]	; (c0c44 <flash_is_gpnvm_set+0x38>)
   c0c20:	4798      	blx	r3
   c0c22:	b108      	cbz	r0, c0c28 <flash_is_gpnvm_set+0x1c>
		return FLASH_RC_ERROR;
   c0c24:	2010      	movs	r0, #16
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
		return FLASH_RC_YES;
	}

	return FLASH_RC_NO;
}
   c0c26:	bd10      	pop	{r4, pc}
	ul_gpnvm_bits = efc_get_result(EFC);
   c0c28:	4805      	ldr	r0, [pc, #20]	; (c0c40 <flash_is_gpnvm_set+0x34>)
   c0c2a:	4b07      	ldr	r3, [pc, #28]	; (c0c48 <flash_is_gpnvm_set+0x3c>)
   c0c2c:	4798      	blx	r3
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
   c0c2e:	2301      	movs	r3, #1
   c0c30:	fa03 f404 	lsl.w	r4, r3, r4
   c0c34:	4204      	tst	r4, r0
   c0c36:	bf14      	ite	ne
   c0c38:	4618      	movne	r0, r3
   c0c3a:	2000      	moveq	r0, #0
   c0c3c:	bd10      	pop	{r4, pc}
   c0c3e:	bf00      	nop
   c0c40:	400e0a00 	.word	0x400e0a00
   c0c44:	000c0ac9 	.word	0x000c0ac9
   c0c48:	000c0aa9 	.word	0x000c0aa9

000c0c4c <flash_clear_gpnvm>:
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   c0c4c:	2802      	cmp	r0, #2
   c0c4e:	d902      	bls.n	c0c56 <flash_clear_gpnvm+0xa>
		return FLASH_RC_INVALID;
   c0c50:	2311      	movs	r3, #17
}
   c0c52:	4618      	mov	r0, r3
   c0c54:	4770      	bx	lr
{
   c0c56:	b510      	push	{r4, lr}
   c0c58:	4604      	mov	r4, r0
	if (FLASH_RC_NO == flash_is_gpnvm_set(ul_gpnvm)) {
   c0c5a:	4b07      	ldr	r3, [pc, #28]	; (c0c78 <flash_clear_gpnvm+0x2c>)
   c0c5c:	4798      	blx	r3
   c0c5e:	4603      	mov	r3, r0
   c0c60:	b908      	cbnz	r0, c0c66 <flash_clear_gpnvm+0x1a>
}
   c0c62:	4618      	mov	r0, r3
   c0c64:	bd10      	pop	{r4, pc}
	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_CGPB, ul_gpnvm)) {
   c0c66:	4622      	mov	r2, r4
   c0c68:	210c      	movs	r1, #12
   c0c6a:	4804      	ldr	r0, [pc, #16]	; (c0c7c <flash_clear_gpnvm+0x30>)
   c0c6c:	4b04      	ldr	r3, [pc, #16]	; (c0c80 <flash_clear_gpnvm+0x34>)
   c0c6e:	4798      	blx	r3
   c0c70:	1e03      	subs	r3, r0, #0
	return FLASH_RC_ERROR;
   c0c72:	bf18      	it	ne
   c0c74:	2310      	movne	r3, #16
   c0c76:	e7f4      	b.n	c0c62 <flash_clear_gpnvm+0x16>
   c0c78:	000c0c0d 	.word	0x000c0c0d
   c0c7c:	400e0a00 	.word	0x400e0a00
   c0c80:	000c0ac9 	.word	0x000c0ac9

000c0c84 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   c0c84:	4b0a      	ldr	r3, [pc, #40]	; (c0cb0 <_sbrk+0x2c>)
   c0c86:	681b      	ldr	r3, [r3, #0]
   c0c88:	b153      	cbz	r3, c0ca0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   c0c8a:	4b09      	ldr	r3, [pc, #36]	; (c0cb0 <_sbrk+0x2c>)
   c0c8c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   c0c8e:	181a      	adds	r2, r3, r0
   c0c90:	4908      	ldr	r1, [pc, #32]	; (c0cb4 <_sbrk+0x30>)
   c0c92:	4291      	cmp	r1, r2
   c0c94:	db08      	blt.n	c0ca8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   c0c96:	4610      	mov	r0, r2
   c0c98:	4a05      	ldr	r2, [pc, #20]	; (c0cb0 <_sbrk+0x2c>)
   c0c9a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   c0c9c:	4618      	mov	r0, r3
   c0c9e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   c0ca0:	4a05      	ldr	r2, [pc, #20]	; (c0cb8 <_sbrk+0x34>)
   c0ca2:	4b03      	ldr	r3, [pc, #12]	; (c0cb0 <_sbrk+0x2c>)
   c0ca4:	601a      	str	r2, [r3, #0]
   c0ca6:	e7f0      	b.n	c0c8a <_sbrk+0x6>
		return (caddr_t) -1;	
   c0ca8:	f04f 30ff 	mov.w	r0, #4294967295
}
   c0cac:	4770      	bx	lr
   c0cae:	bf00      	nop
   c0cb0:	20070d00 	.word	0x20070d00
   c0cb4:	20087ffc 	.word	0x20087ffc
   c0cb8:	20072d78 	.word	0x20072d78

000c0cbc <_close>:
}

extern int _close(int file)
{
	return -1;
}
   c0cbc:	f04f 30ff 	mov.w	r0, #4294967295
   c0cc0:	4770      	bx	lr

000c0cc2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   c0cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   c0cc6:	604b      	str	r3, [r1, #4]

	return 0;
}
   c0cc8:	2000      	movs	r0, #0
   c0cca:	4770      	bx	lr

000c0ccc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   c0ccc:	2001      	movs	r0, #1
   c0cce:	4770      	bx	lr

000c0cd0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   c0cd0:	2000      	movs	r0, #0
   c0cd2:	4770      	bx	lr

000c0cd4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   c0cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0cd6:	b083      	sub	sp, #12
   c0cd8:	4604      	mov	r4, r0
   c0cda:	460d      	mov	r5, r1
	uint32_t val = 0;
   c0cdc:	2300      	movs	r3, #0
   c0cde:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   c0ce0:	4b20      	ldr	r3, [pc, #128]	; (c0d64 <usart_serial_getchar+0x90>)
   c0ce2:	4298      	cmp	r0, r3
   c0ce4:	d00d      	beq.n	c0d02 <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   c0ce6:	4b20      	ldr	r3, [pc, #128]	; (c0d68 <usart_serial_getchar+0x94>)
   c0ce8:	4298      	cmp	r0, r3
   c0cea:	d012      	beq.n	c0d12 <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   c0cec:	4b1f      	ldr	r3, [pc, #124]	; (c0d6c <usart_serial_getchar+0x98>)
   c0cee:	4298      	cmp	r0, r3
   c0cf0:	d019      	beq.n	c0d26 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   c0cf2:	4b1f      	ldr	r3, [pc, #124]	; (c0d70 <usart_serial_getchar+0x9c>)
   c0cf4:	429c      	cmp	r4, r3
   c0cf6:	d020      	beq.n	c0d3a <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   c0cf8:	4b1e      	ldr	r3, [pc, #120]	; (c0d74 <usart_serial_getchar+0xa0>)
   c0cfa:	429c      	cmp	r4, r3
   c0cfc:	d027      	beq.n	c0d4e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   c0cfe:	b003      	add	sp, #12
   c0d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   c0d02:	461f      	mov	r7, r3
   c0d04:	4e1c      	ldr	r6, [pc, #112]	; (c0d78 <usart_serial_getchar+0xa4>)
   c0d06:	4629      	mov	r1, r5
   c0d08:	4638      	mov	r0, r7
   c0d0a:	47b0      	blx	r6
   c0d0c:	2800      	cmp	r0, #0
   c0d0e:	d1fa      	bne.n	c0d06 <usart_serial_getchar+0x32>
   c0d10:	e7ef      	b.n	c0cf2 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   c0d12:	461f      	mov	r7, r3
   c0d14:	4e19      	ldr	r6, [pc, #100]	; (c0d7c <usart_serial_getchar+0xa8>)
   c0d16:	a901      	add	r1, sp, #4
   c0d18:	4638      	mov	r0, r7
   c0d1a:	47b0      	blx	r6
   c0d1c:	2800      	cmp	r0, #0
   c0d1e:	d1fa      	bne.n	c0d16 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   c0d20:	9b01      	ldr	r3, [sp, #4]
   c0d22:	702b      	strb	r3, [r5, #0]
   c0d24:	e7e8      	b.n	c0cf8 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   c0d26:	461e      	mov	r6, r3
   c0d28:	4c14      	ldr	r4, [pc, #80]	; (c0d7c <usart_serial_getchar+0xa8>)
   c0d2a:	a901      	add	r1, sp, #4
   c0d2c:	4630      	mov	r0, r6
   c0d2e:	47a0      	blx	r4
   c0d30:	2800      	cmp	r0, #0
   c0d32:	d1fa      	bne.n	c0d2a <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   c0d34:	9b01      	ldr	r3, [sp, #4]
   c0d36:	702b      	strb	r3, [r5, #0]
   c0d38:	e7e1      	b.n	c0cfe <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   c0d3a:	461e      	mov	r6, r3
   c0d3c:	4c0f      	ldr	r4, [pc, #60]	; (c0d7c <usart_serial_getchar+0xa8>)
   c0d3e:	a901      	add	r1, sp, #4
   c0d40:	4630      	mov	r0, r6
   c0d42:	47a0      	blx	r4
   c0d44:	2800      	cmp	r0, #0
   c0d46:	d1fa      	bne.n	c0d3e <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   c0d48:	9b01      	ldr	r3, [sp, #4]
   c0d4a:	702b      	strb	r3, [r5, #0]
   c0d4c:	e7d7      	b.n	c0cfe <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   c0d4e:	461e      	mov	r6, r3
   c0d50:	4c0a      	ldr	r4, [pc, #40]	; (c0d7c <usart_serial_getchar+0xa8>)
   c0d52:	a901      	add	r1, sp, #4
   c0d54:	4630      	mov	r0, r6
   c0d56:	47a0      	blx	r4
   c0d58:	2800      	cmp	r0, #0
   c0d5a:	d1fa      	bne.n	c0d52 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   c0d5c:	9b01      	ldr	r3, [sp, #4]
   c0d5e:	702b      	strb	r3, [r5, #0]
}
   c0d60:	e7cd      	b.n	c0cfe <usart_serial_getchar+0x2a>
   c0d62:	bf00      	nop
   c0d64:	400e0800 	.word	0x400e0800
   c0d68:	40098000 	.word	0x40098000
   c0d6c:	4009c000 	.word	0x4009c000
   c0d70:	400a0000 	.word	0x400a0000
   c0d74:	400a4000 	.word	0x400a4000
   c0d78:	000c08af 	.word	0x000c08af
   c0d7c:	000c08d5 	.word	0x000c08d5

000c0d80 <usart_serial_putchar>:
{
   c0d80:	b570      	push	{r4, r5, r6, lr}
   c0d82:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   c0d84:	4b1e      	ldr	r3, [pc, #120]	; (c0e00 <usart_serial_putchar+0x80>)
   c0d86:	4298      	cmp	r0, r3
   c0d88:	d00d      	beq.n	c0da6 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   c0d8a:	4b1e      	ldr	r3, [pc, #120]	; (c0e04 <usart_serial_putchar+0x84>)
   c0d8c:	4298      	cmp	r0, r3
   c0d8e:	d013      	beq.n	c0db8 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   c0d90:	4b1d      	ldr	r3, [pc, #116]	; (c0e08 <usart_serial_putchar+0x88>)
   c0d92:	4298      	cmp	r0, r3
   c0d94:	d019      	beq.n	c0dca <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   c0d96:	4b1d      	ldr	r3, [pc, #116]	; (c0e0c <usart_serial_putchar+0x8c>)
   c0d98:	4298      	cmp	r0, r3
   c0d9a:	d01f      	beq.n	c0ddc <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   c0d9c:	4b1c      	ldr	r3, [pc, #112]	; (c0e10 <usart_serial_putchar+0x90>)
   c0d9e:	4298      	cmp	r0, r3
   c0da0:	d025      	beq.n	c0dee <usart_serial_putchar+0x6e>
	return 0;
   c0da2:	2000      	movs	r0, #0
}
   c0da4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   c0da6:	461e      	mov	r6, r3
   c0da8:	4d1a      	ldr	r5, [pc, #104]	; (c0e14 <usart_serial_putchar+0x94>)
   c0daa:	4621      	mov	r1, r4
   c0dac:	4630      	mov	r0, r6
   c0dae:	47a8      	blx	r5
   c0db0:	2800      	cmp	r0, #0
   c0db2:	d1fa      	bne.n	c0daa <usart_serial_putchar+0x2a>
		return 1;
   c0db4:	2001      	movs	r0, #1
   c0db6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   c0db8:	461e      	mov	r6, r3
   c0dba:	4d17      	ldr	r5, [pc, #92]	; (c0e18 <usart_serial_putchar+0x98>)
   c0dbc:	4621      	mov	r1, r4
   c0dbe:	4630      	mov	r0, r6
   c0dc0:	47a8      	blx	r5
   c0dc2:	2800      	cmp	r0, #0
   c0dc4:	d1fa      	bne.n	c0dbc <usart_serial_putchar+0x3c>
		return 1;
   c0dc6:	2001      	movs	r0, #1
   c0dc8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   c0dca:	461e      	mov	r6, r3
   c0dcc:	4d12      	ldr	r5, [pc, #72]	; (c0e18 <usart_serial_putchar+0x98>)
   c0dce:	4621      	mov	r1, r4
   c0dd0:	4630      	mov	r0, r6
   c0dd2:	47a8      	blx	r5
   c0dd4:	2800      	cmp	r0, #0
   c0dd6:	d1fa      	bne.n	c0dce <usart_serial_putchar+0x4e>
		return 1;
   c0dd8:	2001      	movs	r0, #1
   c0dda:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   c0ddc:	461e      	mov	r6, r3
   c0dde:	4d0e      	ldr	r5, [pc, #56]	; (c0e18 <usart_serial_putchar+0x98>)
   c0de0:	4621      	mov	r1, r4
   c0de2:	4630      	mov	r0, r6
   c0de4:	47a8      	blx	r5
   c0de6:	2800      	cmp	r0, #0
   c0de8:	d1fa      	bne.n	c0de0 <usart_serial_putchar+0x60>
		return 1;
   c0dea:	2001      	movs	r0, #1
   c0dec:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   c0dee:	461e      	mov	r6, r3
   c0df0:	4d09      	ldr	r5, [pc, #36]	; (c0e18 <usart_serial_putchar+0x98>)
   c0df2:	4621      	mov	r1, r4
   c0df4:	4630      	mov	r0, r6
   c0df6:	47a8      	blx	r5
   c0df8:	2800      	cmp	r0, #0
   c0dfa:	d1fa      	bne.n	c0df2 <usart_serial_putchar+0x72>
		return 1;
   c0dfc:	2001      	movs	r0, #1
   c0dfe:	bd70      	pop	{r4, r5, r6, pc}
   c0e00:	400e0800 	.word	0x400e0800
   c0e04:	40098000 	.word	0x40098000
   c0e08:	4009c000 	.word	0x4009c000
   c0e0c:	400a0000 	.word	0x400a0000
   c0e10:	400a4000 	.word	0x400a4000
   c0e14:	000c089f 	.word	0x000c089f
   c0e18:	000c08c1 	.word	0x000c08c1

000c0e1c <Button2_Handler>:
 *  Handle process led2 status change.
 */
// [main_button2_handler] 
static void Button2_Handler(uint32_t id, uint32_t mask)
{
	if (PIN_PUSHBUTTON_2_ID == id && PIN_PUSHBUTTON_2_MASK == mask) {
   c0e1c:	280d      	cmp	r0, #13
   c0e1e:	d000      	beq.n	c0e22 <Button2_Handler+0x6>
   c0e20:	4770      	bx	lr
   c0e22:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   c0e26:	d1fb      	bne.n	c0e20 <Button2_Handler+0x4>
{
   c0e28:	b508      	push	{r3, lr}
		g_b_led1_active = !g_b_led1_active;
   c0e2a:	4b0c      	ldr	r3, [pc, #48]	; (c0e5c <Button2_Handler+0x40>)
   c0e2c:	781a      	ldrb	r2, [r3, #0]
   c0e2e:	f082 0201 	eor.w	r2, r2, #1
   c0e32:	701a      	strb	r2, [r3, #0]
		if (g_b_led1_active) {
   c0e34:	781b      	ldrb	r3, [r3, #0]
   c0e36:	b943      	cbnz	r3, c0e4a <Button2_Handler+0x2e>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   c0e38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c0e3c:	4b08      	ldr	r3, [pc, #32]	; (c0e60 <Button2_Handler+0x44>)
   c0e3e:	631a      	str	r2, [r3, #48]	; 0x30
			tc_stop(TC0, 0);
   c0e40:	2100      	movs	r1, #0
   c0e42:	4808      	ldr	r0, [pc, #32]	; (c0e64 <Button2_Handler+0x48>)
   c0e44:	4b08      	ldr	r3, [pc, #32]	; (c0e68 <Button2_Handler+0x4c>)
   c0e46:	4798      	blx	r3
   c0e48:	bd08      	pop	{r3, pc}
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   c0e4a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c0e4e:	4b04      	ldr	r3, [pc, #16]	; (c0e60 <Button2_Handler+0x44>)
   c0e50:	635a      	str	r2, [r3, #52]	; 0x34
			tc_start(TC0, 0);
   c0e52:	2100      	movs	r1, #0
   c0e54:	4803      	ldr	r0, [pc, #12]	; (c0e64 <Button2_Handler+0x48>)
   c0e56:	4b05      	ldr	r3, [pc, #20]	; (c0e6c <Button2_Handler+0x50>)
   c0e58:	4798      	blx	r3
   c0e5a:	bd08      	pop	{r3, pc}
   c0e5c:	200701bd 	.word	0x200701bd
   c0e60:	400e1200 	.word	0x400e1200
   c0e64:	40080000 	.word	0x40080000
   c0e68:	000c07d9 	.word	0x000c07d9
   c0e6c:	000c07d1 	.word	0x000c07d1

000c0e70 <Button1_Handler>:
	if (PIN_PUSHBUTTON_1_ID == id && PIN_PUSHBUTTON_1_MASK == mask) {
   c0e70:	280e      	cmp	r0, #14
   c0e72:	d000      	beq.n	c0e76 <Button1_Handler+0x6>
   c0e74:	4770      	bx	lr
   c0e76:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   c0e7a:	d1fb      	bne.n	c0e74 <Button1_Handler+0x4>
		g_b_led0_active = !g_b_led0_active;
   c0e7c:	4b06      	ldr	r3, [pc, #24]	; (c0e98 <Button1_Handler+0x28>)
   c0e7e:	781a      	ldrb	r2, [r3, #0]
   c0e80:	f082 0201 	eor.w	r2, r2, #1
   c0e84:	701a      	strb	r2, [r3, #0]
		if (!g_b_led0_active) {
   c0e86:	781b      	ldrb	r3, [r3, #0]
   c0e88:	2b00      	cmp	r3, #0
   c0e8a:	d1f3      	bne.n	c0e74 <Button1_Handler+0x4>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   c0e8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   c0e90:	4b02      	ldr	r3, [pc, #8]	; (c0e9c <Button1_Handler+0x2c>)
   c0e92:	631a      	str	r2, [r3, #48]	; 0x30
}
   c0e94:	e7ee      	b.n	c0e74 <Button1_Handler+0x4>
   c0e96:	bf00      	nop
   c0e98:	200701bc 	.word	0x200701bc
   c0e9c:	400e1000 	.word	0x400e1000

000c0ea0 <SysTick_Handler>:
	g_ul_ms_ticks++;
   c0ea0:	4a02      	ldr	r2, [pc, #8]	; (c0eac <SysTick_Handler+0xc>)
   c0ea2:	6813      	ldr	r3, [r2, #0]
   c0ea4:	3301      	adds	r3, #1
   c0ea6:	6013      	str	r3, [r2, #0]
   c0ea8:	4770      	bx	lr
   c0eaa:	bf00      	nop
   c0eac:	20070d08 	.word	0x20070d08

000c0eb0 <TC0_Handler>:
 *  Interrupt handler for TC0 interrupt. Toggles the state of LED\#2.
 */
// [main_tc0_handler]
#ifndef BOARD_NO_LED_1
void TC0_Handler(void)
{
   c0eb0:	b500      	push	{lr}
   c0eb2:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);
   c0eb4:	2100      	movs	r1, #0
   c0eb6:	4809      	ldr	r0, [pc, #36]	; (c0edc <TC0_Handler+0x2c>)
   c0eb8:	4b09      	ldr	r3, [pc, #36]	; (c0ee0 <TC0_Handler+0x30>)
   c0eba:	4798      	blx	r3
   c0ebc:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
   c0ebe:	9b01      	ldr	r3, [sp, #4]
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   c0ec0:	4b08      	ldr	r3, [pc, #32]	; (c0ee4 <TC0_Handler+0x34>)
   c0ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   c0ec4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
		port->PIO_CODR = mask;
   c0ec8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c0ecc:	4b05      	ldr	r3, [pc, #20]	; (c0ee4 <TC0_Handler+0x34>)
   c0ece:	bf14      	ite	ne
   c0ed0:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   c0ed2:	631a      	streq	r2, [r3, #48]	; 0x30
	/** Toggle LED state. */
	ioport_toggle_pin_level(LED1_GPIO);
#endif

//	printf("2 ");
}
   c0ed4:	b003      	add	sp, #12
   c0ed6:	f85d fb04 	ldr.w	pc, [sp], #4
   c0eda:	bf00      	nop
   c0edc:	40080000 	.word	0x40080000
   c0ee0:	000c07f1 	.word	0x000c07f1
   c0ee4:	400e1200 	.word	0x400e1200

000c0ee8 <main>:
 *
 *  \return Unused (ANSI-C compatibility).
 */
// [main]
int main(void)
{
   c0ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c0eec:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
//! [main_step_sys_init]
	/* Initialize the SAM system */
	sysclk_init();
   c0ef0:	4b77      	ldr	r3, [pc, #476]	; (c10d0 <main+0x1e8>)
   c0ef2:	4798      	blx	r3
	board_init();
   c0ef4:	4b77      	ldr	r3, [pc, #476]	; (c10d4 <main+0x1ec>)
   c0ef6:	4798      	blx	r3
   c0ef8:	2008      	movs	r0, #8
   c0efa:	4e77      	ldr	r6, [pc, #476]	; (c10d8 <main+0x1f0>)
   c0efc:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   c0efe:	4d77      	ldr	r5, [pc, #476]	; (c10dc <main+0x1f4>)
   c0f00:	4b77      	ldr	r3, [pc, #476]	; (c10e0 <main+0x1f8>)
   c0f02:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   c0f04:	4a77      	ldr	r2, [pc, #476]	; (c10e4 <main+0x1fc>)
   c0f06:	4b78      	ldr	r3, [pc, #480]	; (c10e8 <main+0x200>)
   c0f08:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   c0f0a:	4a78      	ldr	r2, [pc, #480]	; (c10ec <main+0x204>)
   c0f0c:	4b78      	ldr	r3, [pc, #480]	; (c10f0 <main+0x208>)
   c0f0e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   c0f10:	4c78      	ldr	r4, [pc, #480]	; (c10f4 <main+0x20c>)
   c0f12:	9404      	str	r4, [sp, #16]
	uart_settings.ul_baudrate = opt->baudrate;
   c0f14:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   c0f18:	9305      	str	r3, [sp, #20]
	uart_settings.ul_mode = opt->paritytype;
   c0f1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   c0f1e:	9306      	str	r3, [sp, #24]
   c0f20:	2008      	movs	r0, #8
   c0f22:	47b0      	blx	r6
		uart_init((Uart*)p_usart, &uart_settings);
   c0f24:	a904      	add	r1, sp, #16
   c0f26:	4628      	mov	r0, r5
   c0f28:	4b73      	ldr	r3, [pc, #460]	; (c10f8 <main+0x210>)
   c0f2a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   c0f2c:	4f73      	ldr	r7, [pc, #460]	; (c10fc <main+0x214>)
   c0f2e:	683b      	ldr	r3, [r7, #0]
   c0f30:	2100      	movs	r1, #0
   c0f32:	6898      	ldr	r0, [r3, #8]
   c0f34:	4d72      	ldr	r5, [pc, #456]	; (c1100 <main+0x218>)
   c0f36:	47a8      	blx	r5
	setbuf(stdin, NULL);
   c0f38:	683b      	ldr	r3, [r7, #0]
   c0f3a:	2100      	movs	r1, #0
   c0f3c:	6858      	ldr	r0, [r3, #4]
   c0f3e:	47a8      	blx	r5
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
   c0f40:	4b70      	ldr	r3, [pc, #448]	; (c1104 <main+0x21c>)
   c0f42:	4a71      	ldr	r2, [pc, #452]	; (c1108 <main+0x220>)
   c0f44:	605a      	str	r2, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   c0f46:	21f0      	movs	r1, #240	; 0xf0
   c0f48:	4a70      	ldr	r2, [pc, #448]	; (c110c <main+0x224>)
   c0f4a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
   c0f4e:	2500      	movs	r5, #0
   c0f50:	609d      	str	r5, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   c0f52:	2207      	movs	r2, #7
   c0f54:	601a      	str	r2, [r3, #0]
	pmc_enable_periph_clk(ID_TC0);
   c0f56:	201b      	movs	r0, #27
   c0f58:	47b0      	blx	r6
	tc_find_mck_divisor(4, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   c0f5a:	9400      	str	r4, [sp, #0]
   c0f5c:	ab04      	add	r3, sp, #16
   c0f5e:	aa03      	add	r2, sp, #12
   c0f60:	4621      	mov	r1, r4
   c0f62:	2004      	movs	r0, #4
   c0f64:	4e6a      	ldr	r6, [pc, #424]	; (c1110 <main+0x228>)
   c0f66:	47b0      	blx	r6
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
   c0f68:	9a04      	ldr	r2, [sp, #16]
   c0f6a:	4e6a      	ldr	r6, [pc, #424]	; (c1114 <main+0x22c>)
   c0f6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   c0f70:	4629      	mov	r1, r5
   c0f72:	4630      	mov	r0, r6
   c0f74:	4b68      	ldr	r3, [pc, #416]	; (c1118 <main+0x230>)
   c0f76:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / 4);
   c0f78:	9a03      	ldr	r2, [sp, #12]
   c0f7a:	fbb4 f2f2 	udiv	r2, r4, r2
   c0f7e:	0892      	lsrs	r2, r2, #2
   c0f80:	4629      	mov	r1, r5
   c0f82:	4630      	mov	r0, r6
   c0f84:	4b65      	ldr	r3, [pc, #404]	; (c111c <main+0x234>)
   c0f86:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   c0f88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   c0f8c:	4b64      	ldr	r3, [pc, #400]	; (c1120 <main+0x238>)
   c0f8e:	601a      	str	r2, [r3, #0]
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
   c0f90:	2210      	movs	r2, #16
   c0f92:	4629      	mov	r1, r5
   c0f94:	4630      	mov	r0, r6
   c0f96:	4b63      	ldr	r3, [pc, #396]	; (c1124 <main+0x23c>)
   c0f98:	4798      	blx	r3
	if (g_b_led1_active) {
   c0f9a:	4b63      	ldr	r3, [pc, #396]	; (c1128 <main+0x240>)
   c0f9c:	781b      	ldrb	r3, [r3, #0]
   c0f9e:	b11b      	cbz	r3, c0fa8 <main+0xc0>
		tc_start(TC0, 0);
   c0fa0:	4629      	mov	r1, r5
   c0fa2:	4630      	mov	r0, r6
   c0fa4:	4b61      	ldr	r3, [pc, #388]	; (c112c <main+0x244>)
   c0fa6:	4798      	blx	r3
	pmc_enable_periph_clk(PIN_PUSHBUTTON_1_ID);
   c0fa8:	200e      	movs	r0, #14
   c0faa:	f8df a12c 	ldr.w	sl, [pc, #300]	; c10d8 <main+0x1f0>
   c0fae:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
   c0fb0:	4c5f      	ldr	r4, [pc, #380]	; (c1130 <main+0x248>)
   c0fb2:	220a      	movs	r2, #10
   c0fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
   c0fb8:	4620      	mov	r0, r4
   c0fba:	f8df 91bc 	ldr.w	r9, [pc, #444]	; c1178 <main+0x290>
   c0fbe:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
   c0fc0:	4b5c      	ldr	r3, [pc, #368]	; (c1134 <main+0x24c>)
   c0fc2:	9300      	str	r3, [sp, #0]
   c0fc4:	2379      	movs	r3, #121	; 0x79
   c0fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
   c0fca:	210e      	movs	r1, #14
   c0fcc:	4620      	mov	r0, r4
   c0fce:	f8df 81ac 	ldr.w	r8, [pc, #428]	; c117c <main+0x294>
   c0fd2:	47c0      	blx	r8
   c0fd4:	4f52      	ldr	r7, [pc, #328]	; (c1120 <main+0x238>)
   c0fd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   c0fda:	603b      	str	r3, [r7, #0]
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO,
   c0fdc:	2200      	movs	r2, #0
   c0fde:	210e      	movs	r1, #14
   c0fe0:	4620      	mov	r0, r4
   c0fe2:	4e55      	ldr	r6, [pc, #340]	; (c1138 <main+0x250>)
   c0fe4:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
   c0fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
   c0fea:	4620      	mov	r0, r4
   c0fec:	4d53      	ldr	r5, [pc, #332]	; (c113c <main+0x254>)
   c0fee:	47a8      	blx	r5
	pmc_enable_periph_clk(PIN_PUSHBUTTON_2_ID);
   c0ff0:	200d      	movs	r0, #13
   c0ff2:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK, 10);
   c0ff4:	f5a4 7400 	sub.w	r4, r4, #512	; 0x200
   c0ff8:	220a      	movs	r2, #10
   c0ffa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   c0ffe:	4620      	mov	r0, r4
   c1000:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_ID,
   c1002:	4b4f      	ldr	r3, [pc, #316]	; (c1140 <main+0x258>)
   c1004:	9300      	str	r3, [sp, #0]
   c1006:	2359      	movs	r3, #89	; 0x59
   c1008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   c100c:	210d      	movs	r1, #13
   c100e:	4620      	mov	r0, r4
   c1010:	47c0      	blx	r8
   c1012:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   c1016:	603b      	str	r3, [r7, #0]
	pio_handler_set_priority(PIN_PUSHBUTTON_2_PIO,
   c1018:	2200      	movs	r2, #0
   c101a:	210d      	movs	r1, #13
   c101c:	4620      	mov	r0, r4
   c101e:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
   c1020:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   c1024:	4620      	mov	r0, r4
   c1026:	47a8      	blx	r5
 
 return 0 if successful, otherwise returns an error code.
 */
 
 uint16_t bufferSize = 500;
 uint8_t p_buffer[500] = {0};
   c1028:	ac07      	add	r4, sp, #28
   c102a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   c102e:	2100      	movs	r1, #0
   c1030:	4620      	mov	r0, r4
   c1032:	4b44      	ldr	r3, [pc, #272]	; (c1144 <main+0x25c>)
   c1034:	4798      	blx	r3
   c1036:	4621      	mov	r1, r4
   c1038:	aa84      	add	r2, sp, #528	; 0x210
   c103a:	4623      	mov	r3, r4
	 
	 for(uint16_t i =0; i<bufferSize; i++)
	 {
		 p_buffer[i] = i ; 
   c103c:	1a58      	subs	r0, r3, r1
   c103e:	f803 0b01 	strb.w	r0, [r3], #1
	 for(uint16_t i =0; i<bufferSize; i++)
   c1042:	4293      	cmp	r3, r2
   c1044:	d1fa      	bne.n	c103c <main+0x154>
 
 
 uint32_t ul_size = sizeof(p_buffer) ; 
 uint32_t ul_erase_flag = 0;
 
returnValue = flash_write( ul_address, &p_buffer, ul_size, ul_erase_flag);
   c1046:	2300      	movs	r3, #0
   c1048:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   c104c:	a907      	add	r1, sp, #28
   c104e:	483e      	ldr	r0, [pc, #248]	; (c1148 <main+0x260>)
   c1050:	4c3e      	ldr	r4, [pc, #248]	; (c114c <main+0x264>)
   c1052:	47a0      	blx	r4
 

//! [main_step_loop]
	while (1) {

		while (!g_b_led0_active);
   c1054:	4c3e      	ldr	r4, [pc, #248]	; (c1150 <main+0x268>)
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   c1056:	4f3f      	ldr	r7, [pc, #252]	; (c1154 <main+0x26c>)

		if (g_b_led0_active) {
			ioport_toggle_pin_level(LED0_GPIO);
			counter++;
   c1058:	4e3f      	ldr	r6, [pc, #252]	; (c1158 <main+0x270>)
			 	actionVerified = flash_clear_gpnvm(2); //set bank1 (app1)     clear (app2)
				 
				 if (actionVerified == 0)
				 {
					 printf(" GPNVM write perfect++++++++++++++++++++++/n ",actionVerified );
					REQUEST_EXTERNAL_RESET;	 	 
   c105a:	f8df 8124 	ldr.w	r8, [pc, #292]	; c1180 <main+0x298>
   c105e:	f8df 9124 	ldr.w	r9, [pc, #292]	; c1184 <main+0x29c>
	ul_cur_ticks = g_ul_ms_ticks;
   c1062:	4d3e      	ldr	r5, [pc, #248]	; (c115c <main+0x274>)
   c1064:	e009      	b.n	c107a <main+0x192>
				 }
				 else
				 {
					 printf(" GPNVM write error ***********************\r\n ",actionVerified );
   c1066:	b2c1      	uxtb	r1, r0
   c1068:	483d      	ldr	r0, [pc, #244]	; (c1160 <main+0x278>)
   c106a:	4b3e      	ldr	r3, [pc, #248]	; (c1164 <main+0x27c>)
   c106c:	4798      	blx	r3
	ul_cur_ticks = g_ul_ms_ticks;
   c106e:	682a      	ldr	r2, [r5, #0]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   c1070:	682b      	ldr	r3, [r5, #0]
   c1072:	1a9b      	subs	r3, r3, r2
   c1074:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   c1078:	d3fa      	bcc.n	c1070 <main+0x188>
		while (!g_b_led0_active);
   c107a:	7823      	ldrb	r3, [r4, #0]
   c107c:	2b00      	cmp	r3, #0
   c107e:	d0fc      	beq.n	c107a <main+0x192>
		if (g_b_led0_active) {
   c1080:	7823      	ldrb	r3, [r4, #0]
   c1082:	2b00      	cmp	r3, #0
   c1084:	d0f3      	beq.n	c106e <main+0x186>
   c1086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   c1088:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
		port->PIO_CODR = mask;
   c108c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   c1090:	bf14      	ite	ne
   c1092:	637b      	strne	r3, [r7, #52]	; 0x34
		port->PIO_SODR = mask;
   c1094:	633b      	streq	r3, [r7, #48]	; 0x30
			counter++;
   c1096:	6831      	ldr	r1, [r6, #0]
   c1098:	3101      	adds	r1, #1
   c109a:	6031      	str	r1, [r6, #0]
			printf("app 2 - running \r\n ", counter );
   c109c:	4832      	ldr	r0, [pc, #200]	; (c1168 <main+0x280>)
   c109e:	4b31      	ldr	r3, [pc, #196]	; (c1164 <main+0x27c>)
   c10a0:	4798      	blx	r3
			if(counter == 10)
   c10a2:	6833      	ldr	r3, [r6, #0]
   c10a4:	2b0a      	cmp	r3, #10
   c10a6:	d1e2      	bne.n	c106e <main+0x186>
				printf(" app 2 ----------- finished \r\n" );
   c10a8:	4830      	ldr	r0, [pc, #192]	; (c116c <main+0x284>)
   c10aa:	4b2e      	ldr	r3, [pc, #184]	; (c1164 <main+0x27c>)
   c10ac:	4798      	blx	r3
			 	actionVerified = flash_clear_gpnvm(2); //set bank1 (app1)     clear (app2)
   c10ae:	2002      	movs	r0, #2
   c10b0:	4b2f      	ldr	r3, [pc, #188]	; (c1170 <main+0x288>)
   c10b2:	4798      	blx	r3
				 if (actionVerified == 0)
   c10b4:	f010 0fff 	tst.w	r0, #255	; 0xff
   c10b8:	d1d5      	bne.n	c1066 <main+0x17e>
					 printf(" GPNVM write perfect++++++++++++++++++++++/n ",actionVerified );
   c10ba:	b2c1      	uxtb	r1, r0
   c10bc:	482d      	ldr	r0, [pc, #180]	; (c1174 <main+0x28c>)
   c10be:	4b29      	ldr	r3, [pc, #164]	; (c1164 <main+0x27c>)
   c10c0:	4798      	blx	r3
					REQUEST_EXTERNAL_RESET;	 	 
   c10c2:	f8b8 3000 	ldrh.w	r3, [r8]
   c10c6:	ea43 0309 	orr.w	r3, r3, r9
   c10ca:	f8c8 3000 	str.w	r3, [r8]
   c10ce:	e7ce      	b.n	c106e <main+0x186>
   c10d0:	000c0161 	.word	0x000c0161
   c10d4:	000c0251 	.word	0x000c0251
   c10d8:	000c0799 	.word	0x000c0799
   c10dc:	400e0800 	.word	0x400e0800
   c10e0:	20070d48 	.word	0x20070d48
   c10e4:	000c0d81 	.word	0x000c0d81
   c10e8:	20070d44 	.word	0x20070d44
   c10ec:	000c0cd5 	.word	0x000c0cd5
   c10f0:	20070d40 	.word	0x20070d40
   c10f4:	0501bd00 	.word	0x0501bd00
   c10f8:	000c0869 	.word	0x000c0869
   c10fc:	200701c0 	.word	0x200701c0
   c1100:	000c1389 	.word	0x000c1389
   c1104:	e000e010 	.word	0xe000e010
   c1108:	0001481f 	.word	0x0001481f
   c110c:	e000ed00 	.word	0xe000ed00
   c1110:	000c07f9 	.word	0x000c07f9
   c1114:	40080000 	.word	0x40080000
   c1118:	000c07b9 	.word	0x000c07b9
   c111c:	000c07e1 	.word	0x000c07e1
   c1120:	e000e100 	.word	0xe000e100
   c1124:	000c07e9 	.word	0x000c07e9
   c1128:	200701bd 	.word	0x200701bd
   c112c:	000c07d1 	.word	0x000c07d1
   c1130:	400e1400 	.word	0x400e1400
   c1134:	000c0e71 	.word	0x000c0e71
   c1138:	000c062d 	.word	0x000c062d
   c113c:	000c039f 	.word	0x000c039f
   c1140:	000c0e1d 	.word	0x000c0e1d
   c1144:	000c12ed 	.word	0x000c12ed
   c1148:	000c4dd0 	.word	0x000c4dd0
   c114c:	000c0b25 	.word	0x000c0b25
   c1150:	200701bc 	.word	0x200701bc
   c1154:	400e1000 	.word	0x400e1000
   c1158:	20070d04 	.word	0x20070d04
   c115c:	20070d08 	.word	0x20070d08
   c1160:	000c406c 	.word	0x000c406c
   c1164:	000c11d9 	.word	0x000c11d9
   c1168:	000c4008 	.word	0x000c4008
   c116c:	000c401c 	.word	0x000c401c
   c1170:	000c0c4d 	.word	0x000c0c4d
   c1174:	000c403c 	.word	0x000c403c
   c1178:	000c02c1 	.word	0x000c02c1
   c117c:	000c056d 	.word	0x000c056d
   c1180:	e000ed0c 	.word	0xe000ed0c
   c1184:	05fa0004 	.word	0x05fa0004

000c1188 <__libc_init_array>:
   c1188:	b570      	push	{r4, r5, r6, lr}
   c118a:	4e0f      	ldr	r6, [pc, #60]	; (c11c8 <__libc_init_array+0x40>)
   c118c:	4d0f      	ldr	r5, [pc, #60]	; (c11cc <__libc_init_array+0x44>)
   c118e:	1b76      	subs	r6, r6, r5
   c1190:	10b6      	asrs	r6, r6, #2
   c1192:	bf18      	it	ne
   c1194:	2400      	movne	r4, #0
   c1196:	d005      	beq.n	c11a4 <__libc_init_array+0x1c>
   c1198:	3401      	adds	r4, #1
   c119a:	f855 3b04 	ldr.w	r3, [r5], #4
   c119e:	4798      	blx	r3
   c11a0:	42a6      	cmp	r6, r4
   c11a2:	d1f9      	bne.n	c1198 <__libc_init_array+0x10>
   c11a4:	4e0a      	ldr	r6, [pc, #40]	; (c11d0 <__libc_init_array+0x48>)
   c11a6:	4d0b      	ldr	r5, [pc, #44]	; (c11d4 <__libc_init_array+0x4c>)
   c11a8:	f003 f82c 	bl	c4204 <_init>
   c11ac:	1b76      	subs	r6, r6, r5
   c11ae:	10b6      	asrs	r6, r6, #2
   c11b0:	bf18      	it	ne
   c11b2:	2400      	movne	r4, #0
   c11b4:	d006      	beq.n	c11c4 <__libc_init_array+0x3c>
   c11b6:	3401      	adds	r4, #1
   c11b8:	f855 3b04 	ldr.w	r3, [r5], #4
   c11bc:	4798      	blx	r3
   c11be:	42a6      	cmp	r6, r4
   c11c0:	d1f9      	bne.n	c11b6 <__libc_init_array+0x2e>
   c11c2:	bd70      	pop	{r4, r5, r6, pc}
   c11c4:	bd70      	pop	{r4, r5, r6, pc}
   c11c6:	bf00      	nop
   c11c8:	000c4210 	.word	0x000c4210
   c11cc:	000c4210 	.word	0x000c4210
   c11d0:	000c4218 	.word	0x000c4218
   c11d4:	000c4210 	.word	0x000c4210

000c11d8 <iprintf>:
   c11d8:	b40f      	push	{r0, r1, r2, r3}
   c11da:	b510      	push	{r4, lr}
   c11dc:	4b07      	ldr	r3, [pc, #28]	; (c11fc <iprintf+0x24>)
   c11de:	b082      	sub	sp, #8
   c11e0:	ac04      	add	r4, sp, #16
   c11e2:	f854 2b04 	ldr.w	r2, [r4], #4
   c11e6:	6818      	ldr	r0, [r3, #0]
   c11e8:	4623      	mov	r3, r4
   c11ea:	6881      	ldr	r1, [r0, #8]
   c11ec:	9401      	str	r4, [sp, #4]
   c11ee:	f000 f9db 	bl	c15a8 <_vfiprintf_r>
   c11f2:	b002      	add	sp, #8
   c11f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c11f8:	b004      	add	sp, #16
   c11fa:	4770      	bx	lr
   c11fc:	200701c0 	.word	0x200701c0

000c1200 <memcpy>:
   c1200:	4684      	mov	ip, r0
   c1202:	ea41 0300 	orr.w	r3, r1, r0
   c1206:	f013 0303 	ands.w	r3, r3, #3
   c120a:	d149      	bne.n	c12a0 <memcpy+0xa0>
   c120c:	3a40      	subs	r2, #64	; 0x40
   c120e:	d323      	bcc.n	c1258 <memcpy+0x58>
   c1210:	680b      	ldr	r3, [r1, #0]
   c1212:	6003      	str	r3, [r0, #0]
   c1214:	684b      	ldr	r3, [r1, #4]
   c1216:	6043      	str	r3, [r0, #4]
   c1218:	688b      	ldr	r3, [r1, #8]
   c121a:	6083      	str	r3, [r0, #8]
   c121c:	68cb      	ldr	r3, [r1, #12]
   c121e:	60c3      	str	r3, [r0, #12]
   c1220:	690b      	ldr	r3, [r1, #16]
   c1222:	6103      	str	r3, [r0, #16]
   c1224:	694b      	ldr	r3, [r1, #20]
   c1226:	6143      	str	r3, [r0, #20]
   c1228:	698b      	ldr	r3, [r1, #24]
   c122a:	6183      	str	r3, [r0, #24]
   c122c:	69cb      	ldr	r3, [r1, #28]
   c122e:	61c3      	str	r3, [r0, #28]
   c1230:	6a0b      	ldr	r3, [r1, #32]
   c1232:	6203      	str	r3, [r0, #32]
   c1234:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   c1236:	6243      	str	r3, [r0, #36]	; 0x24
   c1238:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   c123a:	6283      	str	r3, [r0, #40]	; 0x28
   c123c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   c123e:	62c3      	str	r3, [r0, #44]	; 0x2c
   c1240:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   c1242:	6303      	str	r3, [r0, #48]	; 0x30
   c1244:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   c1246:	6343      	str	r3, [r0, #52]	; 0x34
   c1248:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   c124a:	6383      	str	r3, [r0, #56]	; 0x38
   c124c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   c124e:	63c3      	str	r3, [r0, #60]	; 0x3c
   c1250:	3040      	adds	r0, #64	; 0x40
   c1252:	3140      	adds	r1, #64	; 0x40
   c1254:	3a40      	subs	r2, #64	; 0x40
   c1256:	d2db      	bcs.n	c1210 <memcpy+0x10>
   c1258:	3230      	adds	r2, #48	; 0x30
   c125a:	d30b      	bcc.n	c1274 <memcpy+0x74>
   c125c:	680b      	ldr	r3, [r1, #0]
   c125e:	6003      	str	r3, [r0, #0]
   c1260:	684b      	ldr	r3, [r1, #4]
   c1262:	6043      	str	r3, [r0, #4]
   c1264:	688b      	ldr	r3, [r1, #8]
   c1266:	6083      	str	r3, [r0, #8]
   c1268:	68cb      	ldr	r3, [r1, #12]
   c126a:	60c3      	str	r3, [r0, #12]
   c126c:	3010      	adds	r0, #16
   c126e:	3110      	adds	r1, #16
   c1270:	3a10      	subs	r2, #16
   c1272:	d2f3      	bcs.n	c125c <memcpy+0x5c>
   c1274:	320c      	adds	r2, #12
   c1276:	d305      	bcc.n	c1284 <memcpy+0x84>
   c1278:	f851 3b04 	ldr.w	r3, [r1], #4
   c127c:	f840 3b04 	str.w	r3, [r0], #4
   c1280:	3a04      	subs	r2, #4
   c1282:	d2f9      	bcs.n	c1278 <memcpy+0x78>
   c1284:	3204      	adds	r2, #4
   c1286:	d008      	beq.n	c129a <memcpy+0x9a>
   c1288:	07d2      	lsls	r2, r2, #31
   c128a:	bf1c      	itt	ne
   c128c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   c1290:	f800 3b01 	strbne.w	r3, [r0], #1
   c1294:	d301      	bcc.n	c129a <memcpy+0x9a>
   c1296:	880b      	ldrh	r3, [r1, #0]
   c1298:	8003      	strh	r3, [r0, #0]
   c129a:	4660      	mov	r0, ip
   c129c:	4770      	bx	lr
   c129e:	bf00      	nop
   c12a0:	2a08      	cmp	r2, #8
   c12a2:	d313      	bcc.n	c12cc <memcpy+0xcc>
   c12a4:	078b      	lsls	r3, r1, #30
   c12a6:	d0b1      	beq.n	c120c <memcpy+0xc>
   c12a8:	f010 0303 	ands.w	r3, r0, #3
   c12ac:	d0ae      	beq.n	c120c <memcpy+0xc>
   c12ae:	f1c3 0304 	rsb	r3, r3, #4
   c12b2:	1ad2      	subs	r2, r2, r3
   c12b4:	07db      	lsls	r3, r3, #31
   c12b6:	bf1c      	itt	ne
   c12b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   c12bc:	f800 3b01 	strbne.w	r3, [r0], #1
   c12c0:	d3a4      	bcc.n	c120c <memcpy+0xc>
   c12c2:	f831 3b02 	ldrh.w	r3, [r1], #2
   c12c6:	f820 3b02 	strh.w	r3, [r0], #2
   c12ca:	e79f      	b.n	c120c <memcpy+0xc>
   c12cc:	3a04      	subs	r2, #4
   c12ce:	d3d9      	bcc.n	c1284 <memcpy+0x84>
   c12d0:	3a01      	subs	r2, #1
   c12d2:	f811 3b01 	ldrb.w	r3, [r1], #1
   c12d6:	f800 3b01 	strb.w	r3, [r0], #1
   c12da:	d2f9      	bcs.n	c12d0 <memcpy+0xd0>
   c12dc:	780b      	ldrb	r3, [r1, #0]
   c12de:	7003      	strb	r3, [r0, #0]
   c12e0:	784b      	ldrb	r3, [r1, #1]
   c12e2:	7043      	strb	r3, [r0, #1]
   c12e4:	788b      	ldrb	r3, [r1, #2]
   c12e6:	7083      	strb	r3, [r0, #2]
   c12e8:	4660      	mov	r0, ip
   c12ea:	4770      	bx	lr

000c12ec <memset>:
   c12ec:	b470      	push	{r4, r5, r6}
   c12ee:	0786      	lsls	r6, r0, #30
   c12f0:	d046      	beq.n	c1380 <memset+0x94>
   c12f2:	1e54      	subs	r4, r2, #1
   c12f4:	2a00      	cmp	r2, #0
   c12f6:	d041      	beq.n	c137c <memset+0x90>
   c12f8:	b2ca      	uxtb	r2, r1
   c12fa:	4603      	mov	r3, r0
   c12fc:	e002      	b.n	c1304 <memset+0x18>
   c12fe:	f114 34ff 	adds.w	r4, r4, #4294967295
   c1302:	d33b      	bcc.n	c137c <memset+0x90>
   c1304:	f803 2b01 	strb.w	r2, [r3], #1
   c1308:	079d      	lsls	r5, r3, #30
   c130a:	d1f8      	bne.n	c12fe <memset+0x12>
   c130c:	2c03      	cmp	r4, #3
   c130e:	d92e      	bls.n	c136e <memset+0x82>
   c1310:	b2cd      	uxtb	r5, r1
   c1312:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   c1316:	2c0f      	cmp	r4, #15
   c1318:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   c131c:	d919      	bls.n	c1352 <memset+0x66>
   c131e:	4626      	mov	r6, r4
   c1320:	f103 0210 	add.w	r2, r3, #16
   c1324:	3e10      	subs	r6, #16
   c1326:	2e0f      	cmp	r6, #15
   c1328:	f842 5c10 	str.w	r5, [r2, #-16]
   c132c:	f842 5c0c 	str.w	r5, [r2, #-12]
   c1330:	f842 5c08 	str.w	r5, [r2, #-8]
   c1334:	f842 5c04 	str.w	r5, [r2, #-4]
   c1338:	f102 0210 	add.w	r2, r2, #16
   c133c:	d8f2      	bhi.n	c1324 <memset+0x38>
   c133e:	f1a4 0210 	sub.w	r2, r4, #16
   c1342:	f022 020f 	bic.w	r2, r2, #15
   c1346:	f004 040f 	and.w	r4, r4, #15
   c134a:	3210      	adds	r2, #16
   c134c:	2c03      	cmp	r4, #3
   c134e:	4413      	add	r3, r2
   c1350:	d90d      	bls.n	c136e <memset+0x82>
   c1352:	461e      	mov	r6, r3
   c1354:	4622      	mov	r2, r4
   c1356:	3a04      	subs	r2, #4
   c1358:	2a03      	cmp	r2, #3
   c135a:	f846 5b04 	str.w	r5, [r6], #4
   c135e:	d8fa      	bhi.n	c1356 <memset+0x6a>
   c1360:	1f22      	subs	r2, r4, #4
   c1362:	f022 0203 	bic.w	r2, r2, #3
   c1366:	3204      	adds	r2, #4
   c1368:	4413      	add	r3, r2
   c136a:	f004 0403 	and.w	r4, r4, #3
   c136e:	b12c      	cbz	r4, c137c <memset+0x90>
   c1370:	b2c9      	uxtb	r1, r1
   c1372:	441c      	add	r4, r3
   c1374:	f803 1b01 	strb.w	r1, [r3], #1
   c1378:	429c      	cmp	r4, r3
   c137a:	d1fb      	bne.n	c1374 <memset+0x88>
   c137c:	bc70      	pop	{r4, r5, r6}
   c137e:	4770      	bx	lr
   c1380:	4614      	mov	r4, r2
   c1382:	4603      	mov	r3, r0
   c1384:	e7c2      	b.n	c130c <memset+0x20>
   c1386:	bf00      	nop

000c1388 <setbuf>:
   c1388:	2900      	cmp	r1, #0
   c138a:	bf0c      	ite	eq
   c138c:	2202      	moveq	r2, #2
   c138e:	2200      	movne	r2, #0
   c1390:	f44f 6380 	mov.w	r3, #1024	; 0x400
   c1394:	f000 b800 	b.w	c1398 <setvbuf>

000c1398 <setvbuf>:
   c1398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c139c:	4d61      	ldr	r5, [pc, #388]	; (c1524 <setvbuf+0x18c>)
   c139e:	b083      	sub	sp, #12
   c13a0:	682d      	ldr	r5, [r5, #0]
   c13a2:	4604      	mov	r4, r0
   c13a4:	460f      	mov	r7, r1
   c13a6:	4690      	mov	r8, r2
   c13a8:	461e      	mov	r6, r3
   c13aa:	b115      	cbz	r5, c13b2 <setvbuf+0x1a>
   c13ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c13ae:	2b00      	cmp	r3, #0
   c13b0:	d064      	beq.n	c147c <setvbuf+0xe4>
   c13b2:	f1b8 0f02 	cmp.w	r8, #2
   c13b6:	d006      	beq.n	c13c6 <setvbuf+0x2e>
   c13b8:	f1b8 0f01 	cmp.w	r8, #1
   c13bc:	f200 809f 	bhi.w	c14fe <setvbuf+0x166>
   c13c0:	2e00      	cmp	r6, #0
   c13c2:	f2c0 809c 	blt.w	c14fe <setvbuf+0x166>
   c13c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   c13c8:	07d8      	lsls	r0, r3, #31
   c13ca:	d534      	bpl.n	c1436 <setvbuf+0x9e>
   c13cc:	4621      	mov	r1, r4
   c13ce:	4628      	mov	r0, r5
   c13d0:	f001 f882 	bl	c24d8 <_fflush_r>
   c13d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   c13d6:	b141      	cbz	r1, c13ea <setvbuf+0x52>
   c13d8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   c13dc:	4299      	cmp	r1, r3
   c13de:	d002      	beq.n	c13e6 <setvbuf+0x4e>
   c13e0:	4628      	mov	r0, r5
   c13e2:	f001 f9f7 	bl	c27d4 <_free_r>
   c13e6:	2300      	movs	r3, #0
   c13e8:	6323      	str	r3, [r4, #48]	; 0x30
   c13ea:	2200      	movs	r2, #0
   c13ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   c13f0:	61a2      	str	r2, [r4, #24]
   c13f2:	6062      	str	r2, [r4, #4]
   c13f4:	061a      	lsls	r2, r3, #24
   c13f6:	d43a      	bmi.n	c146e <setvbuf+0xd6>
   c13f8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   c13fc:	f023 0303 	bic.w	r3, r3, #3
   c1400:	f1b8 0f02 	cmp.w	r8, #2
   c1404:	81a3      	strh	r3, [r4, #12]
   c1406:	d01d      	beq.n	c1444 <setvbuf+0xac>
   c1408:	ab01      	add	r3, sp, #4
   c140a:	466a      	mov	r2, sp
   c140c:	4621      	mov	r1, r4
   c140e:	4628      	mov	r0, r5
   c1410:	f001 fc7e 	bl	c2d10 <__swhatbuf_r>
   c1414:	89a3      	ldrh	r3, [r4, #12]
   c1416:	4318      	orrs	r0, r3
   c1418:	81a0      	strh	r0, [r4, #12]
   c141a:	2e00      	cmp	r6, #0
   c141c:	d132      	bne.n	c1484 <setvbuf+0xec>
   c141e:	9e00      	ldr	r6, [sp, #0]
   c1420:	4630      	mov	r0, r6
   c1422:	f001 fced 	bl	c2e00 <malloc>
   c1426:	4607      	mov	r7, r0
   c1428:	2800      	cmp	r0, #0
   c142a:	d06b      	beq.n	c1504 <setvbuf+0x16c>
   c142c:	89a3      	ldrh	r3, [r4, #12]
   c142e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   c1432:	81a3      	strh	r3, [r4, #12]
   c1434:	e028      	b.n	c1488 <setvbuf+0xf0>
   c1436:	89a3      	ldrh	r3, [r4, #12]
   c1438:	0599      	lsls	r1, r3, #22
   c143a:	d4c7      	bmi.n	c13cc <setvbuf+0x34>
   c143c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   c143e:	f001 fc63 	bl	c2d08 <__retarget_lock_acquire_recursive>
   c1442:	e7c3      	b.n	c13cc <setvbuf+0x34>
   c1444:	2500      	movs	r5, #0
   c1446:	2600      	movs	r6, #0
   c1448:	2001      	movs	r0, #1
   c144a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   c144c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   c1450:	f043 0302 	orr.w	r3, r3, #2
   c1454:	60a6      	str	r6, [r4, #8]
   c1456:	07ce      	lsls	r6, r1, #31
   c1458:	81a3      	strh	r3, [r4, #12]
   c145a:	6160      	str	r0, [r4, #20]
   c145c:	6022      	str	r2, [r4, #0]
   c145e:	6122      	str	r2, [r4, #16]
   c1460:	d401      	bmi.n	c1466 <setvbuf+0xce>
   c1462:	0598      	lsls	r0, r3, #22
   c1464:	d53e      	bpl.n	c14e4 <setvbuf+0x14c>
   c1466:	4628      	mov	r0, r5
   c1468:	b003      	add	sp, #12
   c146a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c146e:	6921      	ldr	r1, [r4, #16]
   c1470:	4628      	mov	r0, r5
   c1472:	f001 f9af 	bl	c27d4 <_free_r>
   c1476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   c147a:	e7bd      	b.n	c13f8 <setvbuf+0x60>
   c147c:	4628      	mov	r0, r5
   c147e:	f001 f883 	bl	c2588 <__sinit>
   c1482:	e796      	b.n	c13b2 <setvbuf+0x1a>
   c1484:	2f00      	cmp	r7, #0
   c1486:	d0cb      	beq.n	c1420 <setvbuf+0x88>
   c1488:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c148a:	2b00      	cmp	r3, #0
   c148c:	d033      	beq.n	c14f6 <setvbuf+0x15e>
   c148e:	9b00      	ldr	r3, [sp, #0]
   c1490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   c1494:	429e      	cmp	r6, r3
   c1496:	bf1c      	itt	ne
   c1498:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   c149c:	81a2      	strhne	r2, [r4, #12]
   c149e:	f1b8 0f01 	cmp.w	r8, #1
   c14a2:	bf04      	itt	eq
   c14a4:	f042 0201 	orreq.w	r2, r2, #1
   c14a8:	81a2      	strheq	r2, [r4, #12]
   c14aa:	b292      	uxth	r2, r2
   c14ac:	f012 0308 	ands.w	r3, r2, #8
   c14b0:	6027      	str	r7, [r4, #0]
   c14b2:	6127      	str	r7, [r4, #16]
   c14b4:	6166      	str	r6, [r4, #20]
   c14b6:	d00e      	beq.n	c14d6 <setvbuf+0x13e>
   c14b8:	07d1      	lsls	r1, r2, #31
   c14ba:	d51a      	bpl.n	c14f2 <setvbuf+0x15a>
   c14bc:	2300      	movs	r3, #0
   c14be:	6e65      	ldr	r5, [r4, #100]	; 0x64
   c14c0:	4276      	negs	r6, r6
   c14c2:	f015 0501 	ands.w	r5, r5, #1
   c14c6:	61a6      	str	r6, [r4, #24]
   c14c8:	60a3      	str	r3, [r4, #8]
   c14ca:	d009      	beq.n	c14e0 <setvbuf+0x148>
   c14cc:	2500      	movs	r5, #0
   c14ce:	4628      	mov	r0, r5
   c14d0:	b003      	add	sp, #12
   c14d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c14d6:	60a3      	str	r3, [r4, #8]
   c14d8:	6e65      	ldr	r5, [r4, #100]	; 0x64
   c14da:	f015 0501 	ands.w	r5, r5, #1
   c14de:	d1f5      	bne.n	c14cc <setvbuf+0x134>
   c14e0:	0593      	lsls	r3, r2, #22
   c14e2:	d4c0      	bmi.n	c1466 <setvbuf+0xce>
   c14e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   c14e6:	f001 fc11 	bl	c2d0c <__retarget_lock_release_recursive>
   c14ea:	4628      	mov	r0, r5
   c14ec:	b003      	add	sp, #12
   c14ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c14f2:	60a6      	str	r6, [r4, #8]
   c14f4:	e7f0      	b.n	c14d8 <setvbuf+0x140>
   c14f6:	4628      	mov	r0, r5
   c14f8:	f001 f846 	bl	c2588 <__sinit>
   c14fc:	e7c7      	b.n	c148e <setvbuf+0xf6>
   c14fe:	f04f 35ff 	mov.w	r5, #4294967295
   c1502:	e7b0      	b.n	c1466 <setvbuf+0xce>
   c1504:	f8dd 9000 	ldr.w	r9, [sp]
   c1508:	45b1      	cmp	r9, r6
   c150a:	d004      	beq.n	c1516 <setvbuf+0x17e>
   c150c:	4648      	mov	r0, r9
   c150e:	f001 fc77 	bl	c2e00 <malloc>
   c1512:	4607      	mov	r7, r0
   c1514:	b920      	cbnz	r0, c1520 <setvbuf+0x188>
   c1516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   c151a:	f04f 35ff 	mov.w	r5, #4294967295
   c151e:	e792      	b.n	c1446 <setvbuf+0xae>
   c1520:	464e      	mov	r6, r9
   c1522:	e783      	b.n	c142c <setvbuf+0x94>
   c1524:	200701c0 	.word	0x200701c0

000c1528 <__sprint_r.part.0>:
   c1528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c152c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   c152e:	4693      	mov	fp, r2
   c1530:	049c      	lsls	r4, r3, #18
   c1532:	d52f      	bpl.n	c1594 <__sprint_r.part.0+0x6c>
   c1534:	6893      	ldr	r3, [r2, #8]
   c1536:	6812      	ldr	r2, [r2, #0]
   c1538:	b353      	cbz	r3, c1590 <__sprint_r.part.0+0x68>
   c153a:	460e      	mov	r6, r1
   c153c:	4607      	mov	r7, r0
   c153e:	f102 0908 	add.w	r9, r2, #8
   c1542:	e919 0420 	ldmdb	r9, {r5, sl}
   c1546:	ea5f 089a 	movs.w	r8, sl, lsr #2
   c154a:	d017      	beq.n	c157c <__sprint_r.part.0+0x54>
   c154c:	2400      	movs	r4, #0
   c154e:	3d04      	subs	r5, #4
   c1550:	e001      	b.n	c1556 <__sprint_r.part.0+0x2e>
   c1552:	45a0      	cmp	r8, r4
   c1554:	d010      	beq.n	c1578 <__sprint_r.part.0+0x50>
   c1556:	4632      	mov	r2, r6
   c1558:	f855 1f04 	ldr.w	r1, [r5, #4]!
   c155c:	4638      	mov	r0, r7
   c155e:	f001 f8b5 	bl	c26cc <_fputwc_r>
   c1562:	1c43      	adds	r3, r0, #1
   c1564:	f104 0401 	add.w	r4, r4, #1
   c1568:	d1f3      	bne.n	c1552 <__sprint_r.part.0+0x2a>
   c156a:	2300      	movs	r3, #0
   c156c:	f8cb 3008 	str.w	r3, [fp, #8]
   c1570:	f8cb 3004 	str.w	r3, [fp, #4]
   c1574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c1578:	f8db 3008 	ldr.w	r3, [fp, #8]
   c157c:	f02a 0a03 	bic.w	sl, sl, #3
   c1580:	eba3 030a 	sub.w	r3, r3, sl
   c1584:	f8cb 3008 	str.w	r3, [fp, #8]
   c1588:	f109 0908 	add.w	r9, r9, #8
   c158c:	2b00      	cmp	r3, #0
   c158e:	d1d8      	bne.n	c1542 <__sprint_r.part.0+0x1a>
   c1590:	2000      	movs	r0, #0
   c1592:	e7ea      	b.n	c156a <__sprint_r.part.0+0x42>
   c1594:	f001 fa04 	bl	c29a0 <__sfvwrite_r>
   c1598:	2300      	movs	r3, #0
   c159a:	f8cb 3008 	str.w	r3, [fp, #8]
   c159e:	f8cb 3004 	str.w	r3, [fp, #4]
   c15a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c15a6:	bf00      	nop

000c15a8 <_vfiprintf_r>:
   c15a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c15ac:	b0ad      	sub	sp, #180	; 0xb4
   c15ae:	461d      	mov	r5, r3
   c15b0:	468b      	mov	fp, r1
   c15b2:	4690      	mov	r8, r2
   c15b4:	9307      	str	r3, [sp, #28]
   c15b6:	9006      	str	r0, [sp, #24]
   c15b8:	b118      	cbz	r0, c15c2 <_vfiprintf_r+0x1a>
   c15ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   c15bc:	2b00      	cmp	r3, #0
   c15be:	f000 80f3 	beq.w	c17a8 <_vfiprintf_r+0x200>
   c15c2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   c15c6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   c15ca:	07df      	lsls	r7, r3, #31
   c15cc:	b281      	uxth	r1, r0
   c15ce:	d402      	bmi.n	c15d6 <_vfiprintf_r+0x2e>
   c15d0:	058e      	lsls	r6, r1, #22
   c15d2:	f140 80fc 	bpl.w	c17ce <_vfiprintf_r+0x226>
   c15d6:	048c      	lsls	r4, r1, #18
   c15d8:	d40a      	bmi.n	c15f0 <_vfiprintf_r+0x48>
   c15da:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   c15de:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   c15e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   c15e6:	f8ab 100c 	strh.w	r1, [fp, #12]
   c15ea:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   c15ee:	b289      	uxth	r1, r1
   c15f0:	0708      	lsls	r0, r1, #28
   c15f2:	f140 80b3 	bpl.w	c175c <_vfiprintf_r+0x1b4>
   c15f6:	f8db 3010 	ldr.w	r3, [fp, #16]
   c15fa:	2b00      	cmp	r3, #0
   c15fc:	f000 80ae 	beq.w	c175c <_vfiprintf_r+0x1b4>
   c1600:	f001 031a 	and.w	r3, r1, #26
   c1604:	2b0a      	cmp	r3, #10
   c1606:	f000 80b5 	beq.w	c1774 <_vfiprintf_r+0x1cc>
   c160a:	2300      	movs	r3, #0
   c160c:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   c1610:	46d1      	mov	r9, sl
   c1612:	930b      	str	r3, [sp, #44]	; 0x2c
   c1614:	9303      	str	r3, [sp, #12]
   c1616:	9311      	str	r3, [sp, #68]	; 0x44
   c1618:	9310      	str	r3, [sp, #64]	; 0x40
   c161a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c161e:	f8cd b010 	str.w	fp, [sp, #16]
   c1622:	f898 3000 	ldrb.w	r3, [r8]
   c1626:	4644      	mov	r4, r8
   c1628:	b1fb      	cbz	r3, c166a <_vfiprintf_r+0xc2>
   c162a:	2b25      	cmp	r3, #37	; 0x25
   c162c:	d102      	bne.n	c1634 <_vfiprintf_r+0x8c>
   c162e:	e01c      	b.n	c166a <_vfiprintf_r+0xc2>
   c1630:	2b25      	cmp	r3, #37	; 0x25
   c1632:	d003      	beq.n	c163c <_vfiprintf_r+0x94>
   c1634:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c1638:	2b00      	cmp	r3, #0
   c163a:	d1f9      	bne.n	c1630 <_vfiprintf_r+0x88>
   c163c:	eba4 0508 	sub.w	r5, r4, r8
   c1640:	b19d      	cbz	r5, c166a <_vfiprintf_r+0xc2>
   c1642:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c1644:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c1646:	3301      	adds	r3, #1
   c1648:	442a      	add	r2, r5
   c164a:	2b07      	cmp	r3, #7
   c164c:	f8c9 8000 	str.w	r8, [r9]
   c1650:	f8c9 5004 	str.w	r5, [r9, #4]
   c1654:	9211      	str	r2, [sp, #68]	; 0x44
   c1656:	9310      	str	r3, [sp, #64]	; 0x40
   c1658:	dd7a      	ble.n	c1750 <_vfiprintf_r+0x1a8>
   c165a:	2a00      	cmp	r2, #0
   c165c:	f040 84b5 	bne.w	c1fca <_vfiprintf_r+0xa22>
   c1660:	46d1      	mov	r9, sl
   c1662:	9b03      	ldr	r3, [sp, #12]
   c1664:	9210      	str	r2, [sp, #64]	; 0x40
   c1666:	442b      	add	r3, r5
   c1668:	9303      	str	r3, [sp, #12]
   c166a:	7823      	ldrb	r3, [r4, #0]
   c166c:	2b00      	cmp	r3, #0
   c166e:	f000 83e5 	beq.w	c1e3c <_vfiprintf_r+0x894>
   c1672:	2000      	movs	r0, #0
   c1674:	f04f 0300 	mov.w	r3, #0
   c1678:	f104 0801 	add.w	r8, r4, #1
   c167c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   c1680:	7862      	ldrb	r2, [r4, #1]
   c1682:	4606      	mov	r6, r0
   c1684:	4605      	mov	r5, r0
   c1686:	4603      	mov	r3, r0
   c1688:	f04f 34ff 	mov.w	r4, #4294967295
   c168c:	f108 0801 	add.w	r8, r8, #1
   c1690:	f1a2 0120 	sub.w	r1, r2, #32
   c1694:	2958      	cmp	r1, #88	; 0x58
   c1696:	f200 82d9 	bhi.w	c1c4c <_vfiprintf_r+0x6a4>
   c169a:	e8df f011 	tbh	[pc, r1, lsl #1]
   c169e:	0228      	.short	0x0228
   c16a0:	02d702d7 	.word	0x02d702d7
   c16a4:	02d70230 	.word	0x02d70230
   c16a8:	02d702d7 	.word	0x02d702d7
   c16ac:	02d702d7 	.word	0x02d702d7
   c16b0:	00a002d7 	.word	0x00a002d7
   c16b4:	02d70288 	.word	0x02d70288
   c16b8:	02b800a8 	.word	0x02b800a8
   c16bc:	01a602d7 	.word	0x01a602d7
   c16c0:	01ab01ab 	.word	0x01ab01ab
   c16c4:	01ab01ab 	.word	0x01ab01ab
   c16c8:	01ab01ab 	.word	0x01ab01ab
   c16cc:	01ab01ab 	.word	0x01ab01ab
   c16d0:	02d701ab 	.word	0x02d701ab
   c16d4:	02d702d7 	.word	0x02d702d7
   c16d8:	02d702d7 	.word	0x02d702d7
   c16dc:	02d702d7 	.word	0x02d702d7
   c16e0:	02d702d7 	.word	0x02d702d7
   c16e4:	01b902d7 	.word	0x01b902d7
   c16e8:	02d702d7 	.word	0x02d702d7
   c16ec:	02d702d7 	.word	0x02d702d7
   c16f0:	02d702d7 	.word	0x02d702d7
   c16f4:	02d702d7 	.word	0x02d702d7
   c16f8:	02d702d7 	.word	0x02d702d7
   c16fc:	02d7019e 	.word	0x02d7019e
   c1700:	02d702d7 	.word	0x02d702d7
   c1704:	02d702d7 	.word	0x02d702d7
   c1708:	02d701a2 	.word	0x02d701a2
   c170c:	025a02d7 	.word	0x025a02d7
   c1710:	02d702d7 	.word	0x02d702d7
   c1714:	02d702d7 	.word	0x02d702d7
   c1718:	02d702d7 	.word	0x02d702d7
   c171c:	02d702d7 	.word	0x02d702d7
   c1720:	02d702d7 	.word	0x02d702d7
   c1724:	02220261 	.word	0x02220261
   c1728:	02d702d7 	.word	0x02d702d7
   c172c:	027602d7 	.word	0x027602d7
   c1730:	02d70222 	.word	0x02d70222
   c1734:	027b02d7 	.word	0x027b02d7
   c1738:	01fc02d7 	.word	0x01fc02d7
   c173c:	02100189 	.word	0x02100189
   c1740:	02d702d2 	.word	0x02d702d2
   c1744:	02d70295 	.word	0x02d70295
   c1748:	02d700ad 	.word	0x02d700ad
   c174c:	023502d7 	.word	0x023502d7
   c1750:	f109 0908 	add.w	r9, r9, #8
   c1754:	9b03      	ldr	r3, [sp, #12]
   c1756:	442b      	add	r3, r5
   c1758:	9303      	str	r3, [sp, #12]
   c175a:	e786      	b.n	c166a <_vfiprintf_r+0xc2>
   c175c:	4659      	mov	r1, fp
   c175e:	9806      	ldr	r0, [sp, #24]
   c1760:	f000 fdaa 	bl	c22b8 <__swsetup_r>
   c1764:	bb18      	cbnz	r0, c17ae <_vfiprintf_r+0x206>
   c1766:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   c176a:	f001 031a 	and.w	r3, r1, #26
   c176e:	2b0a      	cmp	r3, #10
   c1770:	f47f af4b 	bne.w	c160a <_vfiprintf_r+0x62>
   c1774:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   c1778:	2b00      	cmp	r3, #0
   c177a:	f6ff af46 	blt.w	c160a <_vfiprintf_r+0x62>
   c177e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   c1782:	07db      	lsls	r3, r3, #31
   c1784:	d405      	bmi.n	c1792 <_vfiprintf_r+0x1ea>
   c1786:	058f      	lsls	r7, r1, #22
   c1788:	d403      	bmi.n	c1792 <_vfiprintf_r+0x1ea>
   c178a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   c178e:	f001 fabd 	bl	c2d0c <__retarget_lock_release_recursive>
   c1792:	462b      	mov	r3, r5
   c1794:	4642      	mov	r2, r8
   c1796:	4659      	mov	r1, fp
   c1798:	9806      	ldr	r0, [sp, #24]
   c179a:	f000 fd49 	bl	c2230 <__sbprintf>
   c179e:	9003      	str	r0, [sp, #12]
   c17a0:	9803      	ldr	r0, [sp, #12]
   c17a2:	b02d      	add	sp, #180	; 0xb4
   c17a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c17a8:	f000 feee 	bl	c2588 <__sinit>
   c17ac:	e709      	b.n	c15c2 <_vfiprintf_r+0x1a>
   c17ae:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   c17b2:	07d9      	lsls	r1, r3, #31
   c17b4:	d404      	bmi.n	c17c0 <_vfiprintf_r+0x218>
   c17b6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   c17ba:	059a      	lsls	r2, r3, #22
   c17bc:	f140 84ae 	bpl.w	c211c <_vfiprintf_r+0xb74>
   c17c0:	f04f 33ff 	mov.w	r3, #4294967295
   c17c4:	9303      	str	r3, [sp, #12]
   c17c6:	9803      	ldr	r0, [sp, #12]
   c17c8:	b02d      	add	sp, #180	; 0xb4
   c17ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c17ce:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   c17d2:	f001 fa99 	bl	c2d08 <__retarget_lock_acquire_recursive>
   c17d6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   c17da:	b281      	uxth	r1, r0
   c17dc:	e6fb      	b.n	c15d6 <_vfiprintf_r+0x2e>
   c17de:	9907      	ldr	r1, [sp, #28]
   c17e0:	460a      	mov	r2, r1
   c17e2:	680d      	ldr	r5, [r1, #0]
   c17e4:	3204      	adds	r2, #4
   c17e6:	2d00      	cmp	r5, #0
   c17e8:	9207      	str	r2, [sp, #28]
   c17ea:	da02      	bge.n	c17f2 <_vfiprintf_r+0x24a>
   c17ec:	426d      	negs	r5, r5
   c17ee:	f043 0304 	orr.w	r3, r3, #4
   c17f2:	f898 2000 	ldrb.w	r2, [r8]
   c17f6:	e749      	b.n	c168c <_vfiprintf_r+0xe4>
   c17f8:	9508      	str	r5, [sp, #32]
   c17fa:	069e      	lsls	r6, r3, #26
   c17fc:	f100 845a 	bmi.w	c20b4 <_vfiprintf_r+0xb0c>
   c1800:	9907      	ldr	r1, [sp, #28]
   c1802:	06dd      	lsls	r5, r3, #27
   c1804:	460a      	mov	r2, r1
   c1806:	f100 83ef 	bmi.w	c1fe8 <_vfiprintf_r+0xa40>
   c180a:	0658      	lsls	r0, r3, #25
   c180c:	f140 83ec 	bpl.w	c1fe8 <_vfiprintf_r+0xa40>
   c1810:	2700      	movs	r7, #0
   c1812:	2201      	movs	r2, #1
   c1814:	880e      	ldrh	r6, [r1, #0]
   c1816:	3104      	adds	r1, #4
   c1818:	9107      	str	r1, [sp, #28]
   c181a:	f04f 0100 	mov.w	r1, #0
   c181e:	2500      	movs	r5, #0
   c1820:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   c1824:	1c61      	adds	r1, r4, #1
   c1826:	f000 8117 	beq.w	c1a58 <_vfiprintf_r+0x4b0>
   c182a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   c182e:	9102      	str	r1, [sp, #8]
   c1830:	ea56 0107 	orrs.w	r1, r6, r7
   c1834:	f040 8115 	bne.w	c1a62 <_vfiprintf_r+0x4ba>
   c1838:	2c00      	cmp	r4, #0
   c183a:	f040 835b 	bne.w	c1ef4 <_vfiprintf_r+0x94c>
   c183e:	2a00      	cmp	r2, #0
   c1840:	f040 83b6 	bne.w	c1fb0 <_vfiprintf_r+0xa08>
   c1844:	f013 0301 	ands.w	r3, r3, #1
   c1848:	9305      	str	r3, [sp, #20]
   c184a:	f000 8455 	beq.w	c20f8 <_vfiprintf_r+0xb50>
   c184e:	2330      	movs	r3, #48	; 0x30
   c1850:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   c1854:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   c1858:	9b05      	ldr	r3, [sp, #20]
   c185a:	42a3      	cmp	r3, r4
   c185c:	bfb8      	it	lt
   c185e:	4623      	movlt	r3, r4
   c1860:	9301      	str	r3, [sp, #4]
   c1862:	b10d      	cbz	r5, c1868 <_vfiprintf_r+0x2c0>
   c1864:	3301      	adds	r3, #1
   c1866:	9301      	str	r3, [sp, #4]
   c1868:	9b02      	ldr	r3, [sp, #8]
   c186a:	f013 0302 	ands.w	r3, r3, #2
   c186e:	9309      	str	r3, [sp, #36]	; 0x24
   c1870:	d002      	beq.n	c1878 <_vfiprintf_r+0x2d0>
   c1872:	9b01      	ldr	r3, [sp, #4]
   c1874:	3302      	adds	r3, #2
   c1876:	9301      	str	r3, [sp, #4]
   c1878:	9b02      	ldr	r3, [sp, #8]
   c187a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   c187e:	930a      	str	r3, [sp, #40]	; 0x28
   c1880:	f040 8215 	bne.w	c1cae <_vfiprintf_r+0x706>
   c1884:	9b08      	ldr	r3, [sp, #32]
   c1886:	9a01      	ldr	r2, [sp, #4]
   c1888:	1a9d      	subs	r5, r3, r2
   c188a:	2d00      	cmp	r5, #0
   c188c:	f340 820f 	ble.w	c1cae <_vfiprintf_r+0x706>
   c1890:	2d10      	cmp	r5, #16
   c1892:	f340 8484 	ble.w	c219e <_vfiprintf_r+0xbf6>
   c1896:	9b10      	ldr	r3, [sp, #64]	; 0x40
   c1898:	46ce      	mov	lr, r9
   c189a:	2710      	movs	r7, #16
   c189c:	46a1      	mov	r9, r4
   c189e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c18a0:	4ec5      	ldr	r6, [pc, #788]	; (c1bb8 <_vfiprintf_r+0x610>)
   c18a2:	4619      	mov	r1, r3
   c18a4:	9c06      	ldr	r4, [sp, #24]
   c18a6:	e007      	b.n	c18b8 <_vfiprintf_r+0x310>
   c18a8:	f101 0c02 	add.w	ip, r1, #2
   c18ac:	4601      	mov	r1, r0
   c18ae:	f10e 0e08 	add.w	lr, lr, #8
   c18b2:	3d10      	subs	r5, #16
   c18b4:	2d10      	cmp	r5, #16
   c18b6:	dd11      	ble.n	c18dc <_vfiprintf_r+0x334>
   c18b8:	1c48      	adds	r0, r1, #1
   c18ba:	3210      	adds	r2, #16
   c18bc:	2807      	cmp	r0, #7
   c18be:	9211      	str	r2, [sp, #68]	; 0x44
   c18c0:	e88e 00c0 	stmia.w	lr, {r6, r7}
   c18c4:	9010      	str	r0, [sp, #64]	; 0x40
   c18c6:	ddef      	ble.n	c18a8 <_vfiprintf_r+0x300>
   c18c8:	2a00      	cmp	r2, #0
   c18ca:	f040 81d9 	bne.w	c1c80 <_vfiprintf_r+0x6d8>
   c18ce:	3d10      	subs	r5, #16
   c18d0:	2d10      	cmp	r5, #16
   c18d2:	4611      	mov	r1, r2
   c18d4:	f04f 0c01 	mov.w	ip, #1
   c18d8:	46d6      	mov	lr, sl
   c18da:	dced      	bgt.n	c18b8 <_vfiprintf_r+0x310>
   c18dc:	464c      	mov	r4, r9
   c18de:	4661      	mov	r1, ip
   c18e0:	46f1      	mov	r9, lr
   c18e2:	442a      	add	r2, r5
   c18e4:	2907      	cmp	r1, #7
   c18e6:	9211      	str	r2, [sp, #68]	; 0x44
   c18e8:	f8c9 6000 	str.w	r6, [r9]
   c18ec:	f8c9 5004 	str.w	r5, [r9, #4]
   c18f0:	9110      	str	r1, [sp, #64]	; 0x40
   c18f2:	f300 82eb 	bgt.w	c1ecc <_vfiprintf_r+0x924>
   c18f6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   c18fa:	f109 0908 	add.w	r9, r9, #8
   c18fe:	1c48      	adds	r0, r1, #1
   c1900:	2d00      	cmp	r5, #0
   c1902:	f040 81dc 	bne.w	c1cbe <_vfiprintf_r+0x716>
   c1906:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c1908:	2b00      	cmp	r3, #0
   c190a:	f000 81f6 	beq.w	c1cfa <_vfiprintf_r+0x752>
   c190e:	2102      	movs	r1, #2
   c1910:	ab0e      	add	r3, sp, #56	; 0x38
   c1912:	440a      	add	r2, r1
   c1914:	2807      	cmp	r0, #7
   c1916:	9211      	str	r2, [sp, #68]	; 0x44
   c1918:	9010      	str	r0, [sp, #64]	; 0x40
   c191a:	f8c9 1004 	str.w	r1, [r9, #4]
   c191e:	f8c9 3000 	str.w	r3, [r9]
   c1922:	f340 81e6 	ble.w	c1cf2 <_vfiprintf_r+0x74a>
   c1926:	2a00      	cmp	r2, #0
   c1928:	f040 8395 	bne.w	c2056 <_vfiprintf_r+0xaae>
   c192c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c192e:	2001      	movs	r0, #1
   c1930:	2b80      	cmp	r3, #128	; 0x80
   c1932:	4611      	mov	r1, r2
   c1934:	46d1      	mov	r9, sl
   c1936:	f040 81e4 	bne.w	c1d02 <_vfiprintf_r+0x75a>
   c193a:	9b08      	ldr	r3, [sp, #32]
   c193c:	9d01      	ldr	r5, [sp, #4]
   c193e:	1b5e      	subs	r6, r3, r5
   c1940:	2e00      	cmp	r6, #0
   c1942:	f340 81de 	ble.w	c1d02 <_vfiprintf_r+0x75a>
   c1946:	2e10      	cmp	r6, #16
   c1948:	f340 843c 	ble.w	c21c4 <_vfiprintf_r+0xc1c>
   c194c:	46cc      	mov	ip, r9
   c194e:	2710      	movs	r7, #16
   c1950:	46a1      	mov	r9, r4
   c1952:	4d9a      	ldr	r5, [pc, #616]	; (c1bbc <_vfiprintf_r+0x614>)
   c1954:	9c06      	ldr	r4, [sp, #24]
   c1956:	e007      	b.n	c1968 <_vfiprintf_r+0x3c0>
   c1958:	f101 0e02 	add.w	lr, r1, #2
   c195c:	4601      	mov	r1, r0
   c195e:	f10c 0c08 	add.w	ip, ip, #8
   c1962:	3e10      	subs	r6, #16
   c1964:	2e10      	cmp	r6, #16
   c1966:	dd11      	ble.n	c198c <_vfiprintf_r+0x3e4>
   c1968:	1c48      	adds	r0, r1, #1
   c196a:	3210      	adds	r2, #16
   c196c:	2807      	cmp	r0, #7
   c196e:	9211      	str	r2, [sp, #68]	; 0x44
   c1970:	e88c 00a0 	stmia.w	ip, {r5, r7}
   c1974:	9010      	str	r0, [sp, #64]	; 0x40
   c1976:	ddef      	ble.n	c1958 <_vfiprintf_r+0x3b0>
   c1978:	2a00      	cmp	r2, #0
   c197a:	f040 829b 	bne.w	c1eb4 <_vfiprintf_r+0x90c>
   c197e:	3e10      	subs	r6, #16
   c1980:	2e10      	cmp	r6, #16
   c1982:	f04f 0e01 	mov.w	lr, #1
   c1986:	4611      	mov	r1, r2
   c1988:	46d4      	mov	ip, sl
   c198a:	dced      	bgt.n	c1968 <_vfiprintf_r+0x3c0>
   c198c:	464c      	mov	r4, r9
   c198e:	46e1      	mov	r9, ip
   c1990:	4432      	add	r2, r6
   c1992:	f1be 0f07 	cmp.w	lr, #7
   c1996:	9211      	str	r2, [sp, #68]	; 0x44
   c1998:	e889 0060 	stmia.w	r9, {r5, r6}
   c199c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   c19a0:	f300 8366 	bgt.w	c2070 <_vfiprintf_r+0xac8>
   c19a4:	f109 0908 	add.w	r9, r9, #8
   c19a8:	f10e 0001 	add.w	r0, lr, #1
   c19ac:	4671      	mov	r1, lr
   c19ae:	e1a8      	b.n	c1d02 <_vfiprintf_r+0x75a>
   c19b0:	9508      	str	r5, [sp, #32]
   c19b2:	f013 0220 	ands.w	r2, r3, #32
   c19b6:	f040 8389 	bne.w	c20cc <_vfiprintf_r+0xb24>
   c19ba:	f013 0110 	ands.w	r1, r3, #16
   c19be:	f040 8319 	bne.w	c1ff4 <_vfiprintf_r+0xa4c>
   c19c2:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   c19c6:	f000 8315 	beq.w	c1ff4 <_vfiprintf_r+0xa4c>
   c19ca:	9807      	ldr	r0, [sp, #28]
   c19cc:	460a      	mov	r2, r1
   c19ce:	4601      	mov	r1, r0
   c19d0:	3104      	adds	r1, #4
   c19d2:	8806      	ldrh	r6, [r0, #0]
   c19d4:	2700      	movs	r7, #0
   c19d6:	9107      	str	r1, [sp, #28]
   c19d8:	e71f      	b.n	c181a <_vfiprintf_r+0x272>
   c19da:	9508      	str	r5, [sp, #32]
   c19dc:	f043 0310 	orr.w	r3, r3, #16
   c19e0:	e7e7      	b.n	c19b2 <_vfiprintf_r+0x40a>
   c19e2:	9508      	str	r5, [sp, #32]
   c19e4:	f043 0310 	orr.w	r3, r3, #16
   c19e8:	e707      	b.n	c17fa <_vfiprintf_r+0x252>
   c19ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   c19ee:	f898 2000 	ldrb.w	r2, [r8]
   c19f2:	e64b      	b.n	c168c <_vfiprintf_r+0xe4>
   c19f4:	2500      	movs	r5, #0
   c19f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c19fa:	f818 2b01 	ldrb.w	r2, [r8], #1
   c19fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   c1a02:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   c1a06:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c1a0a:	2909      	cmp	r1, #9
   c1a0c:	d9f5      	bls.n	c19fa <_vfiprintf_r+0x452>
   c1a0e:	e63f      	b.n	c1690 <_vfiprintf_r+0xe8>
   c1a10:	9508      	str	r5, [sp, #32]
   c1a12:	2800      	cmp	r0, #0
   c1a14:	f040 8402 	bne.w	c221c <_vfiprintf_r+0xc74>
   c1a18:	f043 0310 	orr.w	r3, r3, #16
   c1a1c:	069e      	lsls	r6, r3, #26
   c1a1e:	f100 833d 	bmi.w	c209c <_vfiprintf_r+0xaf4>
   c1a22:	9907      	ldr	r1, [sp, #28]
   c1a24:	06dd      	lsls	r5, r3, #27
   c1a26:	460a      	mov	r2, r1
   c1a28:	f100 82f0 	bmi.w	c200c <_vfiprintf_r+0xa64>
   c1a2c:	0658      	lsls	r0, r3, #25
   c1a2e:	f140 82ed 	bpl.w	c200c <_vfiprintf_r+0xa64>
   c1a32:	f9b1 6000 	ldrsh.w	r6, [r1]
   c1a36:	3204      	adds	r2, #4
   c1a38:	17f7      	asrs	r7, r6, #31
   c1a3a:	4630      	mov	r0, r6
   c1a3c:	4639      	mov	r1, r7
   c1a3e:	9207      	str	r2, [sp, #28]
   c1a40:	2800      	cmp	r0, #0
   c1a42:	f171 0200 	sbcs.w	r2, r1, #0
   c1a46:	f2c0 835a 	blt.w	c20fe <_vfiprintf_r+0xb56>
   c1a4a:	1c61      	adds	r1, r4, #1
   c1a4c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   c1a50:	f04f 0201 	mov.w	r2, #1
   c1a54:	f47f aee9 	bne.w	c182a <_vfiprintf_r+0x282>
   c1a58:	ea56 0107 	orrs.w	r1, r6, r7
   c1a5c:	f000 824b 	beq.w	c1ef6 <_vfiprintf_r+0x94e>
   c1a60:	9302      	str	r3, [sp, #8]
   c1a62:	2a01      	cmp	r2, #1
   c1a64:	f000 828a 	beq.w	c1f7c <_vfiprintf_r+0x9d4>
   c1a68:	2a02      	cmp	r2, #2
   c1a6a:	f040 825a 	bne.w	c1f22 <_vfiprintf_r+0x97a>
   c1a6e:	46d3      	mov	fp, sl
   c1a70:	980b      	ldr	r0, [sp, #44]	; 0x2c
   c1a72:	0933      	lsrs	r3, r6, #4
   c1a74:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   c1a78:	0939      	lsrs	r1, r7, #4
   c1a7a:	f006 020f 	and.w	r2, r6, #15
   c1a7e:	460f      	mov	r7, r1
   c1a80:	461e      	mov	r6, r3
   c1a82:	5c83      	ldrb	r3, [r0, r2]
   c1a84:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   c1a88:	ea56 0307 	orrs.w	r3, r6, r7
   c1a8c:	d1f1      	bne.n	c1a72 <_vfiprintf_r+0x4ca>
   c1a8e:	ebaa 030b 	sub.w	r3, sl, fp
   c1a92:	9305      	str	r3, [sp, #20]
   c1a94:	e6e0      	b.n	c1858 <_vfiprintf_r+0x2b0>
   c1a96:	2800      	cmp	r0, #0
   c1a98:	f040 83bd 	bne.w	c2216 <_vfiprintf_r+0xc6e>
   c1a9c:	0699      	lsls	r1, r3, #26
   c1a9e:	f100 8359 	bmi.w	c2154 <_vfiprintf_r+0xbac>
   c1aa2:	06da      	lsls	r2, r3, #27
   c1aa4:	f100 80e5 	bmi.w	c1c72 <_vfiprintf_r+0x6ca>
   c1aa8:	065b      	lsls	r3, r3, #25
   c1aaa:	f140 80e2 	bpl.w	c1c72 <_vfiprintf_r+0x6ca>
   c1aae:	9a07      	ldr	r2, [sp, #28]
   c1ab0:	6813      	ldr	r3, [r2, #0]
   c1ab2:	3204      	adds	r2, #4
   c1ab4:	9207      	str	r2, [sp, #28]
   c1ab6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   c1aba:	801a      	strh	r2, [r3, #0]
   c1abc:	e5b1      	b.n	c1622 <_vfiprintf_r+0x7a>
   c1abe:	2278      	movs	r2, #120	; 0x78
   c1ac0:	2130      	movs	r1, #48	; 0x30
   c1ac2:	9508      	str	r5, [sp, #32]
   c1ac4:	9d07      	ldr	r5, [sp, #28]
   c1ac6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   c1aca:	1d2a      	adds	r2, r5, #4
   c1acc:	9207      	str	r2, [sp, #28]
   c1ace:	4a3c      	ldr	r2, [pc, #240]	; (c1bc0 <_vfiprintf_r+0x618>)
   c1ad0:	682e      	ldr	r6, [r5, #0]
   c1ad2:	920b      	str	r2, [sp, #44]	; 0x2c
   c1ad4:	f043 0302 	orr.w	r3, r3, #2
   c1ad8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   c1adc:	2700      	movs	r7, #0
   c1ade:	2202      	movs	r2, #2
   c1ae0:	e69b      	b.n	c181a <_vfiprintf_r+0x272>
   c1ae2:	9508      	str	r5, [sp, #32]
   c1ae4:	2800      	cmp	r0, #0
   c1ae6:	d099      	beq.n	c1a1c <_vfiprintf_r+0x474>
   c1ae8:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   c1aec:	e796      	b.n	c1a1c <_vfiprintf_r+0x474>
   c1aee:	f898 2000 	ldrb.w	r2, [r8]
   c1af2:	2e00      	cmp	r6, #0
   c1af4:	f47f adca 	bne.w	c168c <_vfiprintf_r+0xe4>
   c1af8:	2001      	movs	r0, #1
   c1afa:	2620      	movs	r6, #32
   c1afc:	e5c6      	b.n	c168c <_vfiprintf_r+0xe4>
   c1afe:	f043 0301 	orr.w	r3, r3, #1
   c1b02:	f898 2000 	ldrb.w	r2, [r8]
   c1b06:	e5c1      	b.n	c168c <_vfiprintf_r+0xe4>
   c1b08:	9508      	str	r5, [sp, #32]
   c1b0a:	2800      	cmp	r0, #0
   c1b0c:	f040 8380 	bne.w	c2210 <_vfiprintf_r+0xc68>
   c1b10:	492b      	ldr	r1, [pc, #172]	; (c1bc0 <_vfiprintf_r+0x618>)
   c1b12:	910b      	str	r1, [sp, #44]	; 0x2c
   c1b14:	069f      	lsls	r7, r3, #26
   c1b16:	f100 82e5 	bmi.w	c20e4 <_vfiprintf_r+0xb3c>
   c1b1a:	9807      	ldr	r0, [sp, #28]
   c1b1c:	06de      	lsls	r6, r3, #27
   c1b1e:	4601      	mov	r1, r0
   c1b20:	f100 826f 	bmi.w	c2002 <_vfiprintf_r+0xa5a>
   c1b24:	065d      	lsls	r5, r3, #25
   c1b26:	f140 826c 	bpl.w	c2002 <_vfiprintf_r+0xa5a>
   c1b2a:	2700      	movs	r7, #0
   c1b2c:	3104      	adds	r1, #4
   c1b2e:	8806      	ldrh	r6, [r0, #0]
   c1b30:	9107      	str	r1, [sp, #28]
   c1b32:	07d8      	lsls	r0, r3, #31
   c1b34:	f140 8220 	bpl.w	c1f78 <_vfiprintf_r+0x9d0>
   c1b38:	ea56 0107 	orrs.w	r1, r6, r7
   c1b3c:	f000 821c 	beq.w	c1f78 <_vfiprintf_r+0x9d0>
   c1b40:	2130      	movs	r1, #48	; 0x30
   c1b42:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   c1b46:	f043 0302 	orr.w	r3, r3, #2
   c1b4a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   c1b4e:	2202      	movs	r2, #2
   c1b50:	e663      	b.n	c181a <_vfiprintf_r+0x272>
   c1b52:	9508      	str	r5, [sp, #32]
   c1b54:	2800      	cmp	r0, #0
   c1b56:	f040 8355 	bne.w	c2204 <_vfiprintf_r+0xc5c>
   c1b5a:	491a      	ldr	r1, [pc, #104]	; (c1bc4 <_vfiprintf_r+0x61c>)
   c1b5c:	910b      	str	r1, [sp, #44]	; 0x2c
   c1b5e:	e7d9      	b.n	c1b14 <_vfiprintf_r+0x56c>
   c1b60:	2201      	movs	r2, #1
   c1b62:	9807      	ldr	r0, [sp, #28]
   c1b64:	4611      	mov	r1, r2
   c1b66:	9201      	str	r2, [sp, #4]
   c1b68:	6802      	ldr	r2, [r0, #0]
   c1b6a:	f04f 0400 	mov.w	r4, #0
   c1b6e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   c1b72:	4602      	mov	r2, r0
   c1b74:	3204      	adds	r2, #4
   c1b76:	9508      	str	r5, [sp, #32]
   c1b78:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   c1b7c:	9105      	str	r1, [sp, #20]
   c1b7e:	9207      	str	r2, [sp, #28]
   c1b80:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   c1b84:	9302      	str	r3, [sp, #8]
   c1b86:	2400      	movs	r4, #0
   c1b88:	e66e      	b.n	c1868 <_vfiprintf_r+0x2c0>
   c1b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   c1b8e:	f898 2000 	ldrb.w	r2, [r8]
   c1b92:	e57b      	b.n	c168c <_vfiprintf_r+0xe4>
   c1b94:	f898 2000 	ldrb.w	r2, [r8]
   c1b98:	2a6c      	cmp	r2, #108	; 0x6c
   c1b9a:	bf03      	ittte	eq
   c1b9c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   c1ba0:	f043 0320 	orreq.w	r3, r3, #32
   c1ba4:	f108 0801 	addeq.w	r8, r8, #1
   c1ba8:	f043 0310 	orrne.w	r3, r3, #16
   c1bac:	e56e      	b.n	c168c <_vfiprintf_r+0xe4>
   c1bae:	f898 2000 	ldrb.w	r2, [r8]
   c1bb2:	2001      	movs	r0, #1
   c1bb4:	262b      	movs	r6, #43	; 0x2b
   c1bb6:	e569      	b.n	c168c <_vfiprintf_r+0xe4>
   c1bb8:	000c40d0 	.word	0x000c40d0
   c1bbc:	000c40e0 	.word	0x000c40e0
   c1bc0:	000c40b4 	.word	0x000c40b4
   c1bc4:	000c40a0 	.word	0x000c40a0
   c1bc8:	f04f 0200 	mov.w	r2, #0
   c1bcc:	9907      	ldr	r1, [sp, #28]
   c1bce:	9508      	str	r5, [sp, #32]
   c1bd0:	f8d1 b000 	ldr.w	fp, [r1]
   c1bd4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   c1bd8:	1d0d      	adds	r5, r1, #4
   c1bda:	f1bb 0f00 	cmp.w	fp, #0
   c1bde:	f000 82e4 	beq.w	c21aa <_vfiprintf_r+0xc02>
   c1be2:	1c67      	adds	r7, r4, #1
   c1be4:	f000 82c3 	beq.w	c216e <_vfiprintf_r+0xbc6>
   c1be8:	4622      	mov	r2, r4
   c1bea:	2100      	movs	r1, #0
   c1bec:	4658      	mov	r0, fp
   c1bee:	9301      	str	r3, [sp, #4]
   c1bf0:	f001 fbc6 	bl	c3380 <memchr>
   c1bf4:	9b01      	ldr	r3, [sp, #4]
   c1bf6:	2800      	cmp	r0, #0
   c1bf8:	f000 82e8 	beq.w	c21cc <_vfiprintf_r+0xc24>
   c1bfc:	eba0 020b 	sub.w	r2, r0, fp
   c1c00:	9507      	str	r5, [sp, #28]
   c1c02:	9205      	str	r2, [sp, #20]
   c1c04:	9302      	str	r3, [sp, #8]
   c1c06:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   c1c0a:	2400      	movs	r4, #0
   c1c0c:	e624      	b.n	c1858 <_vfiprintf_r+0x2b0>
   c1c0e:	f898 2000 	ldrb.w	r2, [r8]
   c1c12:	f108 0701 	add.w	r7, r8, #1
   c1c16:	2a2a      	cmp	r2, #42	; 0x2a
   c1c18:	f000 82e9 	beq.w	c21ee <_vfiprintf_r+0xc46>
   c1c1c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c1c20:	2909      	cmp	r1, #9
   c1c22:	46b8      	mov	r8, r7
   c1c24:	f04f 0400 	mov.w	r4, #0
   c1c28:	f63f ad32 	bhi.w	c1690 <_vfiprintf_r+0xe8>
   c1c2c:	f818 2b01 	ldrb.w	r2, [r8], #1
   c1c30:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   c1c34:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   c1c38:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c1c3c:	2909      	cmp	r1, #9
   c1c3e:	d9f5      	bls.n	c1c2c <_vfiprintf_r+0x684>
   c1c40:	e526      	b.n	c1690 <_vfiprintf_r+0xe8>
   c1c42:	f043 0320 	orr.w	r3, r3, #32
   c1c46:	f898 2000 	ldrb.w	r2, [r8]
   c1c4a:	e51f      	b.n	c168c <_vfiprintf_r+0xe4>
   c1c4c:	9508      	str	r5, [sp, #32]
   c1c4e:	2800      	cmp	r0, #0
   c1c50:	f040 82db 	bne.w	c220a <_vfiprintf_r+0xc62>
   c1c54:	2a00      	cmp	r2, #0
   c1c56:	f000 80f1 	beq.w	c1e3c <_vfiprintf_r+0x894>
   c1c5a:	2101      	movs	r1, #1
   c1c5c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   c1c60:	f04f 0200 	mov.w	r2, #0
   c1c64:	9101      	str	r1, [sp, #4]
   c1c66:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   c1c6a:	9105      	str	r1, [sp, #20]
   c1c6c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   c1c70:	e788      	b.n	c1b84 <_vfiprintf_r+0x5dc>
   c1c72:	9a07      	ldr	r2, [sp, #28]
   c1c74:	6813      	ldr	r3, [r2, #0]
   c1c76:	3204      	adds	r2, #4
   c1c78:	9207      	str	r2, [sp, #28]
   c1c7a:	9a03      	ldr	r2, [sp, #12]
   c1c7c:	601a      	str	r2, [r3, #0]
   c1c7e:	e4d0      	b.n	c1622 <_vfiprintf_r+0x7a>
   c1c80:	aa0f      	add	r2, sp, #60	; 0x3c
   c1c82:	9904      	ldr	r1, [sp, #16]
   c1c84:	4620      	mov	r0, r4
   c1c86:	f7ff fc4f 	bl	c1528 <__sprint_r.part.0>
   c1c8a:	2800      	cmp	r0, #0
   c1c8c:	f040 8143 	bne.w	c1f16 <_vfiprintf_r+0x96e>
   c1c90:	9910      	ldr	r1, [sp, #64]	; 0x40
   c1c92:	46d6      	mov	lr, sl
   c1c94:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c1c96:	f101 0c01 	add.w	ip, r1, #1
   c1c9a:	e60a      	b.n	c18b2 <_vfiprintf_r+0x30a>
   c1c9c:	aa0f      	add	r2, sp, #60	; 0x3c
   c1c9e:	9904      	ldr	r1, [sp, #16]
   c1ca0:	9806      	ldr	r0, [sp, #24]
   c1ca2:	f7ff fc41 	bl	c1528 <__sprint_r.part.0>
   c1ca6:	2800      	cmp	r0, #0
   c1ca8:	f040 8135 	bne.w	c1f16 <_vfiprintf_r+0x96e>
   c1cac:	46d1      	mov	r9, sl
   c1cae:	9910      	ldr	r1, [sp, #64]	; 0x40
   c1cb0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   c1cb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c1cb6:	1c48      	adds	r0, r1, #1
   c1cb8:	2d00      	cmp	r5, #0
   c1cba:	f43f ae24 	beq.w	c1906 <_vfiprintf_r+0x35e>
   c1cbe:	2101      	movs	r1, #1
   c1cc0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   c1cc4:	440a      	add	r2, r1
   c1cc6:	2807      	cmp	r0, #7
   c1cc8:	9211      	str	r2, [sp, #68]	; 0x44
   c1cca:	9010      	str	r0, [sp, #64]	; 0x40
   c1ccc:	f8c9 1004 	str.w	r1, [r9, #4]
   c1cd0:	f8c9 5000 	str.w	r5, [r9]
   c1cd4:	f340 8109 	ble.w	c1eea <_vfiprintf_r+0x942>
   c1cd8:	2a00      	cmp	r2, #0
   c1cda:	f040 81af 	bne.w	c203c <_vfiprintf_r+0xa94>
   c1cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c1ce0:	2b00      	cmp	r3, #0
   c1ce2:	f43f ae23 	beq.w	c192c <_vfiprintf_r+0x384>
   c1ce6:	2202      	movs	r2, #2
   c1ce8:	4608      	mov	r0, r1
   c1cea:	46d1      	mov	r9, sl
   c1cec:	ab0e      	add	r3, sp, #56	; 0x38
   c1cee:	921d      	str	r2, [sp, #116]	; 0x74
   c1cf0:	931c      	str	r3, [sp, #112]	; 0x70
   c1cf2:	4601      	mov	r1, r0
   c1cf4:	f109 0908 	add.w	r9, r9, #8
   c1cf8:	3001      	adds	r0, #1
   c1cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c1cfc:	2b80      	cmp	r3, #128	; 0x80
   c1cfe:	f43f ae1c 	beq.w	c193a <_vfiprintf_r+0x392>
   c1d02:	9b05      	ldr	r3, [sp, #20]
   c1d04:	1ae4      	subs	r4, r4, r3
   c1d06:	2c00      	cmp	r4, #0
   c1d08:	dd2f      	ble.n	c1d6a <_vfiprintf_r+0x7c2>
   c1d0a:	2c10      	cmp	r4, #16
   c1d0c:	f340 8220 	ble.w	c2150 <_vfiprintf_r+0xba8>
   c1d10:	46ce      	mov	lr, r9
   c1d12:	2610      	movs	r6, #16
   c1d14:	4db2      	ldr	r5, [pc, #712]	; (c1fe0 <_vfiprintf_r+0xa38>)
   c1d16:	9f06      	ldr	r7, [sp, #24]
   c1d18:	f8dd 9010 	ldr.w	r9, [sp, #16]
   c1d1c:	e006      	b.n	c1d2c <_vfiprintf_r+0x784>
   c1d1e:	1c88      	adds	r0, r1, #2
   c1d20:	4619      	mov	r1, r3
   c1d22:	f10e 0e08 	add.w	lr, lr, #8
   c1d26:	3c10      	subs	r4, #16
   c1d28:	2c10      	cmp	r4, #16
   c1d2a:	dd10      	ble.n	c1d4e <_vfiprintf_r+0x7a6>
   c1d2c:	1c4b      	adds	r3, r1, #1
   c1d2e:	3210      	adds	r2, #16
   c1d30:	2b07      	cmp	r3, #7
   c1d32:	9211      	str	r2, [sp, #68]	; 0x44
   c1d34:	e88e 0060 	stmia.w	lr, {r5, r6}
   c1d38:	9310      	str	r3, [sp, #64]	; 0x40
   c1d3a:	ddf0      	ble.n	c1d1e <_vfiprintf_r+0x776>
   c1d3c:	2a00      	cmp	r2, #0
   c1d3e:	d165      	bne.n	c1e0c <_vfiprintf_r+0x864>
   c1d40:	3c10      	subs	r4, #16
   c1d42:	2c10      	cmp	r4, #16
   c1d44:	f04f 0001 	mov.w	r0, #1
   c1d48:	4611      	mov	r1, r2
   c1d4a:	46d6      	mov	lr, sl
   c1d4c:	dcee      	bgt.n	c1d2c <_vfiprintf_r+0x784>
   c1d4e:	46f1      	mov	r9, lr
   c1d50:	4422      	add	r2, r4
   c1d52:	2807      	cmp	r0, #7
   c1d54:	9211      	str	r2, [sp, #68]	; 0x44
   c1d56:	f8c9 5000 	str.w	r5, [r9]
   c1d5a:	f8c9 4004 	str.w	r4, [r9, #4]
   c1d5e:	9010      	str	r0, [sp, #64]	; 0x40
   c1d60:	f300 8085 	bgt.w	c1e6e <_vfiprintf_r+0x8c6>
   c1d64:	f109 0908 	add.w	r9, r9, #8
   c1d68:	3001      	adds	r0, #1
   c1d6a:	9905      	ldr	r1, [sp, #20]
   c1d6c:	2807      	cmp	r0, #7
   c1d6e:	440a      	add	r2, r1
   c1d70:	9211      	str	r2, [sp, #68]	; 0x44
   c1d72:	f8c9 b000 	str.w	fp, [r9]
   c1d76:	f8c9 1004 	str.w	r1, [r9, #4]
   c1d7a:	9010      	str	r0, [sp, #64]	; 0x40
   c1d7c:	f340 8082 	ble.w	c1e84 <_vfiprintf_r+0x8dc>
   c1d80:	2a00      	cmp	r2, #0
   c1d82:	f040 8118 	bne.w	c1fb6 <_vfiprintf_r+0xa0e>
   c1d86:	9b02      	ldr	r3, [sp, #8]
   c1d88:	9210      	str	r2, [sp, #64]	; 0x40
   c1d8a:	0758      	lsls	r0, r3, #29
   c1d8c:	d535      	bpl.n	c1dfa <_vfiprintf_r+0x852>
   c1d8e:	9b08      	ldr	r3, [sp, #32]
   c1d90:	9901      	ldr	r1, [sp, #4]
   c1d92:	1a5c      	subs	r4, r3, r1
   c1d94:	2c00      	cmp	r4, #0
   c1d96:	f340 80e7 	ble.w	c1f68 <_vfiprintf_r+0x9c0>
   c1d9a:	46d1      	mov	r9, sl
   c1d9c:	2c10      	cmp	r4, #16
   c1d9e:	f340 820d 	ble.w	c21bc <_vfiprintf_r+0xc14>
   c1da2:	2510      	movs	r5, #16
   c1da4:	9910      	ldr	r1, [sp, #64]	; 0x40
   c1da6:	4e8f      	ldr	r6, [pc, #572]	; (c1fe4 <_vfiprintf_r+0xa3c>)
   c1da8:	9f06      	ldr	r7, [sp, #24]
   c1daa:	f8dd b010 	ldr.w	fp, [sp, #16]
   c1dae:	e006      	b.n	c1dbe <_vfiprintf_r+0x816>
   c1db0:	1c88      	adds	r0, r1, #2
   c1db2:	4619      	mov	r1, r3
   c1db4:	f109 0908 	add.w	r9, r9, #8
   c1db8:	3c10      	subs	r4, #16
   c1dba:	2c10      	cmp	r4, #16
   c1dbc:	dd11      	ble.n	c1de2 <_vfiprintf_r+0x83a>
   c1dbe:	1c4b      	adds	r3, r1, #1
   c1dc0:	3210      	adds	r2, #16
   c1dc2:	2b07      	cmp	r3, #7
   c1dc4:	9211      	str	r2, [sp, #68]	; 0x44
   c1dc6:	f8c9 6000 	str.w	r6, [r9]
   c1dca:	f8c9 5004 	str.w	r5, [r9, #4]
   c1dce:	9310      	str	r3, [sp, #64]	; 0x40
   c1dd0:	ddee      	ble.n	c1db0 <_vfiprintf_r+0x808>
   c1dd2:	bb42      	cbnz	r2, c1e26 <_vfiprintf_r+0x87e>
   c1dd4:	3c10      	subs	r4, #16
   c1dd6:	2c10      	cmp	r4, #16
   c1dd8:	f04f 0001 	mov.w	r0, #1
   c1ddc:	4611      	mov	r1, r2
   c1dde:	46d1      	mov	r9, sl
   c1de0:	dced      	bgt.n	c1dbe <_vfiprintf_r+0x816>
   c1de2:	4422      	add	r2, r4
   c1de4:	2807      	cmp	r0, #7
   c1de6:	9211      	str	r2, [sp, #68]	; 0x44
   c1de8:	f8c9 6000 	str.w	r6, [r9]
   c1dec:	f8c9 4004 	str.w	r4, [r9, #4]
   c1df0:	9010      	str	r0, [sp, #64]	; 0x40
   c1df2:	dd51      	ble.n	c1e98 <_vfiprintf_r+0x8f0>
   c1df4:	2a00      	cmp	r2, #0
   c1df6:	f040 819a 	bne.w	c212e <_vfiprintf_r+0xb86>
   c1dfa:	9b03      	ldr	r3, [sp, #12]
   c1dfc:	9a08      	ldr	r2, [sp, #32]
   c1dfe:	9901      	ldr	r1, [sp, #4]
   c1e00:	428a      	cmp	r2, r1
   c1e02:	bfac      	ite	ge
   c1e04:	189b      	addge	r3, r3, r2
   c1e06:	185b      	addlt	r3, r3, r1
   c1e08:	9303      	str	r3, [sp, #12]
   c1e0a:	e04e      	b.n	c1eaa <_vfiprintf_r+0x902>
   c1e0c:	aa0f      	add	r2, sp, #60	; 0x3c
   c1e0e:	4649      	mov	r1, r9
   c1e10:	4638      	mov	r0, r7
   c1e12:	f7ff fb89 	bl	c1528 <__sprint_r.part.0>
   c1e16:	2800      	cmp	r0, #0
   c1e18:	f040 813e 	bne.w	c2098 <_vfiprintf_r+0xaf0>
   c1e1c:	9910      	ldr	r1, [sp, #64]	; 0x40
   c1e1e:	46d6      	mov	lr, sl
   c1e20:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c1e22:	1c48      	adds	r0, r1, #1
   c1e24:	e77f      	b.n	c1d26 <_vfiprintf_r+0x77e>
   c1e26:	aa0f      	add	r2, sp, #60	; 0x3c
   c1e28:	4659      	mov	r1, fp
   c1e2a:	4638      	mov	r0, r7
   c1e2c:	f7ff fb7c 	bl	c1528 <__sprint_r.part.0>
   c1e30:	b960      	cbnz	r0, c1e4c <_vfiprintf_r+0x8a4>
   c1e32:	9910      	ldr	r1, [sp, #64]	; 0x40
   c1e34:	46d1      	mov	r9, sl
   c1e36:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c1e38:	1c48      	adds	r0, r1, #1
   c1e3a:	e7bd      	b.n	c1db8 <_vfiprintf_r+0x810>
   c1e3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   c1e3e:	f8dd b010 	ldr.w	fp, [sp, #16]
   c1e42:	2b00      	cmp	r3, #0
   c1e44:	f040 81ca 	bne.w	c21dc <_vfiprintf_r+0xc34>
   c1e48:	2300      	movs	r3, #0
   c1e4a:	9310      	str	r3, [sp, #64]	; 0x40
   c1e4c:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   c1e50:	f013 0f01 	tst.w	r3, #1
   c1e54:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   c1e58:	d102      	bne.n	c1e60 <_vfiprintf_r+0x8b8>
   c1e5a:	059a      	lsls	r2, r3, #22
   c1e5c:	f140 80dd 	bpl.w	c201a <_vfiprintf_r+0xa72>
   c1e60:	065b      	lsls	r3, r3, #25
   c1e62:	f53f acad 	bmi.w	c17c0 <_vfiprintf_r+0x218>
   c1e66:	9803      	ldr	r0, [sp, #12]
   c1e68:	b02d      	add	sp, #180	; 0xb4
   c1e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c1e6e:	2a00      	cmp	r2, #0
   c1e70:	f040 8105 	bne.w	c207e <_vfiprintf_r+0xad6>
   c1e74:	2301      	movs	r3, #1
   c1e76:	46d1      	mov	r9, sl
   c1e78:	9a05      	ldr	r2, [sp, #20]
   c1e7a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   c1e7e:	921d      	str	r2, [sp, #116]	; 0x74
   c1e80:	9211      	str	r2, [sp, #68]	; 0x44
   c1e82:	9310      	str	r3, [sp, #64]	; 0x40
   c1e84:	f109 0908 	add.w	r9, r9, #8
   c1e88:	9b02      	ldr	r3, [sp, #8]
   c1e8a:	0759      	lsls	r1, r3, #29
   c1e8c:	d504      	bpl.n	c1e98 <_vfiprintf_r+0x8f0>
   c1e8e:	9b08      	ldr	r3, [sp, #32]
   c1e90:	9901      	ldr	r1, [sp, #4]
   c1e92:	1a5c      	subs	r4, r3, r1
   c1e94:	2c00      	cmp	r4, #0
   c1e96:	dc81      	bgt.n	c1d9c <_vfiprintf_r+0x7f4>
   c1e98:	9b03      	ldr	r3, [sp, #12]
   c1e9a:	9908      	ldr	r1, [sp, #32]
   c1e9c:	9801      	ldr	r0, [sp, #4]
   c1e9e:	4281      	cmp	r1, r0
   c1ea0:	bfac      	ite	ge
   c1ea2:	185b      	addge	r3, r3, r1
   c1ea4:	181b      	addlt	r3, r3, r0
   c1ea6:	9303      	str	r3, [sp, #12]
   c1ea8:	bb72      	cbnz	r2, c1f08 <_vfiprintf_r+0x960>
   c1eaa:	2300      	movs	r3, #0
   c1eac:	46d1      	mov	r9, sl
   c1eae:	9310      	str	r3, [sp, #64]	; 0x40
   c1eb0:	f7ff bbb7 	b.w	c1622 <_vfiprintf_r+0x7a>
   c1eb4:	aa0f      	add	r2, sp, #60	; 0x3c
   c1eb6:	9904      	ldr	r1, [sp, #16]
   c1eb8:	4620      	mov	r0, r4
   c1eba:	f7ff fb35 	bl	c1528 <__sprint_r.part.0>
   c1ebe:	bb50      	cbnz	r0, c1f16 <_vfiprintf_r+0x96e>
   c1ec0:	9910      	ldr	r1, [sp, #64]	; 0x40
   c1ec2:	46d4      	mov	ip, sl
   c1ec4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c1ec6:	f101 0e01 	add.w	lr, r1, #1
   c1eca:	e54a      	b.n	c1962 <_vfiprintf_r+0x3ba>
   c1ecc:	2a00      	cmp	r2, #0
   c1ece:	f47f aee5 	bne.w	c1c9c <_vfiprintf_r+0x6f4>
   c1ed2:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   c1ed6:	2900      	cmp	r1, #0
   c1ed8:	f000 811a 	beq.w	c2110 <_vfiprintf_r+0xb68>
   c1edc:	2201      	movs	r2, #1
   c1ede:	46d1      	mov	r9, sl
   c1ee0:	4610      	mov	r0, r2
   c1ee2:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   c1ee6:	921d      	str	r2, [sp, #116]	; 0x74
   c1ee8:	911c      	str	r1, [sp, #112]	; 0x70
   c1eea:	4601      	mov	r1, r0
   c1eec:	f109 0908 	add.w	r9, r9, #8
   c1ef0:	3001      	adds	r0, #1
   c1ef2:	e508      	b.n	c1906 <_vfiprintf_r+0x35e>
   c1ef4:	9b02      	ldr	r3, [sp, #8]
   c1ef6:	2a01      	cmp	r2, #1
   c1ef8:	f000 8097 	beq.w	c202a <_vfiprintf_r+0xa82>
   c1efc:	2a02      	cmp	r2, #2
   c1efe:	d10d      	bne.n	c1f1c <_vfiprintf_r+0x974>
   c1f00:	9302      	str	r3, [sp, #8]
   c1f02:	2600      	movs	r6, #0
   c1f04:	2700      	movs	r7, #0
   c1f06:	e5b2      	b.n	c1a6e <_vfiprintf_r+0x4c6>
   c1f08:	aa0f      	add	r2, sp, #60	; 0x3c
   c1f0a:	9904      	ldr	r1, [sp, #16]
   c1f0c:	9806      	ldr	r0, [sp, #24]
   c1f0e:	f7ff fb0b 	bl	c1528 <__sprint_r.part.0>
   c1f12:	2800      	cmp	r0, #0
   c1f14:	d0c9      	beq.n	c1eaa <_vfiprintf_r+0x902>
   c1f16:	f8dd b010 	ldr.w	fp, [sp, #16]
   c1f1a:	e797      	b.n	c1e4c <_vfiprintf_r+0x8a4>
   c1f1c:	2600      	movs	r6, #0
   c1f1e:	2700      	movs	r7, #0
   c1f20:	9302      	str	r3, [sp, #8]
   c1f22:	4651      	mov	r1, sl
   c1f24:	e000      	b.n	c1f28 <_vfiprintf_r+0x980>
   c1f26:	4659      	mov	r1, fp
   c1f28:	08f2      	lsrs	r2, r6, #3
   c1f2a:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   c1f2e:	08f8      	lsrs	r0, r7, #3
   c1f30:	f006 0307 	and.w	r3, r6, #7
   c1f34:	4607      	mov	r7, r0
   c1f36:	4616      	mov	r6, r2
   c1f38:	3330      	adds	r3, #48	; 0x30
   c1f3a:	ea56 0207 	orrs.w	r2, r6, r7
   c1f3e:	f801 3c01 	strb.w	r3, [r1, #-1]
   c1f42:	f101 3bff 	add.w	fp, r1, #4294967295
   c1f46:	d1ee      	bne.n	c1f26 <_vfiprintf_r+0x97e>
   c1f48:	9a02      	ldr	r2, [sp, #8]
   c1f4a:	07d6      	lsls	r6, r2, #31
   c1f4c:	f57f ad9f 	bpl.w	c1a8e <_vfiprintf_r+0x4e6>
   c1f50:	2b30      	cmp	r3, #48	; 0x30
   c1f52:	f43f ad9c 	beq.w	c1a8e <_vfiprintf_r+0x4e6>
   c1f56:	2330      	movs	r3, #48	; 0x30
   c1f58:	3902      	subs	r1, #2
   c1f5a:	f80b 3c01 	strb.w	r3, [fp, #-1]
   c1f5e:	ebaa 0301 	sub.w	r3, sl, r1
   c1f62:	9305      	str	r3, [sp, #20]
   c1f64:	468b      	mov	fp, r1
   c1f66:	e477      	b.n	c1858 <_vfiprintf_r+0x2b0>
   c1f68:	9b03      	ldr	r3, [sp, #12]
   c1f6a:	9a08      	ldr	r2, [sp, #32]
   c1f6c:	428a      	cmp	r2, r1
   c1f6e:	bfac      	ite	ge
   c1f70:	189b      	addge	r3, r3, r2
   c1f72:	185b      	addlt	r3, r3, r1
   c1f74:	9303      	str	r3, [sp, #12]
   c1f76:	e798      	b.n	c1eaa <_vfiprintf_r+0x902>
   c1f78:	2202      	movs	r2, #2
   c1f7a:	e44e      	b.n	c181a <_vfiprintf_r+0x272>
   c1f7c:	2f00      	cmp	r7, #0
   c1f7e:	bf08      	it	eq
   c1f80:	2e0a      	cmpeq	r6, #10
   c1f82:	d351      	bcc.n	c2028 <_vfiprintf_r+0xa80>
   c1f84:	46d3      	mov	fp, sl
   c1f86:	4630      	mov	r0, r6
   c1f88:	4639      	mov	r1, r7
   c1f8a:	220a      	movs	r2, #10
   c1f8c:	2300      	movs	r3, #0
   c1f8e:	f001 feb3 	bl	c3cf8 <__aeabi_uldivmod>
   c1f92:	3230      	adds	r2, #48	; 0x30
   c1f94:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   c1f98:	4630      	mov	r0, r6
   c1f9a:	4639      	mov	r1, r7
   c1f9c:	2300      	movs	r3, #0
   c1f9e:	220a      	movs	r2, #10
   c1fa0:	f001 feaa 	bl	c3cf8 <__aeabi_uldivmod>
   c1fa4:	4606      	mov	r6, r0
   c1fa6:	460f      	mov	r7, r1
   c1fa8:	ea56 0307 	orrs.w	r3, r6, r7
   c1fac:	d1eb      	bne.n	c1f86 <_vfiprintf_r+0x9de>
   c1fae:	e56e      	b.n	c1a8e <_vfiprintf_r+0x4e6>
   c1fb0:	9405      	str	r4, [sp, #20]
   c1fb2:	46d3      	mov	fp, sl
   c1fb4:	e450      	b.n	c1858 <_vfiprintf_r+0x2b0>
   c1fb6:	aa0f      	add	r2, sp, #60	; 0x3c
   c1fb8:	9904      	ldr	r1, [sp, #16]
   c1fba:	9806      	ldr	r0, [sp, #24]
   c1fbc:	f7ff fab4 	bl	c1528 <__sprint_r.part.0>
   c1fc0:	2800      	cmp	r0, #0
   c1fc2:	d1a8      	bne.n	c1f16 <_vfiprintf_r+0x96e>
   c1fc4:	46d1      	mov	r9, sl
   c1fc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c1fc8:	e75e      	b.n	c1e88 <_vfiprintf_r+0x8e0>
   c1fca:	aa0f      	add	r2, sp, #60	; 0x3c
   c1fcc:	9904      	ldr	r1, [sp, #16]
   c1fce:	9806      	ldr	r0, [sp, #24]
   c1fd0:	f7ff faaa 	bl	c1528 <__sprint_r.part.0>
   c1fd4:	2800      	cmp	r0, #0
   c1fd6:	d19e      	bne.n	c1f16 <_vfiprintf_r+0x96e>
   c1fd8:	46d1      	mov	r9, sl
   c1fda:	f7ff bbbb 	b.w	c1754 <_vfiprintf_r+0x1ac>
   c1fde:	bf00      	nop
   c1fe0:	000c40e0 	.word	0x000c40e0
   c1fe4:	000c40d0 	.word	0x000c40d0
   c1fe8:	3104      	adds	r1, #4
   c1fea:	6816      	ldr	r6, [r2, #0]
   c1fec:	2700      	movs	r7, #0
   c1fee:	2201      	movs	r2, #1
   c1ff0:	9107      	str	r1, [sp, #28]
   c1ff2:	e412      	b.n	c181a <_vfiprintf_r+0x272>
   c1ff4:	9807      	ldr	r0, [sp, #28]
   c1ff6:	2700      	movs	r7, #0
   c1ff8:	4601      	mov	r1, r0
   c1ffa:	3104      	adds	r1, #4
   c1ffc:	6806      	ldr	r6, [r0, #0]
   c1ffe:	9107      	str	r1, [sp, #28]
   c2000:	e40b      	b.n	c181a <_vfiprintf_r+0x272>
   c2002:	680e      	ldr	r6, [r1, #0]
   c2004:	3104      	adds	r1, #4
   c2006:	9107      	str	r1, [sp, #28]
   c2008:	2700      	movs	r7, #0
   c200a:	e592      	b.n	c1b32 <_vfiprintf_r+0x58a>
   c200c:	6816      	ldr	r6, [r2, #0]
   c200e:	3204      	adds	r2, #4
   c2010:	17f7      	asrs	r7, r6, #31
   c2012:	9207      	str	r2, [sp, #28]
   c2014:	4630      	mov	r0, r6
   c2016:	4639      	mov	r1, r7
   c2018:	e512      	b.n	c1a40 <_vfiprintf_r+0x498>
   c201a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   c201e:	f000 fe75 	bl	c2d0c <__retarget_lock_release_recursive>
   c2022:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   c2026:	e71b      	b.n	c1e60 <_vfiprintf_r+0x8b8>
   c2028:	9b02      	ldr	r3, [sp, #8]
   c202a:	9302      	str	r3, [sp, #8]
   c202c:	2301      	movs	r3, #1
   c202e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   c2032:	3630      	adds	r6, #48	; 0x30
   c2034:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   c2038:	9305      	str	r3, [sp, #20]
   c203a:	e40d      	b.n	c1858 <_vfiprintf_r+0x2b0>
   c203c:	aa0f      	add	r2, sp, #60	; 0x3c
   c203e:	9904      	ldr	r1, [sp, #16]
   c2040:	9806      	ldr	r0, [sp, #24]
   c2042:	f7ff fa71 	bl	c1528 <__sprint_r.part.0>
   c2046:	2800      	cmp	r0, #0
   c2048:	f47f af65 	bne.w	c1f16 <_vfiprintf_r+0x96e>
   c204c:	9910      	ldr	r1, [sp, #64]	; 0x40
   c204e:	46d1      	mov	r9, sl
   c2050:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c2052:	1c48      	adds	r0, r1, #1
   c2054:	e457      	b.n	c1906 <_vfiprintf_r+0x35e>
   c2056:	aa0f      	add	r2, sp, #60	; 0x3c
   c2058:	9904      	ldr	r1, [sp, #16]
   c205a:	9806      	ldr	r0, [sp, #24]
   c205c:	f7ff fa64 	bl	c1528 <__sprint_r.part.0>
   c2060:	2800      	cmp	r0, #0
   c2062:	f47f af58 	bne.w	c1f16 <_vfiprintf_r+0x96e>
   c2066:	9910      	ldr	r1, [sp, #64]	; 0x40
   c2068:	46d1      	mov	r9, sl
   c206a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c206c:	1c48      	adds	r0, r1, #1
   c206e:	e644      	b.n	c1cfa <_vfiprintf_r+0x752>
   c2070:	2a00      	cmp	r2, #0
   c2072:	f040 8087 	bne.w	c2184 <_vfiprintf_r+0xbdc>
   c2076:	2001      	movs	r0, #1
   c2078:	4611      	mov	r1, r2
   c207a:	46d1      	mov	r9, sl
   c207c:	e641      	b.n	c1d02 <_vfiprintf_r+0x75a>
   c207e:	aa0f      	add	r2, sp, #60	; 0x3c
   c2080:	9904      	ldr	r1, [sp, #16]
   c2082:	9806      	ldr	r0, [sp, #24]
   c2084:	f7ff fa50 	bl	c1528 <__sprint_r.part.0>
   c2088:	2800      	cmp	r0, #0
   c208a:	f47f af44 	bne.w	c1f16 <_vfiprintf_r+0x96e>
   c208e:	9810      	ldr	r0, [sp, #64]	; 0x40
   c2090:	46d1      	mov	r9, sl
   c2092:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c2094:	3001      	adds	r0, #1
   c2096:	e668      	b.n	c1d6a <_vfiprintf_r+0x7c2>
   c2098:	46cb      	mov	fp, r9
   c209a:	e6d7      	b.n	c1e4c <_vfiprintf_r+0x8a4>
   c209c:	9d07      	ldr	r5, [sp, #28]
   c209e:	3507      	adds	r5, #7
   c20a0:	f025 0507 	bic.w	r5, r5, #7
   c20a4:	f105 0208 	add.w	r2, r5, #8
   c20a8:	e9d5 0100 	ldrd	r0, r1, [r5]
   c20ac:	9207      	str	r2, [sp, #28]
   c20ae:	4606      	mov	r6, r0
   c20b0:	460f      	mov	r7, r1
   c20b2:	e4c5      	b.n	c1a40 <_vfiprintf_r+0x498>
   c20b4:	9d07      	ldr	r5, [sp, #28]
   c20b6:	3507      	adds	r5, #7
   c20b8:	f025 0207 	bic.w	r2, r5, #7
   c20bc:	f102 0108 	add.w	r1, r2, #8
   c20c0:	e9d2 6700 	ldrd	r6, r7, [r2]
   c20c4:	9107      	str	r1, [sp, #28]
   c20c6:	2201      	movs	r2, #1
   c20c8:	f7ff bba7 	b.w	c181a <_vfiprintf_r+0x272>
   c20cc:	9d07      	ldr	r5, [sp, #28]
   c20ce:	3507      	adds	r5, #7
   c20d0:	f025 0207 	bic.w	r2, r5, #7
   c20d4:	f102 0108 	add.w	r1, r2, #8
   c20d8:	e9d2 6700 	ldrd	r6, r7, [r2]
   c20dc:	9107      	str	r1, [sp, #28]
   c20de:	2200      	movs	r2, #0
   c20e0:	f7ff bb9b 	b.w	c181a <_vfiprintf_r+0x272>
   c20e4:	9d07      	ldr	r5, [sp, #28]
   c20e6:	3507      	adds	r5, #7
   c20e8:	f025 0107 	bic.w	r1, r5, #7
   c20ec:	f101 0008 	add.w	r0, r1, #8
   c20f0:	9007      	str	r0, [sp, #28]
   c20f2:	e9d1 6700 	ldrd	r6, r7, [r1]
   c20f6:	e51c      	b.n	c1b32 <_vfiprintf_r+0x58a>
   c20f8:	46d3      	mov	fp, sl
   c20fa:	f7ff bbad 	b.w	c1858 <_vfiprintf_r+0x2b0>
   c20fe:	252d      	movs	r5, #45	; 0x2d
   c2100:	4276      	negs	r6, r6
   c2102:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   c2106:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   c210a:	2201      	movs	r2, #1
   c210c:	f7ff bb8a 	b.w	c1824 <_vfiprintf_r+0x27c>
   c2110:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c2112:	b9b3      	cbnz	r3, c2142 <_vfiprintf_r+0xb9a>
   c2114:	4611      	mov	r1, r2
   c2116:	2001      	movs	r0, #1
   c2118:	46d1      	mov	r9, sl
   c211a:	e5f2      	b.n	c1d02 <_vfiprintf_r+0x75a>
   c211c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   c2120:	f000 fdf4 	bl	c2d0c <__retarget_lock_release_recursive>
   c2124:	f04f 33ff 	mov.w	r3, #4294967295
   c2128:	9303      	str	r3, [sp, #12]
   c212a:	f7ff bb4c 	b.w	c17c6 <_vfiprintf_r+0x21e>
   c212e:	aa0f      	add	r2, sp, #60	; 0x3c
   c2130:	9904      	ldr	r1, [sp, #16]
   c2132:	9806      	ldr	r0, [sp, #24]
   c2134:	f7ff f9f8 	bl	c1528 <__sprint_r.part.0>
   c2138:	2800      	cmp	r0, #0
   c213a:	f47f aeec 	bne.w	c1f16 <_vfiprintf_r+0x96e>
   c213e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c2140:	e6aa      	b.n	c1e98 <_vfiprintf_r+0x8f0>
   c2142:	2202      	movs	r2, #2
   c2144:	ab0e      	add	r3, sp, #56	; 0x38
   c2146:	921d      	str	r2, [sp, #116]	; 0x74
   c2148:	931c      	str	r3, [sp, #112]	; 0x70
   c214a:	2001      	movs	r0, #1
   c214c:	46d1      	mov	r9, sl
   c214e:	e5d0      	b.n	c1cf2 <_vfiprintf_r+0x74a>
   c2150:	4d34      	ldr	r5, [pc, #208]	; (c2224 <_vfiprintf_r+0xc7c>)
   c2152:	e5fd      	b.n	c1d50 <_vfiprintf_r+0x7a8>
   c2154:	9a07      	ldr	r2, [sp, #28]
   c2156:	4613      	mov	r3, r2
   c2158:	3304      	adds	r3, #4
   c215a:	9307      	str	r3, [sp, #28]
   c215c:	9b03      	ldr	r3, [sp, #12]
   c215e:	6811      	ldr	r1, [r2, #0]
   c2160:	17dd      	asrs	r5, r3, #31
   c2162:	461a      	mov	r2, r3
   c2164:	462b      	mov	r3, r5
   c2166:	e9c1 2300 	strd	r2, r3, [r1]
   c216a:	f7ff ba5a 	b.w	c1622 <_vfiprintf_r+0x7a>
   c216e:	4658      	mov	r0, fp
   c2170:	9507      	str	r5, [sp, #28]
   c2172:	9302      	str	r3, [sp, #8]
   c2174:	f001 fbc6 	bl	c3904 <strlen>
   c2178:	2400      	movs	r4, #0
   c217a:	9005      	str	r0, [sp, #20]
   c217c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   c2180:	f7ff bb6a 	b.w	c1858 <_vfiprintf_r+0x2b0>
   c2184:	aa0f      	add	r2, sp, #60	; 0x3c
   c2186:	9904      	ldr	r1, [sp, #16]
   c2188:	9806      	ldr	r0, [sp, #24]
   c218a:	f7ff f9cd 	bl	c1528 <__sprint_r.part.0>
   c218e:	2800      	cmp	r0, #0
   c2190:	f47f aec1 	bne.w	c1f16 <_vfiprintf_r+0x96e>
   c2194:	9910      	ldr	r1, [sp, #64]	; 0x40
   c2196:	46d1      	mov	r9, sl
   c2198:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c219a:	1c48      	adds	r0, r1, #1
   c219c:	e5b1      	b.n	c1d02 <_vfiprintf_r+0x75a>
   c219e:	9910      	ldr	r1, [sp, #64]	; 0x40
   c21a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   c21a2:	3101      	adds	r1, #1
   c21a4:	4e20      	ldr	r6, [pc, #128]	; (c2228 <_vfiprintf_r+0xc80>)
   c21a6:	f7ff bb9c 	b.w	c18e2 <_vfiprintf_r+0x33a>
   c21aa:	2c06      	cmp	r4, #6
   c21ac:	bf28      	it	cs
   c21ae:	2406      	movcs	r4, #6
   c21b0:	9507      	str	r5, [sp, #28]
   c21b2:	9405      	str	r4, [sp, #20]
   c21b4:	9401      	str	r4, [sp, #4]
   c21b6:	f8df b074 	ldr.w	fp, [pc, #116]	; c222c <_vfiprintf_r+0xc84>
   c21ba:	e4e3      	b.n	c1b84 <_vfiprintf_r+0x5dc>
   c21bc:	9810      	ldr	r0, [sp, #64]	; 0x40
   c21be:	4e1a      	ldr	r6, [pc, #104]	; (c2228 <_vfiprintf_r+0xc80>)
   c21c0:	3001      	adds	r0, #1
   c21c2:	e60e      	b.n	c1de2 <_vfiprintf_r+0x83a>
   c21c4:	4686      	mov	lr, r0
   c21c6:	4d17      	ldr	r5, [pc, #92]	; (c2224 <_vfiprintf_r+0xc7c>)
   c21c8:	f7ff bbe2 	b.w	c1990 <_vfiprintf_r+0x3e8>
   c21cc:	9405      	str	r4, [sp, #20]
   c21ce:	9507      	str	r5, [sp, #28]
   c21d0:	9302      	str	r3, [sp, #8]
   c21d2:	4604      	mov	r4, r0
   c21d4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   c21d8:	f7ff bb3e 	b.w	c1858 <_vfiprintf_r+0x2b0>
   c21dc:	9806      	ldr	r0, [sp, #24]
   c21de:	aa0f      	add	r2, sp, #60	; 0x3c
   c21e0:	4659      	mov	r1, fp
   c21e2:	f7ff f9a1 	bl	c1528 <__sprint_r.part.0>
   c21e6:	2800      	cmp	r0, #0
   c21e8:	f43f ae2e 	beq.w	c1e48 <_vfiprintf_r+0x8a0>
   c21ec:	e62e      	b.n	c1e4c <_vfiprintf_r+0x8a4>
   c21ee:	9907      	ldr	r1, [sp, #28]
   c21f0:	f898 2001 	ldrb.w	r2, [r8, #1]
   c21f4:	680c      	ldr	r4, [r1, #0]
   c21f6:	3104      	adds	r1, #4
   c21f8:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   c21fc:	46b8      	mov	r8, r7
   c21fe:	9107      	str	r1, [sp, #28]
   c2200:	f7ff ba44 	b.w	c168c <_vfiprintf_r+0xe4>
   c2204:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   c2208:	e4a7      	b.n	c1b5a <_vfiprintf_r+0x5b2>
   c220a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   c220e:	e521      	b.n	c1c54 <_vfiprintf_r+0x6ac>
   c2210:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   c2214:	e47c      	b.n	c1b10 <_vfiprintf_r+0x568>
   c2216:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   c221a:	e43f      	b.n	c1a9c <_vfiprintf_r+0x4f4>
   c221c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   c2220:	f7ff bbfa 	b.w	c1a18 <_vfiprintf_r+0x470>
   c2224:	000c40e0 	.word	0x000c40e0
   c2228:	000c40d0 	.word	0x000c40d0
   c222c:	000c40c8 	.word	0x000c40c8

000c2230 <__sbprintf>:
   c2230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c2234:	460c      	mov	r4, r1
   c2236:	f04f 0e00 	mov.w	lr, #0
   c223a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   c223e:	4606      	mov	r6, r0
   c2240:	4617      	mov	r7, r2
   c2242:	4698      	mov	r8, r3
   c2244:	6e62      	ldr	r2, [r4, #100]	; 0x64
   c2246:	89e3      	ldrh	r3, [r4, #14]
   c2248:	8989      	ldrh	r1, [r1, #12]
   c224a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   c224e:	f021 0102 	bic.w	r1, r1, #2
   c2252:	9219      	str	r2, [sp, #100]	; 0x64
   c2254:	f8ad 300e 	strh.w	r3, [sp, #14]
   c2258:	69e2      	ldr	r2, [r4, #28]
   c225a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c225c:	f8ad 100c 	strh.w	r1, [sp, #12]
   c2260:	a816      	add	r0, sp, #88	; 0x58
   c2262:	a91a      	add	r1, sp, #104	; 0x68
   c2264:	f8cd e018 	str.w	lr, [sp, #24]
   c2268:	9207      	str	r2, [sp, #28]
   c226a:	9309      	str	r3, [sp, #36]	; 0x24
   c226c:	9100      	str	r1, [sp, #0]
   c226e:	9104      	str	r1, [sp, #16]
   c2270:	9502      	str	r5, [sp, #8]
   c2272:	9505      	str	r5, [sp, #20]
   c2274:	f000 fd44 	bl	c2d00 <__retarget_lock_init_recursive>
   c2278:	4643      	mov	r3, r8
   c227a:	463a      	mov	r2, r7
   c227c:	4669      	mov	r1, sp
   c227e:	4630      	mov	r0, r6
   c2280:	f7ff f992 	bl	c15a8 <_vfiprintf_r>
   c2284:	1e05      	subs	r5, r0, #0
   c2286:	db07      	blt.n	c2298 <__sbprintf+0x68>
   c2288:	4630      	mov	r0, r6
   c228a:	4669      	mov	r1, sp
   c228c:	f000 f924 	bl	c24d8 <_fflush_r>
   c2290:	2800      	cmp	r0, #0
   c2292:	bf18      	it	ne
   c2294:	f04f 35ff 	movne.w	r5, #4294967295
   c2298:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   c229c:	065b      	lsls	r3, r3, #25
   c229e:	d503      	bpl.n	c22a8 <__sbprintf+0x78>
   c22a0:	89a3      	ldrh	r3, [r4, #12]
   c22a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   c22a6:	81a3      	strh	r3, [r4, #12]
   c22a8:	9816      	ldr	r0, [sp, #88]	; 0x58
   c22aa:	f000 fd2b 	bl	c2d04 <__retarget_lock_close_recursive>
   c22ae:	4628      	mov	r0, r5
   c22b0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   c22b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c22b8 <__swsetup_r>:
   c22b8:	b538      	push	{r3, r4, r5, lr}
   c22ba:	4b30      	ldr	r3, [pc, #192]	; (c237c <__swsetup_r+0xc4>)
   c22bc:	4605      	mov	r5, r0
   c22be:	6818      	ldr	r0, [r3, #0]
   c22c0:	460c      	mov	r4, r1
   c22c2:	b110      	cbz	r0, c22ca <__swsetup_r+0x12>
   c22c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   c22c6:	2b00      	cmp	r3, #0
   c22c8:	d038      	beq.n	c233c <__swsetup_r+0x84>
   c22ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   c22ce:	b293      	uxth	r3, r2
   c22d0:	0718      	lsls	r0, r3, #28
   c22d2:	d50c      	bpl.n	c22ee <__swsetup_r+0x36>
   c22d4:	6920      	ldr	r0, [r4, #16]
   c22d6:	b1a8      	cbz	r0, c2304 <__swsetup_r+0x4c>
   c22d8:	f013 0201 	ands.w	r2, r3, #1
   c22dc:	d01e      	beq.n	c231c <__swsetup_r+0x64>
   c22de:	2200      	movs	r2, #0
   c22e0:	6963      	ldr	r3, [r4, #20]
   c22e2:	60a2      	str	r2, [r4, #8]
   c22e4:	425b      	negs	r3, r3
   c22e6:	61a3      	str	r3, [r4, #24]
   c22e8:	b1f0      	cbz	r0, c2328 <__swsetup_r+0x70>
   c22ea:	2000      	movs	r0, #0
   c22ec:	bd38      	pop	{r3, r4, r5, pc}
   c22ee:	06d9      	lsls	r1, r3, #27
   c22f0:	d53b      	bpl.n	c236a <__swsetup_r+0xb2>
   c22f2:	0758      	lsls	r0, r3, #29
   c22f4:	d425      	bmi.n	c2342 <__swsetup_r+0x8a>
   c22f6:	6920      	ldr	r0, [r4, #16]
   c22f8:	f042 0308 	orr.w	r3, r2, #8
   c22fc:	81a3      	strh	r3, [r4, #12]
   c22fe:	b29b      	uxth	r3, r3
   c2300:	2800      	cmp	r0, #0
   c2302:	d1e9      	bne.n	c22d8 <__swsetup_r+0x20>
   c2304:	f403 7220 	and.w	r2, r3, #640	; 0x280
   c2308:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   c230c:	d0e4      	beq.n	c22d8 <__swsetup_r+0x20>
   c230e:	4628      	mov	r0, r5
   c2310:	4621      	mov	r1, r4
   c2312:	f000 fd2b 	bl	c2d6c <__smakebuf_r>
   c2316:	89a3      	ldrh	r3, [r4, #12]
   c2318:	6920      	ldr	r0, [r4, #16]
   c231a:	e7dd      	b.n	c22d8 <__swsetup_r+0x20>
   c231c:	0799      	lsls	r1, r3, #30
   c231e:	bf58      	it	pl
   c2320:	6962      	ldrpl	r2, [r4, #20]
   c2322:	60a2      	str	r2, [r4, #8]
   c2324:	2800      	cmp	r0, #0
   c2326:	d1e0      	bne.n	c22ea <__swsetup_r+0x32>
   c2328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   c232c:	061a      	lsls	r2, r3, #24
   c232e:	d5dd      	bpl.n	c22ec <__swsetup_r+0x34>
   c2330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   c2334:	81a3      	strh	r3, [r4, #12]
   c2336:	f04f 30ff 	mov.w	r0, #4294967295
   c233a:	bd38      	pop	{r3, r4, r5, pc}
   c233c:	f000 f924 	bl	c2588 <__sinit>
   c2340:	e7c3      	b.n	c22ca <__swsetup_r+0x12>
   c2342:	6b21      	ldr	r1, [r4, #48]	; 0x30
   c2344:	b151      	cbz	r1, c235c <__swsetup_r+0xa4>
   c2346:	f104 0340 	add.w	r3, r4, #64	; 0x40
   c234a:	4299      	cmp	r1, r3
   c234c:	d004      	beq.n	c2358 <__swsetup_r+0xa0>
   c234e:	4628      	mov	r0, r5
   c2350:	f000 fa40 	bl	c27d4 <_free_r>
   c2354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   c2358:	2300      	movs	r3, #0
   c235a:	6323      	str	r3, [r4, #48]	; 0x30
   c235c:	2300      	movs	r3, #0
   c235e:	6920      	ldr	r0, [r4, #16]
   c2360:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   c2364:	e884 0009 	stmia.w	r4, {r0, r3}
   c2368:	e7c6      	b.n	c22f8 <__swsetup_r+0x40>
   c236a:	2309      	movs	r3, #9
   c236c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   c2370:	602b      	str	r3, [r5, #0]
   c2372:	f04f 30ff 	mov.w	r0, #4294967295
   c2376:	81a2      	strh	r2, [r4, #12]
   c2378:	bd38      	pop	{r3, r4, r5, pc}
   c237a:	bf00      	nop
   c237c:	200701c0 	.word	0x200701c0

000c2380 <register_fini>:
   c2380:	4b02      	ldr	r3, [pc, #8]	; (c238c <register_fini+0xc>)
   c2382:	b113      	cbz	r3, c238a <register_fini+0xa>
   c2384:	4802      	ldr	r0, [pc, #8]	; (c2390 <register_fini+0x10>)
   c2386:	f000 b805 	b.w	c2394 <atexit>
   c238a:	4770      	bx	lr
   c238c:	00000000 	.word	0x00000000
   c2390:	000c2601 	.word	0x000c2601

000c2394 <atexit>:
   c2394:	2300      	movs	r3, #0
   c2396:	4601      	mov	r1, r0
   c2398:	461a      	mov	r2, r3
   c239a:	4618      	mov	r0, r3
   c239c:	f001 bb84 	b.w	c3aa8 <__register_exitproc>

000c23a0 <__sflush_r>:
   c23a0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   c23a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c23a8:	b29a      	uxth	r2, r3
   c23aa:	460d      	mov	r5, r1
   c23ac:	0711      	lsls	r1, r2, #28
   c23ae:	4680      	mov	r8, r0
   c23b0:	d43a      	bmi.n	c2428 <__sflush_r+0x88>
   c23b2:	686a      	ldr	r2, [r5, #4]
   c23b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   c23b8:	2a00      	cmp	r2, #0
   c23ba:	81ab      	strh	r3, [r5, #12]
   c23bc:	dd70      	ble.n	c24a0 <__sflush_r+0x100>
   c23be:	6aac      	ldr	r4, [r5, #40]	; 0x28
   c23c0:	2c00      	cmp	r4, #0
   c23c2:	d04a      	beq.n	c245a <__sflush_r+0xba>
   c23c4:	2200      	movs	r2, #0
   c23c6:	b29b      	uxth	r3, r3
   c23c8:	f8d8 6000 	ldr.w	r6, [r8]
   c23cc:	f8c8 2000 	str.w	r2, [r8]
   c23d0:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   c23d4:	d068      	beq.n	c24a8 <__sflush_r+0x108>
   c23d6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   c23d8:	075f      	lsls	r7, r3, #29
   c23da:	d505      	bpl.n	c23e8 <__sflush_r+0x48>
   c23dc:	6869      	ldr	r1, [r5, #4]
   c23de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   c23e0:	1a52      	subs	r2, r2, r1
   c23e2:	b10b      	cbz	r3, c23e8 <__sflush_r+0x48>
   c23e4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   c23e6:	1ad2      	subs	r2, r2, r3
   c23e8:	2300      	movs	r3, #0
   c23ea:	69e9      	ldr	r1, [r5, #28]
   c23ec:	4640      	mov	r0, r8
   c23ee:	47a0      	blx	r4
   c23f0:	1c44      	adds	r4, r0, #1
   c23f2:	d03d      	beq.n	c2470 <__sflush_r+0xd0>
   c23f4:	2100      	movs	r1, #0
   c23f6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   c23fa:	692a      	ldr	r2, [r5, #16]
   c23fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   c2400:	81ab      	strh	r3, [r5, #12]
   c2402:	04db      	lsls	r3, r3, #19
   c2404:	6069      	str	r1, [r5, #4]
   c2406:	602a      	str	r2, [r5, #0]
   c2408:	d448      	bmi.n	c249c <__sflush_r+0xfc>
   c240a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   c240c:	f8c8 6000 	str.w	r6, [r8]
   c2410:	b319      	cbz	r1, c245a <__sflush_r+0xba>
   c2412:	f105 0340 	add.w	r3, r5, #64	; 0x40
   c2416:	4299      	cmp	r1, r3
   c2418:	d002      	beq.n	c2420 <__sflush_r+0x80>
   c241a:	4640      	mov	r0, r8
   c241c:	f000 f9da 	bl	c27d4 <_free_r>
   c2420:	2000      	movs	r0, #0
   c2422:	6328      	str	r0, [r5, #48]	; 0x30
   c2424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2428:	692e      	ldr	r6, [r5, #16]
   c242a:	b1b6      	cbz	r6, c245a <__sflush_r+0xba>
   c242c:	0791      	lsls	r1, r2, #30
   c242e:	bf18      	it	ne
   c2430:	2300      	movne	r3, #0
   c2432:	682c      	ldr	r4, [r5, #0]
   c2434:	bf08      	it	eq
   c2436:	696b      	ldreq	r3, [r5, #20]
   c2438:	602e      	str	r6, [r5, #0]
   c243a:	1ba4      	subs	r4, r4, r6
   c243c:	60ab      	str	r3, [r5, #8]
   c243e:	e00a      	b.n	c2456 <__sflush_r+0xb6>
   c2440:	4623      	mov	r3, r4
   c2442:	4632      	mov	r2, r6
   c2444:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   c2446:	69e9      	ldr	r1, [r5, #28]
   c2448:	4640      	mov	r0, r8
   c244a:	47b8      	blx	r7
   c244c:	2800      	cmp	r0, #0
   c244e:	eba4 0400 	sub.w	r4, r4, r0
   c2452:	4406      	add	r6, r0
   c2454:	dd04      	ble.n	c2460 <__sflush_r+0xc0>
   c2456:	2c00      	cmp	r4, #0
   c2458:	dcf2      	bgt.n	c2440 <__sflush_r+0xa0>
   c245a:	2000      	movs	r0, #0
   c245c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2460:	89ab      	ldrh	r3, [r5, #12]
   c2462:	f04f 30ff 	mov.w	r0, #4294967295
   c2466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   c246a:	81ab      	strh	r3, [r5, #12]
   c246c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2470:	f8d8 4000 	ldr.w	r4, [r8]
   c2474:	2c1d      	cmp	r4, #29
   c2476:	d8f3      	bhi.n	c2460 <__sflush_r+0xc0>
   c2478:	4b16      	ldr	r3, [pc, #88]	; (c24d4 <__sflush_r+0x134>)
   c247a:	40e3      	lsrs	r3, r4
   c247c:	43db      	mvns	r3, r3
   c247e:	f013 0301 	ands.w	r3, r3, #1
   c2482:	d1ed      	bne.n	c2460 <__sflush_r+0xc0>
   c2484:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   c2488:	6929      	ldr	r1, [r5, #16]
   c248a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   c248e:	81aa      	strh	r2, [r5, #12]
   c2490:	04d2      	lsls	r2, r2, #19
   c2492:	606b      	str	r3, [r5, #4]
   c2494:	6029      	str	r1, [r5, #0]
   c2496:	d5b8      	bpl.n	c240a <__sflush_r+0x6a>
   c2498:	2c00      	cmp	r4, #0
   c249a:	d1b6      	bne.n	c240a <__sflush_r+0x6a>
   c249c:	6528      	str	r0, [r5, #80]	; 0x50
   c249e:	e7b4      	b.n	c240a <__sflush_r+0x6a>
   c24a0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   c24a2:	2a00      	cmp	r2, #0
   c24a4:	dc8b      	bgt.n	c23be <__sflush_r+0x1e>
   c24a6:	e7d8      	b.n	c245a <__sflush_r+0xba>
   c24a8:	2301      	movs	r3, #1
   c24aa:	69e9      	ldr	r1, [r5, #28]
   c24ac:	4640      	mov	r0, r8
   c24ae:	47a0      	blx	r4
   c24b0:	1c43      	adds	r3, r0, #1
   c24b2:	4602      	mov	r2, r0
   c24b4:	d002      	beq.n	c24bc <__sflush_r+0x11c>
   c24b6:	89ab      	ldrh	r3, [r5, #12]
   c24b8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   c24ba:	e78d      	b.n	c23d8 <__sflush_r+0x38>
   c24bc:	f8d8 3000 	ldr.w	r3, [r8]
   c24c0:	2b00      	cmp	r3, #0
   c24c2:	d0f8      	beq.n	c24b6 <__sflush_r+0x116>
   c24c4:	2b1d      	cmp	r3, #29
   c24c6:	d001      	beq.n	c24cc <__sflush_r+0x12c>
   c24c8:	2b16      	cmp	r3, #22
   c24ca:	d1c9      	bne.n	c2460 <__sflush_r+0xc0>
   c24cc:	f8c8 6000 	str.w	r6, [r8]
   c24d0:	e7c3      	b.n	c245a <__sflush_r+0xba>
   c24d2:	bf00      	nop
   c24d4:	20400001 	.word	0x20400001

000c24d8 <_fflush_r>:
   c24d8:	b538      	push	{r3, r4, r5, lr}
   c24da:	460d      	mov	r5, r1
   c24dc:	4604      	mov	r4, r0
   c24de:	b108      	cbz	r0, c24e4 <_fflush_r+0xc>
   c24e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   c24e2:	b1bb      	cbz	r3, c2514 <_fflush_r+0x3c>
   c24e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   c24e8:	b188      	cbz	r0, c250e <_fflush_r+0x36>
   c24ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   c24ec:	07db      	lsls	r3, r3, #31
   c24ee:	d401      	bmi.n	c24f4 <_fflush_r+0x1c>
   c24f0:	0581      	lsls	r1, r0, #22
   c24f2:	d517      	bpl.n	c2524 <_fflush_r+0x4c>
   c24f4:	4620      	mov	r0, r4
   c24f6:	4629      	mov	r1, r5
   c24f8:	f7ff ff52 	bl	c23a0 <__sflush_r>
   c24fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   c24fe:	4604      	mov	r4, r0
   c2500:	07da      	lsls	r2, r3, #31
   c2502:	d402      	bmi.n	c250a <_fflush_r+0x32>
   c2504:	89ab      	ldrh	r3, [r5, #12]
   c2506:	059b      	lsls	r3, r3, #22
   c2508:	d507      	bpl.n	c251a <_fflush_r+0x42>
   c250a:	4620      	mov	r0, r4
   c250c:	bd38      	pop	{r3, r4, r5, pc}
   c250e:	4604      	mov	r4, r0
   c2510:	4620      	mov	r0, r4
   c2512:	bd38      	pop	{r3, r4, r5, pc}
   c2514:	f000 f838 	bl	c2588 <__sinit>
   c2518:	e7e4      	b.n	c24e4 <_fflush_r+0xc>
   c251a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   c251c:	f000 fbf6 	bl	c2d0c <__retarget_lock_release_recursive>
   c2520:	4620      	mov	r0, r4
   c2522:	bd38      	pop	{r3, r4, r5, pc}
   c2524:	6da8      	ldr	r0, [r5, #88]	; 0x58
   c2526:	f000 fbef 	bl	c2d08 <__retarget_lock_acquire_recursive>
   c252a:	e7e3      	b.n	c24f4 <_fflush_r+0x1c>

000c252c <_cleanup_r>:
   c252c:	4901      	ldr	r1, [pc, #4]	; (c2534 <_cleanup_r+0x8>)
   c252e:	f000 bbb1 	b.w	c2c94 <_fwalk_reent>
   c2532:	bf00      	nop
   c2534:	000c3b91 	.word	0x000c3b91

000c2538 <std.isra.0>:
   c2538:	2300      	movs	r3, #0
   c253a:	b510      	push	{r4, lr}
   c253c:	4604      	mov	r4, r0
   c253e:	8181      	strh	r1, [r0, #12]
   c2540:	81c2      	strh	r2, [r0, #14]
   c2542:	6003      	str	r3, [r0, #0]
   c2544:	6043      	str	r3, [r0, #4]
   c2546:	6083      	str	r3, [r0, #8]
   c2548:	6643      	str	r3, [r0, #100]	; 0x64
   c254a:	6103      	str	r3, [r0, #16]
   c254c:	6143      	str	r3, [r0, #20]
   c254e:	6183      	str	r3, [r0, #24]
   c2550:	4619      	mov	r1, r3
   c2552:	2208      	movs	r2, #8
   c2554:	305c      	adds	r0, #92	; 0x5c
   c2556:	f7fe fec9 	bl	c12ec <memset>
   c255a:	4807      	ldr	r0, [pc, #28]	; (c2578 <std.isra.0+0x40>)
   c255c:	4907      	ldr	r1, [pc, #28]	; (c257c <std.isra.0+0x44>)
   c255e:	4a08      	ldr	r2, [pc, #32]	; (c2580 <std.isra.0+0x48>)
   c2560:	4b08      	ldr	r3, [pc, #32]	; (c2584 <std.isra.0+0x4c>)
   c2562:	6220      	str	r0, [r4, #32]
   c2564:	61e4      	str	r4, [r4, #28]
   c2566:	6261      	str	r1, [r4, #36]	; 0x24
   c2568:	62a2      	str	r2, [r4, #40]	; 0x28
   c256a:	62e3      	str	r3, [r4, #44]	; 0x2c
   c256c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   c2570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c2574:	f000 bbc4 	b.w	c2d00 <__retarget_lock_init_recursive>
   c2578:	000c387d 	.word	0x000c387d
   c257c:	000c38a1 	.word	0x000c38a1
   c2580:	000c38dd 	.word	0x000c38dd
   c2584:	000c38fd 	.word	0x000c38fd

000c2588 <__sinit>:
   c2588:	b510      	push	{r4, lr}
   c258a:	4604      	mov	r4, r0
   c258c:	4814      	ldr	r0, [pc, #80]	; (c25e0 <__sinit+0x58>)
   c258e:	f000 fbbb 	bl	c2d08 <__retarget_lock_acquire_recursive>
   c2592:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   c2594:	b9fa      	cbnz	r2, c25d6 <__sinit+0x4e>
   c2596:	2003      	movs	r0, #3
   c2598:	4912      	ldr	r1, [pc, #72]	; (c25e4 <__sinit+0x5c>)
   c259a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   c259e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   c25a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   c25a6:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   c25aa:	63e1      	str	r1, [r4, #60]	; 0x3c
   c25ac:	6860      	ldr	r0, [r4, #4]
   c25ae:	2104      	movs	r1, #4
   c25b0:	f7ff ffc2 	bl	c2538 <std.isra.0>
   c25b4:	68a0      	ldr	r0, [r4, #8]
   c25b6:	2201      	movs	r2, #1
   c25b8:	2109      	movs	r1, #9
   c25ba:	f7ff ffbd 	bl	c2538 <std.isra.0>
   c25be:	68e0      	ldr	r0, [r4, #12]
   c25c0:	2202      	movs	r2, #2
   c25c2:	2112      	movs	r1, #18
   c25c4:	f7ff ffb8 	bl	c2538 <std.isra.0>
   c25c8:	2301      	movs	r3, #1
   c25ca:	4805      	ldr	r0, [pc, #20]	; (c25e0 <__sinit+0x58>)
   c25cc:	63a3      	str	r3, [r4, #56]	; 0x38
   c25ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c25d2:	f000 bb9b 	b.w	c2d0c <__retarget_lock_release_recursive>
   c25d6:	4802      	ldr	r0, [pc, #8]	; (c25e0 <__sinit+0x58>)
   c25d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c25dc:	f000 bb96 	b.w	c2d0c <__retarget_lock_release_recursive>
   c25e0:	20070d58 	.word	0x20070d58
   c25e4:	000c252d 	.word	0x000c252d

000c25e8 <__sfp_lock_acquire>:
   c25e8:	4801      	ldr	r0, [pc, #4]	; (c25f0 <__sfp_lock_acquire+0x8>)
   c25ea:	f000 bb8d 	b.w	c2d08 <__retarget_lock_acquire_recursive>
   c25ee:	bf00      	nop
   c25f0:	20070d6c 	.word	0x20070d6c

000c25f4 <__sfp_lock_release>:
   c25f4:	4801      	ldr	r0, [pc, #4]	; (c25fc <__sfp_lock_release+0x8>)
   c25f6:	f000 bb89 	b.w	c2d0c <__retarget_lock_release_recursive>
   c25fa:	bf00      	nop
   c25fc:	20070d6c 	.word	0x20070d6c

000c2600 <__libc_fini_array>:
   c2600:	b538      	push	{r3, r4, r5, lr}
   c2602:	4c0a      	ldr	r4, [pc, #40]	; (c262c <__libc_fini_array+0x2c>)
   c2604:	4d0a      	ldr	r5, [pc, #40]	; (c2630 <__libc_fini_array+0x30>)
   c2606:	1b64      	subs	r4, r4, r5
   c2608:	10a4      	asrs	r4, r4, #2
   c260a:	d00a      	beq.n	c2622 <__libc_fini_array+0x22>
   c260c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   c2610:	3b01      	subs	r3, #1
   c2612:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   c2616:	3c01      	subs	r4, #1
   c2618:	f855 3904 	ldr.w	r3, [r5], #-4
   c261c:	4798      	blx	r3
   c261e:	2c00      	cmp	r4, #0
   c2620:	d1f9      	bne.n	c2616 <__libc_fini_array+0x16>
   c2622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c2626:	f001 bdf7 	b.w	c4218 <_fini>
   c262a:	bf00      	nop
   c262c:	000c4228 	.word	0x000c4228
   c2630:	000c4224 	.word	0x000c4224

000c2634 <__fputwc>:
   c2634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c2638:	b083      	sub	sp, #12
   c263a:	4607      	mov	r7, r0
   c263c:	4688      	mov	r8, r1
   c263e:	4614      	mov	r4, r2
   c2640:	f000 fb50 	bl	c2ce4 <__locale_mb_cur_max>
   c2644:	2801      	cmp	r0, #1
   c2646:	d033      	beq.n	c26b0 <__fputwc+0x7c>
   c2648:	4642      	mov	r2, r8
   c264a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   c264e:	a901      	add	r1, sp, #4
   c2650:	4638      	mov	r0, r7
   c2652:	f001 f9dd 	bl	c3a10 <_wcrtomb_r>
   c2656:	1c42      	adds	r2, r0, #1
   c2658:	4606      	mov	r6, r0
   c265a:	d022      	beq.n	c26a2 <__fputwc+0x6e>
   c265c:	b390      	cbz	r0, c26c4 <__fputwc+0x90>
   c265e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   c2662:	2500      	movs	r5, #0
   c2664:	f10d 0904 	add.w	r9, sp, #4
   c2668:	e008      	b.n	c267c <__fputwc+0x48>
   c266a:	6823      	ldr	r3, [r4, #0]
   c266c:	1c5a      	adds	r2, r3, #1
   c266e:	6022      	str	r2, [r4, #0]
   c2670:	7019      	strb	r1, [r3, #0]
   c2672:	3501      	adds	r5, #1
   c2674:	42b5      	cmp	r5, r6
   c2676:	d225      	bcs.n	c26c4 <__fputwc+0x90>
   c2678:	f815 1009 	ldrb.w	r1, [r5, r9]
   c267c:	68a3      	ldr	r3, [r4, #8]
   c267e:	3b01      	subs	r3, #1
   c2680:	2b00      	cmp	r3, #0
   c2682:	60a3      	str	r3, [r4, #8]
   c2684:	daf1      	bge.n	c266a <__fputwc+0x36>
   c2686:	69a2      	ldr	r2, [r4, #24]
   c2688:	4293      	cmp	r3, r2
   c268a:	db01      	blt.n	c2690 <__fputwc+0x5c>
   c268c:	290a      	cmp	r1, #10
   c268e:	d1ec      	bne.n	c266a <__fputwc+0x36>
   c2690:	4622      	mov	r2, r4
   c2692:	4638      	mov	r0, r7
   c2694:	f001 f964 	bl	c3960 <__swbuf_r>
   c2698:	1c43      	adds	r3, r0, #1
   c269a:	d1ea      	bne.n	c2672 <__fputwc+0x3e>
   c269c:	b003      	add	sp, #12
   c269e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c26a2:	89a3      	ldrh	r3, [r4, #12]
   c26a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   c26a8:	81a3      	strh	r3, [r4, #12]
   c26aa:	b003      	add	sp, #12
   c26ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c26b0:	f108 33ff 	add.w	r3, r8, #4294967295
   c26b4:	2bfe      	cmp	r3, #254	; 0xfe
   c26b6:	d8c7      	bhi.n	c2648 <__fputwc+0x14>
   c26b8:	fa5f f188 	uxtb.w	r1, r8
   c26bc:	4606      	mov	r6, r0
   c26be:	f88d 1004 	strb.w	r1, [sp, #4]
   c26c2:	e7ce      	b.n	c2662 <__fputwc+0x2e>
   c26c4:	4640      	mov	r0, r8
   c26c6:	b003      	add	sp, #12
   c26c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c26cc <_fputwc_r>:
   c26cc:	b530      	push	{r4, r5, lr}
   c26ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
   c26d0:	4614      	mov	r4, r2
   c26d2:	f013 0f01 	tst.w	r3, #1
   c26d6:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   c26da:	b083      	sub	sp, #12
   c26dc:	4605      	mov	r5, r0
   c26de:	b29a      	uxth	r2, r3
   c26e0:	d101      	bne.n	c26e6 <_fputwc_r+0x1a>
   c26e2:	0590      	lsls	r0, r2, #22
   c26e4:	d51c      	bpl.n	c2720 <_fputwc_r+0x54>
   c26e6:	0490      	lsls	r0, r2, #18
   c26e8:	d406      	bmi.n	c26f8 <_fputwc_r+0x2c>
   c26ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
   c26ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   c26f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   c26f4:	81a3      	strh	r3, [r4, #12]
   c26f6:	6662      	str	r2, [r4, #100]	; 0x64
   c26f8:	4628      	mov	r0, r5
   c26fa:	4622      	mov	r2, r4
   c26fc:	f7ff ff9a 	bl	c2634 <__fputwc>
   c2700:	6e63      	ldr	r3, [r4, #100]	; 0x64
   c2702:	4605      	mov	r5, r0
   c2704:	07da      	lsls	r2, r3, #31
   c2706:	d402      	bmi.n	c270e <_fputwc_r+0x42>
   c2708:	89a3      	ldrh	r3, [r4, #12]
   c270a:	059b      	lsls	r3, r3, #22
   c270c:	d502      	bpl.n	c2714 <_fputwc_r+0x48>
   c270e:	4628      	mov	r0, r5
   c2710:	b003      	add	sp, #12
   c2712:	bd30      	pop	{r4, r5, pc}
   c2714:	6da0      	ldr	r0, [r4, #88]	; 0x58
   c2716:	f000 faf9 	bl	c2d0c <__retarget_lock_release_recursive>
   c271a:	4628      	mov	r0, r5
   c271c:	b003      	add	sp, #12
   c271e:	bd30      	pop	{r4, r5, pc}
   c2720:	6da0      	ldr	r0, [r4, #88]	; 0x58
   c2722:	9101      	str	r1, [sp, #4]
   c2724:	f000 faf0 	bl	c2d08 <__retarget_lock_acquire_recursive>
   c2728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   c272c:	9901      	ldr	r1, [sp, #4]
   c272e:	b29a      	uxth	r2, r3
   c2730:	e7d9      	b.n	c26e6 <_fputwc_r+0x1a>
   c2732:	bf00      	nop

000c2734 <_malloc_trim_r>:
   c2734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c2736:	460c      	mov	r4, r1
   c2738:	4f23      	ldr	r7, [pc, #140]	; (c27c8 <_malloc_trim_r+0x94>)
   c273a:	4606      	mov	r6, r0
   c273c:	f000 feca 	bl	c34d4 <__malloc_lock>
   c2740:	68bb      	ldr	r3, [r7, #8]
   c2742:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   c2746:	685d      	ldr	r5, [r3, #4]
   c2748:	310f      	adds	r1, #15
   c274a:	f025 0503 	bic.w	r5, r5, #3
   c274e:	4429      	add	r1, r5
   c2750:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   c2754:	f021 010f 	bic.w	r1, r1, #15
   c2758:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   c275c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   c2760:	db07      	blt.n	c2772 <_malloc_trim_r+0x3e>
   c2762:	2100      	movs	r1, #0
   c2764:	4630      	mov	r0, r6
   c2766:	f001 f877 	bl	c3858 <_sbrk_r>
   c276a:	68bb      	ldr	r3, [r7, #8]
   c276c:	442b      	add	r3, r5
   c276e:	4298      	cmp	r0, r3
   c2770:	d004      	beq.n	c277c <_malloc_trim_r+0x48>
   c2772:	4630      	mov	r0, r6
   c2774:	f000 feb4 	bl	c34e0 <__malloc_unlock>
   c2778:	2000      	movs	r0, #0
   c277a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c277c:	4261      	negs	r1, r4
   c277e:	4630      	mov	r0, r6
   c2780:	f001 f86a 	bl	c3858 <_sbrk_r>
   c2784:	3001      	adds	r0, #1
   c2786:	d00d      	beq.n	c27a4 <_malloc_trim_r+0x70>
   c2788:	4b10      	ldr	r3, [pc, #64]	; (c27cc <_malloc_trim_r+0x98>)
   c278a:	68ba      	ldr	r2, [r7, #8]
   c278c:	6819      	ldr	r1, [r3, #0]
   c278e:	1b2d      	subs	r5, r5, r4
   c2790:	f045 0501 	orr.w	r5, r5, #1
   c2794:	4630      	mov	r0, r6
   c2796:	1b09      	subs	r1, r1, r4
   c2798:	6055      	str	r5, [r2, #4]
   c279a:	6019      	str	r1, [r3, #0]
   c279c:	f000 fea0 	bl	c34e0 <__malloc_unlock>
   c27a0:	2001      	movs	r0, #1
   c27a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c27a4:	2100      	movs	r1, #0
   c27a6:	4630      	mov	r0, r6
   c27a8:	f001 f856 	bl	c3858 <_sbrk_r>
   c27ac:	68ba      	ldr	r2, [r7, #8]
   c27ae:	1a83      	subs	r3, r0, r2
   c27b0:	2b0f      	cmp	r3, #15
   c27b2:	ddde      	ble.n	c2772 <_malloc_trim_r+0x3e>
   c27b4:	4c06      	ldr	r4, [pc, #24]	; (c27d0 <_malloc_trim_r+0x9c>)
   c27b6:	4905      	ldr	r1, [pc, #20]	; (c27cc <_malloc_trim_r+0x98>)
   c27b8:	6824      	ldr	r4, [r4, #0]
   c27ba:	f043 0301 	orr.w	r3, r3, #1
   c27be:	1b00      	subs	r0, r0, r4
   c27c0:	6053      	str	r3, [r2, #4]
   c27c2:	6008      	str	r0, [r1, #0]
   c27c4:	e7d5      	b.n	c2772 <_malloc_trim_r+0x3e>
   c27c6:	bf00      	nop
   c27c8:	20070760 	.word	0x20070760
   c27cc:	20070d0c 	.word	0x20070d0c
   c27d0:	20070b68 	.word	0x20070b68

000c27d4 <_free_r>:
   c27d4:	2900      	cmp	r1, #0
   c27d6:	d044      	beq.n	c2862 <_free_r+0x8e>
   c27d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c27dc:	460d      	mov	r5, r1
   c27de:	4680      	mov	r8, r0
   c27e0:	f000 fe78 	bl	c34d4 <__malloc_lock>
   c27e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
   c27e8:	4969      	ldr	r1, [pc, #420]	; (c2990 <_free_r+0x1bc>)
   c27ea:	f1a5 0408 	sub.w	r4, r5, #8
   c27ee:	f027 0301 	bic.w	r3, r7, #1
   c27f2:	18e2      	adds	r2, r4, r3
   c27f4:	688e      	ldr	r6, [r1, #8]
   c27f6:	6850      	ldr	r0, [r2, #4]
   c27f8:	42b2      	cmp	r2, r6
   c27fa:	f020 0003 	bic.w	r0, r0, #3
   c27fe:	d05e      	beq.n	c28be <_free_r+0xea>
   c2800:	07fe      	lsls	r6, r7, #31
   c2802:	6050      	str	r0, [r2, #4]
   c2804:	d40b      	bmi.n	c281e <_free_r+0x4a>
   c2806:	f855 7c08 	ldr.w	r7, [r5, #-8]
   c280a:	f101 0e08 	add.w	lr, r1, #8
   c280e:	1be4      	subs	r4, r4, r7
   c2810:	68a5      	ldr	r5, [r4, #8]
   c2812:	443b      	add	r3, r7
   c2814:	4575      	cmp	r5, lr
   c2816:	d06d      	beq.n	c28f4 <_free_r+0x120>
   c2818:	68e7      	ldr	r7, [r4, #12]
   c281a:	60ef      	str	r7, [r5, #12]
   c281c:	60bd      	str	r5, [r7, #8]
   c281e:	1815      	adds	r5, r2, r0
   c2820:	686d      	ldr	r5, [r5, #4]
   c2822:	07ed      	lsls	r5, r5, #31
   c2824:	d53e      	bpl.n	c28a4 <_free_r+0xd0>
   c2826:	f043 0201 	orr.w	r2, r3, #1
   c282a:	6062      	str	r2, [r4, #4]
   c282c:	50e3      	str	r3, [r4, r3]
   c282e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   c2832:	d217      	bcs.n	c2864 <_free_r+0x90>
   c2834:	2201      	movs	r2, #1
   c2836:	08db      	lsrs	r3, r3, #3
   c2838:	1098      	asrs	r0, r3, #2
   c283a:	684d      	ldr	r5, [r1, #4]
   c283c:	4413      	add	r3, r2
   c283e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   c2842:	4082      	lsls	r2, r0
   c2844:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   c2848:	432a      	orrs	r2, r5
   c284a:	3808      	subs	r0, #8
   c284c:	60e0      	str	r0, [r4, #12]
   c284e:	60a7      	str	r7, [r4, #8]
   c2850:	604a      	str	r2, [r1, #4]
   c2852:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   c2856:	60fc      	str	r4, [r7, #12]
   c2858:	4640      	mov	r0, r8
   c285a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c285e:	f000 be3f 	b.w	c34e0 <__malloc_unlock>
   c2862:	4770      	bx	lr
   c2864:	0a5a      	lsrs	r2, r3, #9
   c2866:	2a04      	cmp	r2, #4
   c2868:	d852      	bhi.n	c2910 <_free_r+0x13c>
   c286a:	099a      	lsrs	r2, r3, #6
   c286c:	f102 0739 	add.w	r7, r2, #57	; 0x39
   c2870:	00ff      	lsls	r7, r7, #3
   c2872:	f102 0538 	add.w	r5, r2, #56	; 0x38
   c2876:	19c8      	adds	r0, r1, r7
   c2878:	59ca      	ldr	r2, [r1, r7]
   c287a:	3808      	subs	r0, #8
   c287c:	4290      	cmp	r0, r2
   c287e:	d04f      	beq.n	c2920 <_free_r+0x14c>
   c2880:	6851      	ldr	r1, [r2, #4]
   c2882:	f021 0103 	bic.w	r1, r1, #3
   c2886:	428b      	cmp	r3, r1
   c2888:	d232      	bcs.n	c28f0 <_free_r+0x11c>
   c288a:	6892      	ldr	r2, [r2, #8]
   c288c:	4290      	cmp	r0, r2
   c288e:	d1f7      	bne.n	c2880 <_free_r+0xac>
   c2890:	68c3      	ldr	r3, [r0, #12]
   c2892:	60a0      	str	r0, [r4, #8]
   c2894:	60e3      	str	r3, [r4, #12]
   c2896:	609c      	str	r4, [r3, #8]
   c2898:	60c4      	str	r4, [r0, #12]
   c289a:	4640      	mov	r0, r8
   c289c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c28a0:	f000 be1e 	b.w	c34e0 <__malloc_unlock>
   c28a4:	6895      	ldr	r5, [r2, #8]
   c28a6:	4f3b      	ldr	r7, [pc, #236]	; (c2994 <_free_r+0x1c0>)
   c28a8:	4403      	add	r3, r0
   c28aa:	42bd      	cmp	r5, r7
   c28ac:	d040      	beq.n	c2930 <_free_r+0x15c>
   c28ae:	68d0      	ldr	r0, [r2, #12]
   c28b0:	f043 0201 	orr.w	r2, r3, #1
   c28b4:	60e8      	str	r0, [r5, #12]
   c28b6:	6085      	str	r5, [r0, #8]
   c28b8:	6062      	str	r2, [r4, #4]
   c28ba:	50e3      	str	r3, [r4, r3]
   c28bc:	e7b7      	b.n	c282e <_free_r+0x5a>
   c28be:	07ff      	lsls	r7, r7, #31
   c28c0:	4403      	add	r3, r0
   c28c2:	d407      	bmi.n	c28d4 <_free_r+0x100>
   c28c4:	f855 5c08 	ldr.w	r5, [r5, #-8]
   c28c8:	1b64      	subs	r4, r4, r5
   c28ca:	68e2      	ldr	r2, [r4, #12]
   c28cc:	68a0      	ldr	r0, [r4, #8]
   c28ce:	442b      	add	r3, r5
   c28d0:	60c2      	str	r2, [r0, #12]
   c28d2:	6090      	str	r0, [r2, #8]
   c28d4:	4a30      	ldr	r2, [pc, #192]	; (c2998 <_free_r+0x1c4>)
   c28d6:	f043 0001 	orr.w	r0, r3, #1
   c28da:	6812      	ldr	r2, [r2, #0]
   c28dc:	6060      	str	r0, [r4, #4]
   c28de:	4293      	cmp	r3, r2
   c28e0:	608c      	str	r4, [r1, #8]
   c28e2:	d3b9      	bcc.n	c2858 <_free_r+0x84>
   c28e4:	4b2d      	ldr	r3, [pc, #180]	; (c299c <_free_r+0x1c8>)
   c28e6:	4640      	mov	r0, r8
   c28e8:	6819      	ldr	r1, [r3, #0]
   c28ea:	f7ff ff23 	bl	c2734 <_malloc_trim_r>
   c28ee:	e7b3      	b.n	c2858 <_free_r+0x84>
   c28f0:	4610      	mov	r0, r2
   c28f2:	e7cd      	b.n	c2890 <_free_r+0xbc>
   c28f4:	1811      	adds	r1, r2, r0
   c28f6:	6849      	ldr	r1, [r1, #4]
   c28f8:	07c9      	lsls	r1, r1, #31
   c28fa:	d444      	bmi.n	c2986 <_free_r+0x1b2>
   c28fc:	6891      	ldr	r1, [r2, #8]
   c28fe:	4403      	add	r3, r0
   c2900:	68d2      	ldr	r2, [r2, #12]
   c2902:	f043 0001 	orr.w	r0, r3, #1
   c2906:	60ca      	str	r2, [r1, #12]
   c2908:	6091      	str	r1, [r2, #8]
   c290a:	6060      	str	r0, [r4, #4]
   c290c:	50e3      	str	r3, [r4, r3]
   c290e:	e7a3      	b.n	c2858 <_free_r+0x84>
   c2910:	2a14      	cmp	r2, #20
   c2912:	d816      	bhi.n	c2942 <_free_r+0x16e>
   c2914:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   c2918:	00ff      	lsls	r7, r7, #3
   c291a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   c291e:	e7aa      	b.n	c2876 <_free_r+0xa2>
   c2920:	2301      	movs	r3, #1
   c2922:	10aa      	asrs	r2, r5, #2
   c2924:	684d      	ldr	r5, [r1, #4]
   c2926:	4093      	lsls	r3, r2
   c2928:	432b      	orrs	r3, r5
   c292a:	604b      	str	r3, [r1, #4]
   c292c:	4603      	mov	r3, r0
   c292e:	e7b0      	b.n	c2892 <_free_r+0xbe>
   c2930:	f043 0201 	orr.w	r2, r3, #1
   c2934:	614c      	str	r4, [r1, #20]
   c2936:	610c      	str	r4, [r1, #16]
   c2938:	60e5      	str	r5, [r4, #12]
   c293a:	60a5      	str	r5, [r4, #8]
   c293c:	6062      	str	r2, [r4, #4]
   c293e:	50e3      	str	r3, [r4, r3]
   c2940:	e78a      	b.n	c2858 <_free_r+0x84>
   c2942:	2a54      	cmp	r2, #84	; 0x54
   c2944:	d806      	bhi.n	c2954 <_free_r+0x180>
   c2946:	0b1a      	lsrs	r2, r3, #12
   c2948:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   c294c:	00ff      	lsls	r7, r7, #3
   c294e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   c2952:	e790      	b.n	c2876 <_free_r+0xa2>
   c2954:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   c2958:	d806      	bhi.n	c2968 <_free_r+0x194>
   c295a:	0bda      	lsrs	r2, r3, #15
   c295c:	f102 0778 	add.w	r7, r2, #120	; 0x78
   c2960:	00ff      	lsls	r7, r7, #3
   c2962:	f102 0577 	add.w	r5, r2, #119	; 0x77
   c2966:	e786      	b.n	c2876 <_free_r+0xa2>
   c2968:	f240 5054 	movw	r0, #1364	; 0x554
   c296c:	4282      	cmp	r2, r0
   c296e:	d806      	bhi.n	c297e <_free_r+0x1aa>
   c2970:	0c9a      	lsrs	r2, r3, #18
   c2972:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   c2976:	00ff      	lsls	r7, r7, #3
   c2978:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   c297c:	e77b      	b.n	c2876 <_free_r+0xa2>
   c297e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   c2982:	257e      	movs	r5, #126	; 0x7e
   c2984:	e777      	b.n	c2876 <_free_r+0xa2>
   c2986:	f043 0101 	orr.w	r1, r3, #1
   c298a:	6061      	str	r1, [r4, #4]
   c298c:	6013      	str	r3, [r2, #0]
   c298e:	e763      	b.n	c2858 <_free_r+0x84>
   c2990:	20070760 	.word	0x20070760
   c2994:	20070768 	.word	0x20070768
   c2998:	20070b6c 	.word	0x20070b6c
   c299c:	20070d3c 	.word	0x20070d3c

000c29a0 <__sfvwrite_r>:
   c29a0:	6893      	ldr	r3, [r2, #8]
   c29a2:	2b00      	cmp	r3, #0
   c29a4:	d071      	beq.n	c2a8a <__sfvwrite_r+0xea>
   c29a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c29aa:	898b      	ldrh	r3, [r1, #12]
   c29ac:	b083      	sub	sp, #12
   c29ae:	460c      	mov	r4, r1
   c29b0:	0719      	lsls	r1, r3, #28
   c29b2:	9000      	str	r0, [sp, #0]
   c29b4:	4616      	mov	r6, r2
   c29b6:	d525      	bpl.n	c2a04 <__sfvwrite_r+0x64>
   c29b8:	6922      	ldr	r2, [r4, #16]
   c29ba:	b31a      	cbz	r2, c2a04 <__sfvwrite_r+0x64>
   c29bc:	f013 0002 	ands.w	r0, r3, #2
   c29c0:	6835      	ldr	r5, [r6, #0]
   c29c2:	d02b      	beq.n	c2a1c <__sfvwrite_r+0x7c>
   c29c4:	f04f 0900 	mov.w	r9, #0
   c29c8:	46b0      	mov	r8, r6
   c29ca:	464f      	mov	r7, r9
   c29cc:	f8df a2c0 	ldr.w	sl, [pc, #704]	; c2c90 <__sfvwrite_r+0x2f0>
   c29d0:	2f00      	cmp	r7, #0
   c29d2:	d055      	beq.n	c2a80 <__sfvwrite_r+0xe0>
   c29d4:	4557      	cmp	r7, sl
   c29d6:	463b      	mov	r3, r7
   c29d8:	464a      	mov	r2, r9
   c29da:	bf28      	it	cs
   c29dc:	4653      	movcs	r3, sl
   c29de:	69e1      	ldr	r1, [r4, #28]
   c29e0:	9800      	ldr	r0, [sp, #0]
   c29e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c29e4:	47b0      	blx	r6
   c29e6:	2800      	cmp	r0, #0
   c29e8:	dd56      	ble.n	c2a98 <__sfvwrite_r+0xf8>
   c29ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c29ee:	4481      	add	r9, r0
   c29f0:	1a1b      	subs	r3, r3, r0
   c29f2:	1a3f      	subs	r7, r7, r0
   c29f4:	f8c8 3008 	str.w	r3, [r8, #8]
   c29f8:	2b00      	cmp	r3, #0
   c29fa:	d1e9      	bne.n	c29d0 <__sfvwrite_r+0x30>
   c29fc:	2000      	movs	r0, #0
   c29fe:	b003      	add	sp, #12
   c2a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2a04:	4621      	mov	r1, r4
   c2a06:	9800      	ldr	r0, [sp, #0]
   c2a08:	f7ff fc56 	bl	c22b8 <__swsetup_r>
   c2a0c:	2800      	cmp	r0, #0
   c2a0e:	f040 8135 	bne.w	c2c7c <__sfvwrite_r+0x2dc>
   c2a12:	89a3      	ldrh	r3, [r4, #12]
   c2a14:	6835      	ldr	r5, [r6, #0]
   c2a16:	f013 0002 	ands.w	r0, r3, #2
   c2a1a:	d1d3      	bne.n	c29c4 <__sfvwrite_r+0x24>
   c2a1c:	f013 0901 	ands.w	r9, r3, #1
   c2a20:	d144      	bne.n	c2aac <__sfvwrite_r+0x10c>
   c2a22:	464f      	mov	r7, r9
   c2a24:	9601      	str	r6, [sp, #4]
   c2a26:	b337      	cbz	r7, c2a76 <__sfvwrite_r+0xd6>
   c2a28:	059a      	lsls	r2, r3, #22
   c2a2a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   c2a2e:	f140 8085 	bpl.w	c2b3c <__sfvwrite_r+0x19c>
   c2a32:	4547      	cmp	r7, r8
   c2a34:	46c3      	mov	fp, r8
   c2a36:	f0c0 80ad 	bcc.w	c2b94 <__sfvwrite_r+0x1f4>
   c2a3a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   c2a3e:	f040 80ae 	bne.w	c2b9e <__sfvwrite_r+0x1fe>
   c2a42:	46ba      	mov	sl, r7
   c2a44:	6820      	ldr	r0, [r4, #0]
   c2a46:	465a      	mov	r2, fp
   c2a48:	4649      	mov	r1, r9
   c2a4a:	f000 fcdf 	bl	c340c <memmove>
   c2a4e:	68a2      	ldr	r2, [r4, #8]
   c2a50:	6823      	ldr	r3, [r4, #0]
   c2a52:	eba2 0208 	sub.w	r2, r2, r8
   c2a56:	445b      	add	r3, fp
   c2a58:	60a2      	str	r2, [r4, #8]
   c2a5a:	6023      	str	r3, [r4, #0]
   c2a5c:	9a01      	ldr	r2, [sp, #4]
   c2a5e:	44d1      	add	r9, sl
   c2a60:	6893      	ldr	r3, [r2, #8]
   c2a62:	eba7 070a 	sub.w	r7, r7, sl
   c2a66:	eba3 030a 	sub.w	r3, r3, sl
   c2a6a:	6093      	str	r3, [r2, #8]
   c2a6c:	2b00      	cmp	r3, #0
   c2a6e:	d0c5      	beq.n	c29fc <__sfvwrite_r+0x5c>
   c2a70:	89a3      	ldrh	r3, [r4, #12]
   c2a72:	2f00      	cmp	r7, #0
   c2a74:	d1d8      	bne.n	c2a28 <__sfvwrite_r+0x88>
   c2a76:	f8d5 9000 	ldr.w	r9, [r5]
   c2a7a:	686f      	ldr	r7, [r5, #4]
   c2a7c:	3508      	adds	r5, #8
   c2a7e:	e7d2      	b.n	c2a26 <__sfvwrite_r+0x86>
   c2a80:	f8d5 9000 	ldr.w	r9, [r5]
   c2a84:	686f      	ldr	r7, [r5, #4]
   c2a86:	3508      	adds	r5, #8
   c2a88:	e7a2      	b.n	c29d0 <__sfvwrite_r+0x30>
   c2a8a:	2000      	movs	r0, #0
   c2a8c:	4770      	bx	lr
   c2a8e:	4621      	mov	r1, r4
   c2a90:	9800      	ldr	r0, [sp, #0]
   c2a92:	f7ff fd21 	bl	c24d8 <_fflush_r>
   c2a96:	b378      	cbz	r0, c2af8 <__sfvwrite_r+0x158>
   c2a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   c2a9c:	f04f 30ff 	mov.w	r0, #4294967295
   c2aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   c2aa4:	81a3      	strh	r3, [r4, #12]
   c2aa6:	b003      	add	sp, #12
   c2aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2aac:	4681      	mov	r9, r0
   c2aae:	4633      	mov	r3, r6
   c2ab0:	464e      	mov	r6, r9
   c2ab2:	46a8      	mov	r8, r5
   c2ab4:	469a      	mov	sl, r3
   c2ab6:	464d      	mov	r5, r9
   c2ab8:	b356      	cbz	r6, c2b10 <__sfvwrite_r+0x170>
   c2aba:	2800      	cmp	r0, #0
   c2abc:	d032      	beq.n	c2b24 <__sfvwrite_r+0x184>
   c2abe:	45b1      	cmp	r9, r6
   c2ac0:	46cb      	mov	fp, r9
   c2ac2:	bf28      	it	cs
   c2ac4:	46b3      	movcs	fp, r6
   c2ac6:	6820      	ldr	r0, [r4, #0]
   c2ac8:	6923      	ldr	r3, [r4, #16]
   c2aca:	465f      	mov	r7, fp
   c2acc:	4298      	cmp	r0, r3
   c2ace:	6962      	ldr	r2, [r4, #20]
   c2ad0:	d904      	bls.n	c2adc <__sfvwrite_r+0x13c>
   c2ad2:	68a3      	ldr	r3, [r4, #8]
   c2ad4:	4413      	add	r3, r2
   c2ad6:	459b      	cmp	fp, r3
   c2ad8:	f300 80a8 	bgt.w	c2c2c <__sfvwrite_r+0x28c>
   c2adc:	4593      	cmp	fp, r2
   c2ade:	db4d      	blt.n	c2b7c <__sfvwrite_r+0x1dc>
   c2ae0:	4613      	mov	r3, r2
   c2ae2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   c2ae4:	462a      	mov	r2, r5
   c2ae6:	69e1      	ldr	r1, [r4, #28]
   c2ae8:	9800      	ldr	r0, [sp, #0]
   c2aea:	47b8      	blx	r7
   c2aec:	1e07      	subs	r7, r0, #0
   c2aee:	ddd3      	ble.n	c2a98 <__sfvwrite_r+0xf8>
   c2af0:	ebb9 0907 	subs.w	r9, r9, r7
   c2af4:	d0cb      	beq.n	c2a8e <__sfvwrite_r+0xee>
   c2af6:	2001      	movs	r0, #1
   c2af8:	f8da 3008 	ldr.w	r3, [sl, #8]
   c2afc:	443d      	add	r5, r7
   c2afe:	1bdb      	subs	r3, r3, r7
   c2b00:	1bf6      	subs	r6, r6, r7
   c2b02:	f8ca 3008 	str.w	r3, [sl, #8]
   c2b06:	2b00      	cmp	r3, #0
   c2b08:	f43f af78 	beq.w	c29fc <__sfvwrite_r+0x5c>
   c2b0c:	2e00      	cmp	r6, #0
   c2b0e:	d1d4      	bne.n	c2aba <__sfvwrite_r+0x11a>
   c2b10:	f108 0308 	add.w	r3, r8, #8
   c2b14:	f853 6c04 	ldr.w	r6, [r3, #-4]
   c2b18:	4698      	mov	r8, r3
   c2b1a:	f853 5c08 	ldr.w	r5, [r3, #-8]
   c2b1e:	3308      	adds	r3, #8
   c2b20:	2e00      	cmp	r6, #0
   c2b22:	d0f7      	beq.n	c2b14 <__sfvwrite_r+0x174>
   c2b24:	4632      	mov	r2, r6
   c2b26:	210a      	movs	r1, #10
   c2b28:	4628      	mov	r0, r5
   c2b2a:	f000 fc29 	bl	c3380 <memchr>
   c2b2e:	2800      	cmp	r0, #0
   c2b30:	f000 80a1 	beq.w	c2c76 <__sfvwrite_r+0x2d6>
   c2b34:	3001      	adds	r0, #1
   c2b36:	eba0 0905 	sub.w	r9, r0, r5
   c2b3a:	e7c0      	b.n	c2abe <__sfvwrite_r+0x11e>
   c2b3c:	6820      	ldr	r0, [r4, #0]
   c2b3e:	6923      	ldr	r3, [r4, #16]
   c2b40:	4298      	cmp	r0, r3
   c2b42:	d802      	bhi.n	c2b4a <__sfvwrite_r+0x1aa>
   c2b44:	6963      	ldr	r3, [r4, #20]
   c2b46:	429f      	cmp	r7, r3
   c2b48:	d25d      	bcs.n	c2c06 <__sfvwrite_r+0x266>
   c2b4a:	45b8      	cmp	r8, r7
   c2b4c:	bf28      	it	cs
   c2b4e:	46b8      	movcs	r8, r7
   c2b50:	4649      	mov	r1, r9
   c2b52:	4642      	mov	r2, r8
   c2b54:	f000 fc5a 	bl	c340c <memmove>
   c2b58:	68a3      	ldr	r3, [r4, #8]
   c2b5a:	6822      	ldr	r2, [r4, #0]
   c2b5c:	eba3 0308 	sub.w	r3, r3, r8
   c2b60:	4442      	add	r2, r8
   c2b62:	60a3      	str	r3, [r4, #8]
   c2b64:	6022      	str	r2, [r4, #0]
   c2b66:	b10b      	cbz	r3, c2b6c <__sfvwrite_r+0x1cc>
   c2b68:	46c2      	mov	sl, r8
   c2b6a:	e777      	b.n	c2a5c <__sfvwrite_r+0xbc>
   c2b6c:	4621      	mov	r1, r4
   c2b6e:	9800      	ldr	r0, [sp, #0]
   c2b70:	f7ff fcb2 	bl	c24d8 <_fflush_r>
   c2b74:	2800      	cmp	r0, #0
   c2b76:	d18f      	bne.n	c2a98 <__sfvwrite_r+0xf8>
   c2b78:	46c2      	mov	sl, r8
   c2b7a:	e76f      	b.n	c2a5c <__sfvwrite_r+0xbc>
   c2b7c:	465a      	mov	r2, fp
   c2b7e:	4629      	mov	r1, r5
   c2b80:	f000 fc44 	bl	c340c <memmove>
   c2b84:	68a2      	ldr	r2, [r4, #8]
   c2b86:	6823      	ldr	r3, [r4, #0]
   c2b88:	eba2 020b 	sub.w	r2, r2, fp
   c2b8c:	445b      	add	r3, fp
   c2b8e:	60a2      	str	r2, [r4, #8]
   c2b90:	6023      	str	r3, [r4, #0]
   c2b92:	e7ad      	b.n	c2af0 <__sfvwrite_r+0x150>
   c2b94:	46b8      	mov	r8, r7
   c2b96:	46ba      	mov	sl, r7
   c2b98:	46bb      	mov	fp, r7
   c2b9a:	6820      	ldr	r0, [r4, #0]
   c2b9c:	e753      	b.n	c2a46 <__sfvwrite_r+0xa6>
   c2b9e:	6962      	ldr	r2, [r4, #20]
   c2ba0:	6820      	ldr	r0, [r4, #0]
   c2ba2:	6921      	ldr	r1, [r4, #16]
   c2ba4:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   c2ba8:	eba0 0a01 	sub.w	sl, r0, r1
   c2bac:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   c2bb0:	f10a 0001 	add.w	r0, sl, #1
   c2bb4:	ea4f 0868 	mov.w	r8, r8, asr #1
   c2bb8:	4438      	add	r0, r7
   c2bba:	4540      	cmp	r0, r8
   c2bbc:	4642      	mov	r2, r8
   c2bbe:	bf84      	itt	hi
   c2bc0:	4680      	movhi	r8, r0
   c2bc2:	4642      	movhi	r2, r8
   c2bc4:	055b      	lsls	r3, r3, #21
   c2bc6:	d544      	bpl.n	c2c52 <__sfvwrite_r+0x2b2>
   c2bc8:	4611      	mov	r1, r2
   c2bca:	9800      	ldr	r0, [sp, #0]
   c2bcc:	f000 f920 	bl	c2e10 <_malloc_r>
   c2bd0:	4683      	mov	fp, r0
   c2bd2:	2800      	cmp	r0, #0
   c2bd4:	d055      	beq.n	c2c82 <__sfvwrite_r+0x2e2>
   c2bd6:	4652      	mov	r2, sl
   c2bd8:	6921      	ldr	r1, [r4, #16]
   c2bda:	f7fe fb11 	bl	c1200 <memcpy>
   c2bde:	89a3      	ldrh	r3, [r4, #12]
   c2be0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   c2be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   c2be8:	81a3      	strh	r3, [r4, #12]
   c2bea:	eb0b 000a 	add.w	r0, fp, sl
   c2bee:	eba8 030a 	sub.w	r3, r8, sl
   c2bf2:	f8c4 b010 	str.w	fp, [r4, #16]
   c2bf6:	f8c4 8014 	str.w	r8, [r4, #20]
   c2bfa:	6020      	str	r0, [r4, #0]
   c2bfc:	60a3      	str	r3, [r4, #8]
   c2bfe:	46b8      	mov	r8, r7
   c2c00:	46ba      	mov	sl, r7
   c2c02:	46bb      	mov	fp, r7
   c2c04:	e71f      	b.n	c2a46 <__sfvwrite_r+0xa6>
   c2c06:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   c2c0a:	42ba      	cmp	r2, r7
   c2c0c:	bf28      	it	cs
   c2c0e:	463a      	movcs	r2, r7
   c2c10:	fb92 f2f3 	sdiv	r2, r2, r3
   c2c14:	69e1      	ldr	r1, [r4, #28]
   c2c16:	fb03 f302 	mul.w	r3, r3, r2
   c2c1a:	9800      	ldr	r0, [sp, #0]
   c2c1c:	464a      	mov	r2, r9
   c2c1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c2c20:	47b0      	blx	r6
   c2c22:	f1b0 0a00 	subs.w	sl, r0, #0
   c2c26:	f73f af19 	bgt.w	c2a5c <__sfvwrite_r+0xbc>
   c2c2a:	e735      	b.n	c2a98 <__sfvwrite_r+0xf8>
   c2c2c:	461a      	mov	r2, r3
   c2c2e:	4629      	mov	r1, r5
   c2c30:	9301      	str	r3, [sp, #4]
   c2c32:	f000 fbeb 	bl	c340c <memmove>
   c2c36:	6822      	ldr	r2, [r4, #0]
   c2c38:	9b01      	ldr	r3, [sp, #4]
   c2c3a:	4621      	mov	r1, r4
   c2c3c:	441a      	add	r2, r3
   c2c3e:	6022      	str	r2, [r4, #0]
   c2c40:	9800      	ldr	r0, [sp, #0]
   c2c42:	f7ff fc49 	bl	c24d8 <_fflush_r>
   c2c46:	9b01      	ldr	r3, [sp, #4]
   c2c48:	2800      	cmp	r0, #0
   c2c4a:	f47f af25 	bne.w	c2a98 <__sfvwrite_r+0xf8>
   c2c4e:	461f      	mov	r7, r3
   c2c50:	e74e      	b.n	c2af0 <__sfvwrite_r+0x150>
   c2c52:	9800      	ldr	r0, [sp, #0]
   c2c54:	f000 fc4a 	bl	c34ec <_realloc_r>
   c2c58:	4683      	mov	fp, r0
   c2c5a:	2800      	cmp	r0, #0
   c2c5c:	d1c5      	bne.n	c2bea <__sfvwrite_r+0x24a>
   c2c5e:	9d00      	ldr	r5, [sp, #0]
   c2c60:	6921      	ldr	r1, [r4, #16]
   c2c62:	4628      	mov	r0, r5
   c2c64:	f7ff fdb6 	bl	c27d4 <_free_r>
   c2c68:	220c      	movs	r2, #12
   c2c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   c2c6e:	602a      	str	r2, [r5, #0]
   c2c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   c2c74:	e712      	b.n	c2a9c <__sfvwrite_r+0xfc>
   c2c76:	f106 0901 	add.w	r9, r6, #1
   c2c7a:	e720      	b.n	c2abe <__sfvwrite_r+0x11e>
   c2c7c:	f04f 30ff 	mov.w	r0, #4294967295
   c2c80:	e6bd      	b.n	c29fe <__sfvwrite_r+0x5e>
   c2c82:	220c      	movs	r2, #12
   c2c84:	9900      	ldr	r1, [sp, #0]
   c2c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   c2c8a:	600a      	str	r2, [r1, #0]
   c2c8c:	e706      	b.n	c2a9c <__sfvwrite_r+0xfc>
   c2c8e:	bf00      	nop
   c2c90:	7ffffc00 	.word	0x7ffffc00

000c2c94 <_fwalk_reent>:
   c2c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c2c98:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   c2c9c:	d01e      	beq.n	c2cdc <_fwalk_reent+0x48>
   c2c9e:	4688      	mov	r8, r1
   c2ca0:	4607      	mov	r7, r0
   c2ca2:	f04f 0900 	mov.w	r9, #0
   c2ca6:	6875      	ldr	r5, [r6, #4]
   c2ca8:	68b4      	ldr	r4, [r6, #8]
   c2caa:	3d01      	subs	r5, #1
   c2cac:	d410      	bmi.n	c2cd0 <_fwalk_reent+0x3c>
   c2cae:	89a3      	ldrh	r3, [r4, #12]
   c2cb0:	3d01      	subs	r5, #1
   c2cb2:	2b01      	cmp	r3, #1
   c2cb4:	d908      	bls.n	c2cc8 <_fwalk_reent+0x34>
   c2cb6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   c2cba:	3301      	adds	r3, #1
   c2cbc:	d004      	beq.n	c2cc8 <_fwalk_reent+0x34>
   c2cbe:	4621      	mov	r1, r4
   c2cc0:	4638      	mov	r0, r7
   c2cc2:	47c0      	blx	r8
   c2cc4:	ea49 0900 	orr.w	r9, r9, r0
   c2cc8:	1c6b      	adds	r3, r5, #1
   c2cca:	f104 0468 	add.w	r4, r4, #104	; 0x68
   c2cce:	d1ee      	bne.n	c2cae <_fwalk_reent+0x1a>
   c2cd0:	6836      	ldr	r6, [r6, #0]
   c2cd2:	2e00      	cmp	r6, #0
   c2cd4:	d1e7      	bne.n	c2ca6 <_fwalk_reent+0x12>
   c2cd6:	4648      	mov	r0, r9
   c2cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c2cdc:	46b1      	mov	r9, r6
   c2cde:	4648      	mov	r0, r9
   c2ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000c2ce4 <__locale_mb_cur_max>:
   c2ce4:	4b04      	ldr	r3, [pc, #16]	; (c2cf8 <__locale_mb_cur_max+0x14>)
   c2ce6:	4a05      	ldr	r2, [pc, #20]	; (c2cfc <__locale_mb_cur_max+0x18>)
   c2ce8:	681b      	ldr	r3, [r3, #0]
   c2cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   c2cec:	2b00      	cmp	r3, #0
   c2cee:	bf08      	it	eq
   c2cf0:	4613      	moveq	r3, r2
   c2cf2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   c2cf6:	4770      	bx	lr
   c2cf8:	200701c0 	.word	0x200701c0
   c2cfc:	200705f4 	.word	0x200705f4

000c2d00 <__retarget_lock_init_recursive>:
   c2d00:	4770      	bx	lr
   c2d02:	bf00      	nop

000c2d04 <__retarget_lock_close_recursive>:
   c2d04:	4770      	bx	lr
   c2d06:	bf00      	nop

000c2d08 <__retarget_lock_acquire_recursive>:
   c2d08:	4770      	bx	lr
   c2d0a:	bf00      	nop

000c2d0c <__retarget_lock_release_recursive>:
   c2d0c:	4770      	bx	lr
   c2d0e:	bf00      	nop

000c2d10 <__swhatbuf_r>:
   c2d10:	b570      	push	{r4, r5, r6, lr}
   c2d12:	460c      	mov	r4, r1
   c2d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   c2d18:	b090      	sub	sp, #64	; 0x40
   c2d1a:	2900      	cmp	r1, #0
   c2d1c:	4615      	mov	r5, r2
   c2d1e:	461e      	mov	r6, r3
   c2d20:	db14      	blt.n	c2d4c <__swhatbuf_r+0x3c>
   c2d22:	aa01      	add	r2, sp, #4
   c2d24:	f000 ff96 	bl	c3c54 <_fstat_r>
   c2d28:	2800      	cmp	r0, #0
   c2d2a:	db0f      	blt.n	c2d4c <__swhatbuf_r+0x3c>
   c2d2c:	9a02      	ldr	r2, [sp, #8]
   c2d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   c2d32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   c2d36:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   c2d3a:	fab2 f282 	clz	r2, r2
   c2d3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   c2d42:	0952      	lsrs	r2, r2, #5
   c2d44:	6032      	str	r2, [r6, #0]
   c2d46:	602b      	str	r3, [r5, #0]
   c2d48:	b010      	add	sp, #64	; 0x40
   c2d4a:	bd70      	pop	{r4, r5, r6, pc}
   c2d4c:	2300      	movs	r3, #0
   c2d4e:	89a2      	ldrh	r2, [r4, #12]
   c2d50:	6033      	str	r3, [r6, #0]
   c2d52:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   c2d56:	d004      	beq.n	c2d62 <__swhatbuf_r+0x52>
   c2d58:	2240      	movs	r2, #64	; 0x40
   c2d5a:	4618      	mov	r0, r3
   c2d5c:	602a      	str	r2, [r5, #0]
   c2d5e:	b010      	add	sp, #64	; 0x40
   c2d60:	bd70      	pop	{r4, r5, r6, pc}
   c2d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
   c2d66:	602b      	str	r3, [r5, #0]
   c2d68:	b010      	add	sp, #64	; 0x40
   c2d6a:	bd70      	pop	{r4, r5, r6, pc}

000c2d6c <__smakebuf_r>:
   c2d6c:	898a      	ldrh	r2, [r1, #12]
   c2d6e:	460b      	mov	r3, r1
   c2d70:	0792      	lsls	r2, r2, #30
   c2d72:	d506      	bpl.n	c2d82 <__smakebuf_r+0x16>
   c2d74:	2101      	movs	r1, #1
   c2d76:	f103 0243 	add.w	r2, r3, #67	; 0x43
   c2d7a:	6159      	str	r1, [r3, #20]
   c2d7c:	601a      	str	r2, [r3, #0]
   c2d7e:	611a      	str	r2, [r3, #16]
   c2d80:	4770      	bx	lr
   c2d82:	b5f0      	push	{r4, r5, r6, r7, lr}
   c2d84:	b083      	sub	sp, #12
   c2d86:	ab01      	add	r3, sp, #4
   c2d88:	466a      	mov	r2, sp
   c2d8a:	460c      	mov	r4, r1
   c2d8c:	4606      	mov	r6, r0
   c2d8e:	f7ff ffbf 	bl	c2d10 <__swhatbuf_r>
   c2d92:	9900      	ldr	r1, [sp, #0]
   c2d94:	4605      	mov	r5, r0
   c2d96:	4630      	mov	r0, r6
   c2d98:	f000 f83a 	bl	c2e10 <_malloc_r>
   c2d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   c2da0:	b1d8      	cbz	r0, c2dda <__smakebuf_r+0x6e>
   c2da2:	e89d 0006 	ldmia.w	sp, {r1, r2}
   c2da6:	4f15      	ldr	r7, [pc, #84]	; (c2dfc <__smakebuf_r+0x90>)
   c2da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   c2dac:	63f7      	str	r7, [r6, #60]	; 0x3c
   c2dae:	81a3      	strh	r3, [r4, #12]
   c2db0:	6020      	str	r0, [r4, #0]
   c2db2:	6120      	str	r0, [r4, #16]
   c2db4:	6161      	str	r1, [r4, #20]
   c2db6:	b91a      	cbnz	r2, c2dc0 <__smakebuf_r+0x54>
   c2db8:	432b      	orrs	r3, r5
   c2dba:	81a3      	strh	r3, [r4, #12]
   c2dbc:	b003      	add	sp, #12
   c2dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c2dc0:	4630      	mov	r0, r6
   c2dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   c2dc6:	f000 ff59 	bl	c3c7c <_isatty_r>
   c2dca:	b1a0      	cbz	r0, c2df6 <__smakebuf_r+0x8a>
   c2dcc:	89a3      	ldrh	r3, [r4, #12]
   c2dce:	f023 0303 	bic.w	r3, r3, #3
   c2dd2:	f043 0301 	orr.w	r3, r3, #1
   c2dd6:	b21b      	sxth	r3, r3
   c2dd8:	e7ee      	b.n	c2db8 <__smakebuf_r+0x4c>
   c2dda:	059a      	lsls	r2, r3, #22
   c2ddc:	d4ee      	bmi.n	c2dbc <__smakebuf_r+0x50>
   c2dde:	2101      	movs	r1, #1
   c2de0:	f023 0303 	bic.w	r3, r3, #3
   c2de4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   c2de8:	f043 0302 	orr.w	r3, r3, #2
   c2dec:	81a3      	strh	r3, [r4, #12]
   c2dee:	6161      	str	r1, [r4, #20]
   c2df0:	6022      	str	r2, [r4, #0]
   c2df2:	6122      	str	r2, [r4, #16]
   c2df4:	e7e2      	b.n	c2dbc <__smakebuf_r+0x50>
   c2df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   c2dfa:	e7dd      	b.n	c2db8 <__smakebuf_r+0x4c>
   c2dfc:	000c252d 	.word	0x000c252d

000c2e00 <malloc>:
   c2e00:	4b02      	ldr	r3, [pc, #8]	; (c2e0c <malloc+0xc>)
   c2e02:	4601      	mov	r1, r0
   c2e04:	6818      	ldr	r0, [r3, #0]
   c2e06:	f000 b803 	b.w	c2e10 <_malloc_r>
   c2e0a:	bf00      	nop
   c2e0c:	200701c0 	.word	0x200701c0

000c2e10 <_malloc_r>:
   c2e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2e14:	f101 060b 	add.w	r6, r1, #11
   c2e18:	2e16      	cmp	r6, #22
   c2e1a:	b083      	sub	sp, #12
   c2e1c:	4605      	mov	r5, r0
   c2e1e:	f240 809e 	bls.w	c2f5e <_malloc_r+0x14e>
   c2e22:	f036 0607 	bics.w	r6, r6, #7
   c2e26:	f100 80bd 	bmi.w	c2fa4 <_malloc_r+0x194>
   c2e2a:	42b1      	cmp	r1, r6
   c2e2c:	f200 80ba 	bhi.w	c2fa4 <_malloc_r+0x194>
   c2e30:	f000 fb50 	bl	c34d4 <__malloc_lock>
   c2e34:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   c2e38:	f0c0 8285 	bcc.w	c3346 <_malloc_r+0x536>
   c2e3c:	0a73      	lsrs	r3, r6, #9
   c2e3e:	f000 80b8 	beq.w	c2fb2 <_malloc_r+0x1a2>
   c2e42:	2b04      	cmp	r3, #4
   c2e44:	f200 816c 	bhi.w	c3120 <_malloc_r+0x310>
   c2e48:	09b3      	lsrs	r3, r6, #6
   c2e4a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   c2e4e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   c2e52:	00c1      	lsls	r1, r0, #3
   c2e54:	4fb8      	ldr	r7, [pc, #736]	; (c3138 <_malloc_r+0x328>)
   c2e56:	4439      	add	r1, r7
   c2e58:	684c      	ldr	r4, [r1, #4]
   c2e5a:	3908      	subs	r1, #8
   c2e5c:	42a1      	cmp	r1, r4
   c2e5e:	d106      	bne.n	c2e6e <_malloc_r+0x5e>
   c2e60:	e00c      	b.n	c2e7c <_malloc_r+0x6c>
   c2e62:	2a00      	cmp	r2, #0
   c2e64:	f280 80ab 	bge.w	c2fbe <_malloc_r+0x1ae>
   c2e68:	68e4      	ldr	r4, [r4, #12]
   c2e6a:	42a1      	cmp	r1, r4
   c2e6c:	d006      	beq.n	c2e7c <_malloc_r+0x6c>
   c2e6e:	6863      	ldr	r3, [r4, #4]
   c2e70:	f023 0303 	bic.w	r3, r3, #3
   c2e74:	1b9a      	subs	r2, r3, r6
   c2e76:	2a0f      	cmp	r2, #15
   c2e78:	ddf3      	ble.n	c2e62 <_malloc_r+0x52>
   c2e7a:	4670      	mov	r0, lr
   c2e7c:	693c      	ldr	r4, [r7, #16]
   c2e7e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; c314c <_malloc_r+0x33c>
   c2e82:	4574      	cmp	r4, lr
   c2e84:	f000 819e 	beq.w	c31c4 <_malloc_r+0x3b4>
   c2e88:	6863      	ldr	r3, [r4, #4]
   c2e8a:	f023 0303 	bic.w	r3, r3, #3
   c2e8e:	1b9a      	subs	r2, r3, r6
   c2e90:	2a0f      	cmp	r2, #15
   c2e92:	f300 8183 	bgt.w	c319c <_malloc_r+0x38c>
   c2e96:	2a00      	cmp	r2, #0
   c2e98:	f8c7 e014 	str.w	lr, [r7, #20]
   c2e9c:	f8c7 e010 	str.w	lr, [r7, #16]
   c2ea0:	f280 8091 	bge.w	c2fc6 <_malloc_r+0x1b6>
   c2ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   c2ea8:	f080 8154 	bcs.w	c3154 <_malloc_r+0x344>
   c2eac:	2201      	movs	r2, #1
   c2eae:	08db      	lsrs	r3, r3, #3
   c2eb0:	6879      	ldr	r1, [r7, #4]
   c2eb2:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   c2eb6:	4413      	add	r3, r2
   c2eb8:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   c2ebc:	fa02 f20c 	lsl.w	r2, r2, ip
   c2ec0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   c2ec4:	430a      	orrs	r2, r1
   c2ec6:	f1ac 0108 	sub.w	r1, ip, #8
   c2eca:	60e1      	str	r1, [r4, #12]
   c2ecc:	f8c4 8008 	str.w	r8, [r4, #8]
   c2ed0:	607a      	str	r2, [r7, #4]
   c2ed2:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   c2ed6:	f8c8 400c 	str.w	r4, [r8, #12]
   c2eda:	2401      	movs	r4, #1
   c2edc:	1083      	asrs	r3, r0, #2
   c2ede:	409c      	lsls	r4, r3
   c2ee0:	4294      	cmp	r4, r2
   c2ee2:	d87d      	bhi.n	c2fe0 <_malloc_r+0x1d0>
   c2ee4:	4214      	tst	r4, r2
   c2ee6:	d106      	bne.n	c2ef6 <_malloc_r+0xe6>
   c2ee8:	f020 0003 	bic.w	r0, r0, #3
   c2eec:	0064      	lsls	r4, r4, #1
   c2eee:	4214      	tst	r4, r2
   c2ef0:	f100 0004 	add.w	r0, r0, #4
   c2ef4:	d0fa      	beq.n	c2eec <_malloc_r+0xdc>
   c2ef6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   c2efa:	46cc      	mov	ip, r9
   c2efc:	4680      	mov	r8, r0
   c2efe:	f8dc 300c 	ldr.w	r3, [ip, #12]
   c2f02:	459c      	cmp	ip, r3
   c2f04:	d107      	bne.n	c2f16 <_malloc_r+0x106>
   c2f06:	e15f      	b.n	c31c8 <_malloc_r+0x3b8>
   c2f08:	2a00      	cmp	r2, #0
   c2f0a:	f280 816d 	bge.w	c31e8 <_malloc_r+0x3d8>
   c2f0e:	68db      	ldr	r3, [r3, #12]
   c2f10:	459c      	cmp	ip, r3
   c2f12:	f000 8159 	beq.w	c31c8 <_malloc_r+0x3b8>
   c2f16:	6859      	ldr	r1, [r3, #4]
   c2f18:	f021 0103 	bic.w	r1, r1, #3
   c2f1c:	1b8a      	subs	r2, r1, r6
   c2f1e:	2a0f      	cmp	r2, #15
   c2f20:	ddf2      	ble.n	c2f08 <_malloc_r+0xf8>
   c2f22:	68dc      	ldr	r4, [r3, #12]
   c2f24:	f8d3 c008 	ldr.w	ip, [r3, #8]
   c2f28:	f046 0801 	orr.w	r8, r6, #1
   c2f2c:	4628      	mov	r0, r5
   c2f2e:	441e      	add	r6, r3
   c2f30:	f042 0501 	orr.w	r5, r2, #1
   c2f34:	f8c3 8004 	str.w	r8, [r3, #4]
   c2f38:	f8cc 400c 	str.w	r4, [ip, #12]
   c2f3c:	f8c4 c008 	str.w	ip, [r4, #8]
   c2f40:	617e      	str	r6, [r7, #20]
   c2f42:	613e      	str	r6, [r7, #16]
   c2f44:	f8c6 e00c 	str.w	lr, [r6, #12]
   c2f48:	f8c6 e008 	str.w	lr, [r6, #8]
   c2f4c:	6075      	str	r5, [r6, #4]
   c2f4e:	505a      	str	r2, [r3, r1]
   c2f50:	9300      	str	r3, [sp, #0]
   c2f52:	f000 fac5 	bl	c34e0 <__malloc_unlock>
   c2f56:	9b00      	ldr	r3, [sp, #0]
   c2f58:	f103 0408 	add.w	r4, r3, #8
   c2f5c:	e01e      	b.n	c2f9c <_malloc_r+0x18c>
   c2f5e:	2910      	cmp	r1, #16
   c2f60:	d820      	bhi.n	c2fa4 <_malloc_r+0x194>
   c2f62:	f000 fab7 	bl	c34d4 <__malloc_lock>
   c2f66:	2610      	movs	r6, #16
   c2f68:	2318      	movs	r3, #24
   c2f6a:	2002      	movs	r0, #2
   c2f6c:	4f72      	ldr	r7, [pc, #456]	; (c3138 <_malloc_r+0x328>)
   c2f6e:	443b      	add	r3, r7
   c2f70:	685c      	ldr	r4, [r3, #4]
   c2f72:	f1a3 0208 	sub.w	r2, r3, #8
   c2f76:	4294      	cmp	r4, r2
   c2f78:	f000 812f 	beq.w	c31da <_malloc_r+0x3ca>
   c2f7c:	6863      	ldr	r3, [r4, #4]
   c2f7e:	68e1      	ldr	r1, [r4, #12]
   c2f80:	f023 0303 	bic.w	r3, r3, #3
   c2f84:	4423      	add	r3, r4
   c2f86:	685a      	ldr	r2, [r3, #4]
   c2f88:	68a6      	ldr	r6, [r4, #8]
   c2f8a:	f042 0201 	orr.w	r2, r2, #1
   c2f8e:	60f1      	str	r1, [r6, #12]
   c2f90:	4628      	mov	r0, r5
   c2f92:	608e      	str	r6, [r1, #8]
   c2f94:	605a      	str	r2, [r3, #4]
   c2f96:	f000 faa3 	bl	c34e0 <__malloc_unlock>
   c2f9a:	3408      	adds	r4, #8
   c2f9c:	4620      	mov	r0, r4
   c2f9e:	b003      	add	sp, #12
   c2fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2fa4:	2400      	movs	r4, #0
   c2fa6:	230c      	movs	r3, #12
   c2fa8:	4620      	mov	r0, r4
   c2faa:	602b      	str	r3, [r5, #0]
   c2fac:	b003      	add	sp, #12
   c2fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2fb2:	2040      	movs	r0, #64	; 0x40
   c2fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
   c2fb8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   c2fbc:	e74a      	b.n	c2e54 <_malloc_r+0x44>
   c2fbe:	4423      	add	r3, r4
   c2fc0:	685a      	ldr	r2, [r3, #4]
   c2fc2:	68e1      	ldr	r1, [r4, #12]
   c2fc4:	e7e0      	b.n	c2f88 <_malloc_r+0x178>
   c2fc6:	4423      	add	r3, r4
   c2fc8:	685a      	ldr	r2, [r3, #4]
   c2fca:	4628      	mov	r0, r5
   c2fcc:	f042 0201 	orr.w	r2, r2, #1
   c2fd0:	605a      	str	r2, [r3, #4]
   c2fd2:	3408      	adds	r4, #8
   c2fd4:	f000 fa84 	bl	c34e0 <__malloc_unlock>
   c2fd8:	4620      	mov	r0, r4
   c2fda:	b003      	add	sp, #12
   c2fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2fe0:	68bc      	ldr	r4, [r7, #8]
   c2fe2:	6863      	ldr	r3, [r4, #4]
   c2fe4:	f023 0803 	bic.w	r8, r3, #3
   c2fe8:	45b0      	cmp	r8, r6
   c2fea:	d304      	bcc.n	c2ff6 <_malloc_r+0x1e6>
   c2fec:	eba8 0306 	sub.w	r3, r8, r6
   c2ff0:	2b0f      	cmp	r3, #15
   c2ff2:	f300 8085 	bgt.w	c3100 <_malloc_r+0x2f0>
   c2ff6:	f8df 9158 	ldr.w	r9, [pc, #344]	; c3150 <_malloc_r+0x340>
   c2ffa:	4b50      	ldr	r3, [pc, #320]	; (c313c <_malloc_r+0x32c>)
   c2ffc:	f8d9 2000 	ldr.w	r2, [r9]
   c3000:	681b      	ldr	r3, [r3, #0]
   c3002:	3201      	adds	r2, #1
   c3004:	4433      	add	r3, r6
   c3006:	eb04 0a08 	add.w	sl, r4, r8
   c300a:	f000 8154 	beq.w	c32b6 <_malloc_r+0x4a6>
   c300e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   c3012:	330f      	adds	r3, #15
   c3014:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   c3018:	f02b 0b0f 	bic.w	fp, fp, #15
   c301c:	4659      	mov	r1, fp
   c301e:	4628      	mov	r0, r5
   c3020:	f000 fc1a 	bl	c3858 <_sbrk_r>
   c3024:	1c41      	adds	r1, r0, #1
   c3026:	4602      	mov	r2, r0
   c3028:	f000 80fb 	beq.w	c3222 <_malloc_r+0x412>
   c302c:	4582      	cmp	sl, r0
   c302e:	f200 80f6 	bhi.w	c321e <_malloc_r+0x40e>
   c3032:	4b43      	ldr	r3, [pc, #268]	; (c3140 <_malloc_r+0x330>)
   c3034:	6819      	ldr	r1, [r3, #0]
   c3036:	4459      	add	r1, fp
   c3038:	6019      	str	r1, [r3, #0]
   c303a:	f000 814c 	beq.w	c32d6 <_malloc_r+0x4c6>
   c303e:	f8d9 0000 	ldr.w	r0, [r9]
   c3042:	3001      	adds	r0, #1
   c3044:	bf1b      	ittet	ne
   c3046:	eba2 0a0a 	subne.w	sl, r2, sl
   c304a:	4451      	addne	r1, sl
   c304c:	f8c9 2000 	streq.w	r2, [r9]
   c3050:	6019      	strne	r1, [r3, #0]
   c3052:	f012 0107 	ands.w	r1, r2, #7
   c3056:	f000 8114 	beq.w	c3282 <_malloc_r+0x472>
   c305a:	f1c1 0008 	rsb	r0, r1, #8
   c305e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   c3062:	4402      	add	r2, r0
   c3064:	3108      	adds	r1, #8
   c3066:	eb02 090b 	add.w	r9, r2, fp
   c306a:	f3c9 090b 	ubfx	r9, r9, #0, #12
   c306e:	eba1 0909 	sub.w	r9, r1, r9
   c3072:	4649      	mov	r1, r9
   c3074:	4628      	mov	r0, r5
   c3076:	9301      	str	r3, [sp, #4]
   c3078:	9200      	str	r2, [sp, #0]
   c307a:	f000 fbed 	bl	c3858 <_sbrk_r>
   c307e:	1c43      	adds	r3, r0, #1
   c3080:	e89d 000c 	ldmia.w	sp, {r2, r3}
   c3084:	f000 8142 	beq.w	c330c <_malloc_r+0x4fc>
   c3088:	1a80      	subs	r0, r0, r2
   c308a:	4448      	add	r0, r9
   c308c:	f040 0001 	orr.w	r0, r0, #1
   c3090:	6819      	ldr	r1, [r3, #0]
   c3092:	42bc      	cmp	r4, r7
   c3094:	4449      	add	r1, r9
   c3096:	60ba      	str	r2, [r7, #8]
   c3098:	6019      	str	r1, [r3, #0]
   c309a:	6050      	str	r0, [r2, #4]
   c309c:	d017      	beq.n	c30ce <_malloc_r+0x2be>
   c309e:	f1b8 0f0f 	cmp.w	r8, #15
   c30a2:	f240 80fa 	bls.w	c329a <_malloc_r+0x48a>
   c30a6:	f04f 0c05 	mov.w	ip, #5
   c30aa:	6862      	ldr	r2, [r4, #4]
   c30ac:	f1a8 000c 	sub.w	r0, r8, #12
   c30b0:	f020 0007 	bic.w	r0, r0, #7
   c30b4:	f002 0201 	and.w	r2, r2, #1
   c30b8:	eb04 0e00 	add.w	lr, r4, r0
   c30bc:	4302      	orrs	r2, r0
   c30be:	280f      	cmp	r0, #15
   c30c0:	6062      	str	r2, [r4, #4]
   c30c2:	f8ce c004 	str.w	ip, [lr, #4]
   c30c6:	f8ce c008 	str.w	ip, [lr, #8]
   c30ca:	f200 8116 	bhi.w	c32fa <_malloc_r+0x4ea>
   c30ce:	4b1d      	ldr	r3, [pc, #116]	; (c3144 <_malloc_r+0x334>)
   c30d0:	68bc      	ldr	r4, [r7, #8]
   c30d2:	681a      	ldr	r2, [r3, #0]
   c30d4:	4291      	cmp	r1, r2
   c30d6:	bf88      	it	hi
   c30d8:	6019      	strhi	r1, [r3, #0]
   c30da:	4b1b      	ldr	r3, [pc, #108]	; (c3148 <_malloc_r+0x338>)
   c30dc:	681a      	ldr	r2, [r3, #0]
   c30de:	4291      	cmp	r1, r2
   c30e0:	6862      	ldr	r2, [r4, #4]
   c30e2:	bf88      	it	hi
   c30e4:	6019      	strhi	r1, [r3, #0]
   c30e6:	f022 0203 	bic.w	r2, r2, #3
   c30ea:	4296      	cmp	r6, r2
   c30ec:	eba2 0306 	sub.w	r3, r2, r6
   c30f0:	d801      	bhi.n	c30f6 <_malloc_r+0x2e6>
   c30f2:	2b0f      	cmp	r3, #15
   c30f4:	dc04      	bgt.n	c3100 <_malloc_r+0x2f0>
   c30f6:	4628      	mov	r0, r5
   c30f8:	f000 f9f2 	bl	c34e0 <__malloc_unlock>
   c30fc:	2400      	movs	r4, #0
   c30fe:	e74d      	b.n	c2f9c <_malloc_r+0x18c>
   c3100:	f046 0201 	orr.w	r2, r6, #1
   c3104:	f043 0301 	orr.w	r3, r3, #1
   c3108:	4426      	add	r6, r4
   c310a:	6062      	str	r2, [r4, #4]
   c310c:	4628      	mov	r0, r5
   c310e:	60be      	str	r6, [r7, #8]
   c3110:	3408      	adds	r4, #8
   c3112:	6073      	str	r3, [r6, #4]
   c3114:	f000 f9e4 	bl	c34e0 <__malloc_unlock>
   c3118:	4620      	mov	r0, r4
   c311a:	b003      	add	sp, #12
   c311c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3120:	2b14      	cmp	r3, #20
   c3122:	d970      	bls.n	c3206 <_malloc_r+0x3f6>
   c3124:	2b54      	cmp	r3, #84	; 0x54
   c3126:	f200 80a2 	bhi.w	c326e <_malloc_r+0x45e>
   c312a:	0b33      	lsrs	r3, r6, #12
   c312c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   c3130:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   c3134:	00c1      	lsls	r1, r0, #3
   c3136:	e68d      	b.n	c2e54 <_malloc_r+0x44>
   c3138:	20070760 	.word	0x20070760
   c313c:	20070d3c 	.word	0x20070d3c
   c3140:	20070d0c 	.word	0x20070d0c
   c3144:	20070d34 	.word	0x20070d34
   c3148:	20070d38 	.word	0x20070d38
   c314c:	20070768 	.word	0x20070768
   c3150:	20070b68 	.word	0x20070b68
   c3154:	0a5a      	lsrs	r2, r3, #9
   c3156:	2a04      	cmp	r2, #4
   c3158:	d95b      	bls.n	c3212 <_malloc_r+0x402>
   c315a:	2a14      	cmp	r2, #20
   c315c:	f200 80ae 	bhi.w	c32bc <_malloc_r+0x4ac>
   c3160:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   c3164:	00c9      	lsls	r1, r1, #3
   c3166:	325b      	adds	r2, #91	; 0x5b
   c3168:	eb07 0c01 	add.w	ip, r7, r1
   c316c:	5879      	ldr	r1, [r7, r1]
   c316e:	f1ac 0c08 	sub.w	ip, ip, #8
   c3172:	458c      	cmp	ip, r1
   c3174:	f000 8088 	beq.w	c3288 <_malloc_r+0x478>
   c3178:	684a      	ldr	r2, [r1, #4]
   c317a:	f022 0203 	bic.w	r2, r2, #3
   c317e:	4293      	cmp	r3, r2
   c3180:	d273      	bcs.n	c326a <_malloc_r+0x45a>
   c3182:	6889      	ldr	r1, [r1, #8]
   c3184:	458c      	cmp	ip, r1
   c3186:	d1f7      	bne.n	c3178 <_malloc_r+0x368>
   c3188:	f8dc 300c 	ldr.w	r3, [ip, #12]
   c318c:	687a      	ldr	r2, [r7, #4]
   c318e:	60e3      	str	r3, [r4, #12]
   c3190:	f8c4 c008 	str.w	ip, [r4, #8]
   c3194:	609c      	str	r4, [r3, #8]
   c3196:	f8cc 400c 	str.w	r4, [ip, #12]
   c319a:	e69e      	b.n	c2eda <_malloc_r+0xca>
   c319c:	f046 0c01 	orr.w	ip, r6, #1
   c31a0:	f042 0101 	orr.w	r1, r2, #1
   c31a4:	4426      	add	r6, r4
   c31a6:	f8c4 c004 	str.w	ip, [r4, #4]
   c31aa:	4628      	mov	r0, r5
   c31ac:	617e      	str	r6, [r7, #20]
   c31ae:	613e      	str	r6, [r7, #16]
   c31b0:	f8c6 e00c 	str.w	lr, [r6, #12]
   c31b4:	f8c6 e008 	str.w	lr, [r6, #8]
   c31b8:	6071      	str	r1, [r6, #4]
   c31ba:	50e2      	str	r2, [r4, r3]
   c31bc:	f000 f990 	bl	c34e0 <__malloc_unlock>
   c31c0:	3408      	adds	r4, #8
   c31c2:	e6eb      	b.n	c2f9c <_malloc_r+0x18c>
   c31c4:	687a      	ldr	r2, [r7, #4]
   c31c6:	e688      	b.n	c2eda <_malloc_r+0xca>
   c31c8:	f108 0801 	add.w	r8, r8, #1
   c31cc:	f018 0f03 	tst.w	r8, #3
   c31d0:	f10c 0c08 	add.w	ip, ip, #8
   c31d4:	f47f ae93 	bne.w	c2efe <_malloc_r+0xee>
   c31d8:	e02d      	b.n	c3236 <_malloc_r+0x426>
   c31da:	68dc      	ldr	r4, [r3, #12]
   c31dc:	42a3      	cmp	r3, r4
   c31de:	bf08      	it	eq
   c31e0:	3002      	addeq	r0, #2
   c31e2:	f43f ae4b 	beq.w	c2e7c <_malloc_r+0x6c>
   c31e6:	e6c9      	b.n	c2f7c <_malloc_r+0x16c>
   c31e8:	461c      	mov	r4, r3
   c31ea:	4419      	add	r1, r3
   c31ec:	684a      	ldr	r2, [r1, #4]
   c31ee:	68db      	ldr	r3, [r3, #12]
   c31f0:	f854 6f08 	ldr.w	r6, [r4, #8]!
   c31f4:	f042 0201 	orr.w	r2, r2, #1
   c31f8:	604a      	str	r2, [r1, #4]
   c31fa:	4628      	mov	r0, r5
   c31fc:	60f3      	str	r3, [r6, #12]
   c31fe:	609e      	str	r6, [r3, #8]
   c3200:	f000 f96e 	bl	c34e0 <__malloc_unlock>
   c3204:	e6ca      	b.n	c2f9c <_malloc_r+0x18c>
   c3206:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   c320a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   c320e:	00c1      	lsls	r1, r0, #3
   c3210:	e620      	b.n	c2e54 <_malloc_r+0x44>
   c3212:	099a      	lsrs	r2, r3, #6
   c3214:	f102 0139 	add.w	r1, r2, #57	; 0x39
   c3218:	00c9      	lsls	r1, r1, #3
   c321a:	3238      	adds	r2, #56	; 0x38
   c321c:	e7a4      	b.n	c3168 <_malloc_r+0x358>
   c321e:	42bc      	cmp	r4, r7
   c3220:	d054      	beq.n	c32cc <_malloc_r+0x4bc>
   c3222:	68bc      	ldr	r4, [r7, #8]
   c3224:	6862      	ldr	r2, [r4, #4]
   c3226:	f022 0203 	bic.w	r2, r2, #3
   c322a:	e75e      	b.n	c30ea <_malloc_r+0x2da>
   c322c:	f859 3908 	ldr.w	r3, [r9], #-8
   c3230:	4599      	cmp	r9, r3
   c3232:	f040 8086 	bne.w	c3342 <_malloc_r+0x532>
   c3236:	f010 0f03 	tst.w	r0, #3
   c323a:	f100 30ff 	add.w	r0, r0, #4294967295
   c323e:	d1f5      	bne.n	c322c <_malloc_r+0x41c>
   c3240:	687b      	ldr	r3, [r7, #4]
   c3242:	ea23 0304 	bic.w	r3, r3, r4
   c3246:	607b      	str	r3, [r7, #4]
   c3248:	0064      	lsls	r4, r4, #1
   c324a:	429c      	cmp	r4, r3
   c324c:	f63f aec8 	bhi.w	c2fe0 <_malloc_r+0x1d0>
   c3250:	2c00      	cmp	r4, #0
   c3252:	f43f aec5 	beq.w	c2fe0 <_malloc_r+0x1d0>
   c3256:	421c      	tst	r4, r3
   c3258:	4640      	mov	r0, r8
   c325a:	f47f ae4c 	bne.w	c2ef6 <_malloc_r+0xe6>
   c325e:	0064      	lsls	r4, r4, #1
   c3260:	421c      	tst	r4, r3
   c3262:	f100 0004 	add.w	r0, r0, #4
   c3266:	d0fa      	beq.n	c325e <_malloc_r+0x44e>
   c3268:	e645      	b.n	c2ef6 <_malloc_r+0xe6>
   c326a:	468c      	mov	ip, r1
   c326c:	e78c      	b.n	c3188 <_malloc_r+0x378>
   c326e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   c3272:	d815      	bhi.n	c32a0 <_malloc_r+0x490>
   c3274:	0bf3      	lsrs	r3, r6, #15
   c3276:	f103 0078 	add.w	r0, r3, #120	; 0x78
   c327a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   c327e:	00c1      	lsls	r1, r0, #3
   c3280:	e5e8      	b.n	c2e54 <_malloc_r+0x44>
   c3282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   c3286:	e6ee      	b.n	c3066 <_malloc_r+0x256>
   c3288:	2101      	movs	r1, #1
   c328a:	687b      	ldr	r3, [r7, #4]
   c328c:	1092      	asrs	r2, r2, #2
   c328e:	fa01 f202 	lsl.w	r2, r1, r2
   c3292:	431a      	orrs	r2, r3
   c3294:	607a      	str	r2, [r7, #4]
   c3296:	4663      	mov	r3, ip
   c3298:	e779      	b.n	c318e <_malloc_r+0x37e>
   c329a:	2301      	movs	r3, #1
   c329c:	6053      	str	r3, [r2, #4]
   c329e:	e72a      	b.n	c30f6 <_malloc_r+0x2e6>
   c32a0:	f240 5254 	movw	r2, #1364	; 0x554
   c32a4:	4293      	cmp	r3, r2
   c32a6:	d822      	bhi.n	c32ee <_malloc_r+0x4de>
   c32a8:	0cb3      	lsrs	r3, r6, #18
   c32aa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   c32ae:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   c32b2:	00c1      	lsls	r1, r0, #3
   c32b4:	e5ce      	b.n	c2e54 <_malloc_r+0x44>
   c32b6:	f103 0b10 	add.w	fp, r3, #16
   c32ba:	e6af      	b.n	c301c <_malloc_r+0x20c>
   c32bc:	2a54      	cmp	r2, #84	; 0x54
   c32be:	d829      	bhi.n	c3314 <_malloc_r+0x504>
   c32c0:	0b1a      	lsrs	r2, r3, #12
   c32c2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   c32c6:	00c9      	lsls	r1, r1, #3
   c32c8:	326e      	adds	r2, #110	; 0x6e
   c32ca:	e74d      	b.n	c3168 <_malloc_r+0x358>
   c32cc:	4b20      	ldr	r3, [pc, #128]	; (c3350 <_malloc_r+0x540>)
   c32ce:	6819      	ldr	r1, [r3, #0]
   c32d0:	4459      	add	r1, fp
   c32d2:	6019      	str	r1, [r3, #0]
   c32d4:	e6b3      	b.n	c303e <_malloc_r+0x22e>
   c32d6:	f3ca 000b 	ubfx	r0, sl, #0, #12
   c32da:	2800      	cmp	r0, #0
   c32dc:	f47f aeaf 	bne.w	c303e <_malloc_r+0x22e>
   c32e0:	eb08 030b 	add.w	r3, r8, fp
   c32e4:	68ba      	ldr	r2, [r7, #8]
   c32e6:	f043 0301 	orr.w	r3, r3, #1
   c32ea:	6053      	str	r3, [r2, #4]
   c32ec:	e6ef      	b.n	c30ce <_malloc_r+0x2be>
   c32ee:	207f      	movs	r0, #127	; 0x7f
   c32f0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   c32f4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   c32f8:	e5ac      	b.n	c2e54 <_malloc_r+0x44>
   c32fa:	f104 0108 	add.w	r1, r4, #8
   c32fe:	4628      	mov	r0, r5
   c3300:	9300      	str	r3, [sp, #0]
   c3302:	f7ff fa67 	bl	c27d4 <_free_r>
   c3306:	9b00      	ldr	r3, [sp, #0]
   c3308:	6819      	ldr	r1, [r3, #0]
   c330a:	e6e0      	b.n	c30ce <_malloc_r+0x2be>
   c330c:	2001      	movs	r0, #1
   c330e:	f04f 0900 	mov.w	r9, #0
   c3312:	e6bd      	b.n	c3090 <_malloc_r+0x280>
   c3314:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   c3318:	d805      	bhi.n	c3326 <_malloc_r+0x516>
   c331a:	0bda      	lsrs	r2, r3, #15
   c331c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   c3320:	00c9      	lsls	r1, r1, #3
   c3322:	3277      	adds	r2, #119	; 0x77
   c3324:	e720      	b.n	c3168 <_malloc_r+0x358>
   c3326:	f240 5154 	movw	r1, #1364	; 0x554
   c332a:	428a      	cmp	r2, r1
   c332c:	d805      	bhi.n	c333a <_malloc_r+0x52a>
   c332e:	0c9a      	lsrs	r2, r3, #18
   c3330:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   c3334:	00c9      	lsls	r1, r1, #3
   c3336:	327c      	adds	r2, #124	; 0x7c
   c3338:	e716      	b.n	c3168 <_malloc_r+0x358>
   c333a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   c333e:	227e      	movs	r2, #126	; 0x7e
   c3340:	e712      	b.n	c3168 <_malloc_r+0x358>
   c3342:	687b      	ldr	r3, [r7, #4]
   c3344:	e780      	b.n	c3248 <_malloc_r+0x438>
   c3346:	08f0      	lsrs	r0, r6, #3
   c3348:	f106 0308 	add.w	r3, r6, #8
   c334c:	e60e      	b.n	c2f6c <_malloc_r+0x15c>
   c334e:	bf00      	nop
   c3350:	20070d0c 	.word	0x20070d0c

000c3354 <__ascii_mbtowc>:
   c3354:	b082      	sub	sp, #8
   c3356:	b149      	cbz	r1, c336c <__ascii_mbtowc+0x18>
   c3358:	b15a      	cbz	r2, c3372 <__ascii_mbtowc+0x1e>
   c335a:	b16b      	cbz	r3, c3378 <__ascii_mbtowc+0x24>
   c335c:	7813      	ldrb	r3, [r2, #0]
   c335e:	600b      	str	r3, [r1, #0]
   c3360:	7812      	ldrb	r2, [r2, #0]
   c3362:	1c10      	adds	r0, r2, #0
   c3364:	bf18      	it	ne
   c3366:	2001      	movne	r0, #1
   c3368:	b002      	add	sp, #8
   c336a:	4770      	bx	lr
   c336c:	a901      	add	r1, sp, #4
   c336e:	2a00      	cmp	r2, #0
   c3370:	d1f3      	bne.n	c335a <__ascii_mbtowc+0x6>
   c3372:	4610      	mov	r0, r2
   c3374:	b002      	add	sp, #8
   c3376:	4770      	bx	lr
   c3378:	f06f 0001 	mvn.w	r0, #1
   c337c:	e7f4      	b.n	c3368 <__ascii_mbtowc+0x14>
   c337e:	bf00      	nop

000c3380 <memchr>:
   c3380:	0783      	lsls	r3, r0, #30
   c3382:	b470      	push	{r4, r5, r6}
   c3384:	b2cd      	uxtb	r5, r1
   c3386:	d03d      	beq.n	c3404 <memchr+0x84>
   c3388:	1e54      	subs	r4, r2, #1
   c338a:	b30a      	cbz	r2, c33d0 <memchr+0x50>
   c338c:	7803      	ldrb	r3, [r0, #0]
   c338e:	42ab      	cmp	r3, r5
   c3390:	d01f      	beq.n	c33d2 <memchr+0x52>
   c3392:	1c43      	adds	r3, r0, #1
   c3394:	e005      	b.n	c33a2 <memchr+0x22>
   c3396:	f114 34ff 	adds.w	r4, r4, #4294967295
   c339a:	d319      	bcc.n	c33d0 <memchr+0x50>
   c339c:	7802      	ldrb	r2, [r0, #0]
   c339e:	42aa      	cmp	r2, r5
   c33a0:	d017      	beq.n	c33d2 <memchr+0x52>
   c33a2:	f013 0f03 	tst.w	r3, #3
   c33a6:	4618      	mov	r0, r3
   c33a8:	f103 0301 	add.w	r3, r3, #1
   c33ac:	d1f3      	bne.n	c3396 <memchr+0x16>
   c33ae:	2c03      	cmp	r4, #3
   c33b0:	d811      	bhi.n	c33d6 <memchr+0x56>
   c33b2:	b34c      	cbz	r4, c3408 <memchr+0x88>
   c33b4:	7803      	ldrb	r3, [r0, #0]
   c33b6:	42ab      	cmp	r3, r5
   c33b8:	d00b      	beq.n	c33d2 <memchr+0x52>
   c33ba:	4404      	add	r4, r0
   c33bc:	1c43      	adds	r3, r0, #1
   c33be:	e002      	b.n	c33c6 <memchr+0x46>
   c33c0:	7802      	ldrb	r2, [r0, #0]
   c33c2:	42aa      	cmp	r2, r5
   c33c4:	d005      	beq.n	c33d2 <memchr+0x52>
   c33c6:	429c      	cmp	r4, r3
   c33c8:	4618      	mov	r0, r3
   c33ca:	f103 0301 	add.w	r3, r3, #1
   c33ce:	d1f7      	bne.n	c33c0 <memchr+0x40>
   c33d0:	2000      	movs	r0, #0
   c33d2:	bc70      	pop	{r4, r5, r6}
   c33d4:	4770      	bx	lr
   c33d6:	0209      	lsls	r1, r1, #8
   c33d8:	b289      	uxth	r1, r1
   c33da:	4329      	orrs	r1, r5
   c33dc:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   c33e0:	6803      	ldr	r3, [r0, #0]
   c33e2:	4606      	mov	r6, r0
   c33e4:	404b      	eors	r3, r1
   c33e6:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   c33ea:	ea22 0303 	bic.w	r3, r2, r3
   c33ee:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   c33f2:	f100 0004 	add.w	r0, r0, #4
   c33f6:	d103      	bne.n	c3400 <memchr+0x80>
   c33f8:	3c04      	subs	r4, #4
   c33fa:	2c03      	cmp	r4, #3
   c33fc:	d8f0      	bhi.n	c33e0 <memchr+0x60>
   c33fe:	e7d8      	b.n	c33b2 <memchr+0x32>
   c3400:	4630      	mov	r0, r6
   c3402:	e7d7      	b.n	c33b4 <memchr+0x34>
   c3404:	4614      	mov	r4, r2
   c3406:	e7d2      	b.n	c33ae <memchr+0x2e>
   c3408:	4620      	mov	r0, r4
   c340a:	e7e2      	b.n	c33d2 <memchr+0x52>

000c340c <memmove>:
   c340c:	4288      	cmp	r0, r1
   c340e:	b5f0      	push	{r4, r5, r6, r7, lr}
   c3410:	d90d      	bls.n	c342e <memmove+0x22>
   c3412:	188b      	adds	r3, r1, r2
   c3414:	4298      	cmp	r0, r3
   c3416:	d20a      	bcs.n	c342e <memmove+0x22>
   c3418:	1884      	adds	r4, r0, r2
   c341a:	2a00      	cmp	r2, #0
   c341c:	d051      	beq.n	c34c2 <memmove+0xb6>
   c341e:	4622      	mov	r2, r4
   c3420:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c3424:	4299      	cmp	r1, r3
   c3426:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c342a:	d1f9      	bne.n	c3420 <memmove+0x14>
   c342c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c342e:	2a0f      	cmp	r2, #15
   c3430:	d948      	bls.n	c34c4 <memmove+0xb8>
   c3432:	ea41 0300 	orr.w	r3, r1, r0
   c3436:	079b      	lsls	r3, r3, #30
   c3438:	d146      	bne.n	c34c8 <memmove+0xbc>
   c343a:	4615      	mov	r5, r2
   c343c:	f100 0410 	add.w	r4, r0, #16
   c3440:	f101 0310 	add.w	r3, r1, #16
   c3444:	f853 6c10 	ldr.w	r6, [r3, #-16]
   c3448:	3d10      	subs	r5, #16
   c344a:	f844 6c10 	str.w	r6, [r4, #-16]
   c344e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   c3452:	2d0f      	cmp	r5, #15
   c3454:	f844 6c0c 	str.w	r6, [r4, #-12]
   c3458:	f853 6c08 	ldr.w	r6, [r3, #-8]
   c345c:	f104 0410 	add.w	r4, r4, #16
   c3460:	f844 6c18 	str.w	r6, [r4, #-24]
   c3464:	f853 6c04 	ldr.w	r6, [r3, #-4]
   c3468:	f103 0310 	add.w	r3, r3, #16
   c346c:	f844 6c14 	str.w	r6, [r4, #-20]
   c3470:	d8e8      	bhi.n	c3444 <memmove+0x38>
   c3472:	f1a2 0310 	sub.w	r3, r2, #16
   c3476:	f023 030f 	bic.w	r3, r3, #15
   c347a:	f002 0e0f 	and.w	lr, r2, #15
   c347e:	3310      	adds	r3, #16
   c3480:	f1be 0f03 	cmp.w	lr, #3
   c3484:	4419      	add	r1, r3
   c3486:	4403      	add	r3, r0
   c3488:	d921      	bls.n	c34ce <memmove+0xc2>
   c348a:	460e      	mov	r6, r1
   c348c:	4674      	mov	r4, lr
   c348e:	1f1d      	subs	r5, r3, #4
   c3490:	f856 7b04 	ldr.w	r7, [r6], #4
   c3494:	3c04      	subs	r4, #4
   c3496:	2c03      	cmp	r4, #3
   c3498:	f845 7f04 	str.w	r7, [r5, #4]!
   c349c:	d8f8      	bhi.n	c3490 <memmove+0x84>
   c349e:	f1ae 0404 	sub.w	r4, lr, #4
   c34a2:	f024 0403 	bic.w	r4, r4, #3
   c34a6:	3404      	adds	r4, #4
   c34a8:	4421      	add	r1, r4
   c34aa:	4423      	add	r3, r4
   c34ac:	f002 0203 	and.w	r2, r2, #3
   c34b0:	b162      	cbz	r2, c34cc <memmove+0xc0>
   c34b2:	3b01      	subs	r3, #1
   c34b4:	440a      	add	r2, r1
   c34b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   c34ba:	428a      	cmp	r2, r1
   c34bc:	f803 4f01 	strb.w	r4, [r3, #1]!
   c34c0:	d1f9      	bne.n	c34b6 <memmove+0xaa>
   c34c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c34c4:	4603      	mov	r3, r0
   c34c6:	e7f3      	b.n	c34b0 <memmove+0xa4>
   c34c8:	4603      	mov	r3, r0
   c34ca:	e7f2      	b.n	c34b2 <memmove+0xa6>
   c34cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c34ce:	4672      	mov	r2, lr
   c34d0:	e7ee      	b.n	c34b0 <memmove+0xa4>
   c34d2:	bf00      	nop

000c34d4 <__malloc_lock>:
   c34d4:	4801      	ldr	r0, [pc, #4]	; (c34dc <__malloc_lock+0x8>)
   c34d6:	f7ff bc17 	b.w	c2d08 <__retarget_lock_acquire_recursive>
   c34da:	bf00      	nop
   c34dc:	20070d5c 	.word	0x20070d5c

000c34e0 <__malloc_unlock>:
   c34e0:	4801      	ldr	r0, [pc, #4]	; (c34e8 <__malloc_unlock+0x8>)
   c34e2:	f7ff bc13 	b.w	c2d0c <__retarget_lock_release_recursive>
   c34e6:	bf00      	nop
   c34e8:	20070d5c 	.word	0x20070d5c

000c34ec <_realloc_r>:
   c34ec:	2900      	cmp	r1, #0
   c34ee:	f000 8094 	beq.w	c361a <_realloc_r+0x12e>
   c34f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c34f6:	460c      	mov	r4, r1
   c34f8:	4615      	mov	r5, r2
   c34fa:	b083      	sub	sp, #12
   c34fc:	4680      	mov	r8, r0
   c34fe:	f105 060b 	add.w	r6, r5, #11
   c3502:	f7ff ffe7 	bl	c34d4 <__malloc_lock>
   c3506:	f854 ec04 	ldr.w	lr, [r4, #-4]
   c350a:	2e16      	cmp	r6, #22
   c350c:	f02e 0703 	bic.w	r7, lr, #3
   c3510:	f1a4 0908 	sub.w	r9, r4, #8
   c3514:	d83c      	bhi.n	c3590 <_realloc_r+0xa4>
   c3516:	2210      	movs	r2, #16
   c3518:	4616      	mov	r6, r2
   c351a:	42b5      	cmp	r5, r6
   c351c:	d83d      	bhi.n	c359a <_realloc_r+0xae>
   c351e:	4297      	cmp	r7, r2
   c3520:	da43      	bge.n	c35aa <_realloc_r+0xbe>
   c3522:	4bc6      	ldr	r3, [pc, #792]	; (c383c <_realloc_r+0x350>)
   c3524:	eb09 0007 	add.w	r0, r9, r7
   c3528:	6899      	ldr	r1, [r3, #8]
   c352a:	4288      	cmp	r0, r1
   c352c:	f000 80c3 	beq.w	c36b6 <_realloc_r+0x1ca>
   c3530:	6843      	ldr	r3, [r0, #4]
   c3532:	f023 0101 	bic.w	r1, r3, #1
   c3536:	4401      	add	r1, r0
   c3538:	6849      	ldr	r1, [r1, #4]
   c353a:	07c9      	lsls	r1, r1, #31
   c353c:	d54d      	bpl.n	c35da <_realloc_r+0xee>
   c353e:	f01e 0f01 	tst.w	lr, #1
   c3542:	f000 809b 	beq.w	c367c <_realloc_r+0x190>
   c3546:	4629      	mov	r1, r5
   c3548:	4640      	mov	r0, r8
   c354a:	f7ff fc61 	bl	c2e10 <_malloc_r>
   c354e:	4605      	mov	r5, r0
   c3550:	2800      	cmp	r0, #0
   c3552:	d03b      	beq.n	c35cc <_realloc_r+0xe0>
   c3554:	f854 3c04 	ldr.w	r3, [r4, #-4]
   c3558:	f1a0 0208 	sub.w	r2, r0, #8
   c355c:	f023 0301 	bic.w	r3, r3, #1
   c3560:	444b      	add	r3, r9
   c3562:	429a      	cmp	r2, r3
   c3564:	f000 812b 	beq.w	c37be <_realloc_r+0x2d2>
   c3568:	1f3a      	subs	r2, r7, #4
   c356a:	2a24      	cmp	r2, #36	; 0x24
   c356c:	f200 8118 	bhi.w	c37a0 <_realloc_r+0x2b4>
   c3570:	2a13      	cmp	r2, #19
   c3572:	f200 80eb 	bhi.w	c374c <_realloc_r+0x260>
   c3576:	4603      	mov	r3, r0
   c3578:	4622      	mov	r2, r4
   c357a:	6811      	ldr	r1, [r2, #0]
   c357c:	6019      	str	r1, [r3, #0]
   c357e:	6851      	ldr	r1, [r2, #4]
   c3580:	6059      	str	r1, [r3, #4]
   c3582:	6892      	ldr	r2, [r2, #8]
   c3584:	609a      	str	r2, [r3, #8]
   c3586:	4621      	mov	r1, r4
   c3588:	4640      	mov	r0, r8
   c358a:	f7ff f923 	bl	c27d4 <_free_r>
   c358e:	e01d      	b.n	c35cc <_realloc_r+0xe0>
   c3590:	f026 0607 	bic.w	r6, r6, #7
   c3594:	2e00      	cmp	r6, #0
   c3596:	4632      	mov	r2, r6
   c3598:	dabf      	bge.n	c351a <_realloc_r+0x2e>
   c359a:	2500      	movs	r5, #0
   c359c:	230c      	movs	r3, #12
   c359e:	4628      	mov	r0, r5
   c35a0:	f8c8 3000 	str.w	r3, [r8]
   c35a4:	b003      	add	sp, #12
   c35a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c35aa:	4625      	mov	r5, r4
   c35ac:	1bbb      	subs	r3, r7, r6
   c35ae:	2b0f      	cmp	r3, #15
   c35b0:	f8d9 2004 	ldr.w	r2, [r9, #4]
   c35b4:	d81d      	bhi.n	c35f2 <_realloc_r+0x106>
   c35b6:	f002 0201 	and.w	r2, r2, #1
   c35ba:	433a      	orrs	r2, r7
   c35bc:	eb09 0107 	add.w	r1, r9, r7
   c35c0:	f8c9 2004 	str.w	r2, [r9, #4]
   c35c4:	684b      	ldr	r3, [r1, #4]
   c35c6:	f043 0301 	orr.w	r3, r3, #1
   c35ca:	604b      	str	r3, [r1, #4]
   c35cc:	4640      	mov	r0, r8
   c35ce:	f7ff ff87 	bl	c34e0 <__malloc_unlock>
   c35d2:	4628      	mov	r0, r5
   c35d4:	b003      	add	sp, #12
   c35d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c35da:	f023 0303 	bic.w	r3, r3, #3
   c35de:	18f9      	adds	r1, r7, r3
   c35e0:	4291      	cmp	r1, r2
   c35e2:	db1d      	blt.n	c3620 <_realloc_r+0x134>
   c35e4:	68c3      	ldr	r3, [r0, #12]
   c35e6:	6882      	ldr	r2, [r0, #8]
   c35e8:	4625      	mov	r5, r4
   c35ea:	60d3      	str	r3, [r2, #12]
   c35ec:	460f      	mov	r7, r1
   c35ee:	609a      	str	r2, [r3, #8]
   c35f0:	e7dc      	b.n	c35ac <_realloc_r+0xc0>
   c35f2:	f002 0201 	and.w	r2, r2, #1
   c35f6:	eb09 0106 	add.w	r1, r9, r6
   c35fa:	f043 0301 	orr.w	r3, r3, #1
   c35fe:	4332      	orrs	r2, r6
   c3600:	f8c9 2004 	str.w	r2, [r9, #4]
   c3604:	444f      	add	r7, r9
   c3606:	604b      	str	r3, [r1, #4]
   c3608:	687b      	ldr	r3, [r7, #4]
   c360a:	3108      	adds	r1, #8
   c360c:	f043 0301 	orr.w	r3, r3, #1
   c3610:	607b      	str	r3, [r7, #4]
   c3612:	4640      	mov	r0, r8
   c3614:	f7ff f8de 	bl	c27d4 <_free_r>
   c3618:	e7d8      	b.n	c35cc <_realloc_r+0xe0>
   c361a:	4611      	mov	r1, r2
   c361c:	f7ff bbf8 	b.w	c2e10 <_malloc_r>
   c3620:	f01e 0f01 	tst.w	lr, #1
   c3624:	d18f      	bne.n	c3546 <_realloc_r+0x5a>
   c3626:	f854 1c08 	ldr.w	r1, [r4, #-8]
   c362a:	eba9 0a01 	sub.w	sl, r9, r1
   c362e:	f8da 1004 	ldr.w	r1, [sl, #4]
   c3632:	f021 0103 	bic.w	r1, r1, #3
   c3636:	440b      	add	r3, r1
   c3638:	443b      	add	r3, r7
   c363a:	4293      	cmp	r3, r2
   c363c:	db26      	blt.n	c368c <_realloc_r+0x1a0>
   c363e:	4655      	mov	r5, sl
   c3640:	68c1      	ldr	r1, [r0, #12]
   c3642:	6880      	ldr	r0, [r0, #8]
   c3644:	1f3a      	subs	r2, r7, #4
   c3646:	60c1      	str	r1, [r0, #12]
   c3648:	6088      	str	r0, [r1, #8]
   c364a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   c364e:	f8da 100c 	ldr.w	r1, [sl, #12]
   c3652:	2a24      	cmp	r2, #36	; 0x24
   c3654:	60c1      	str	r1, [r0, #12]
   c3656:	6088      	str	r0, [r1, #8]
   c3658:	d826      	bhi.n	c36a8 <_realloc_r+0x1bc>
   c365a:	2a13      	cmp	r2, #19
   c365c:	f240 8081 	bls.w	c3762 <_realloc_r+0x276>
   c3660:	6821      	ldr	r1, [r4, #0]
   c3662:	2a1b      	cmp	r2, #27
   c3664:	f8ca 1008 	str.w	r1, [sl, #8]
   c3668:	6861      	ldr	r1, [r4, #4]
   c366a:	f8ca 100c 	str.w	r1, [sl, #12]
   c366e:	f200 80ad 	bhi.w	c37cc <_realloc_r+0x2e0>
   c3672:	f104 0008 	add.w	r0, r4, #8
   c3676:	f10a 0210 	add.w	r2, sl, #16
   c367a:	e074      	b.n	c3766 <_realloc_r+0x27a>
   c367c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   c3680:	eba9 0a03 	sub.w	sl, r9, r3
   c3684:	f8da 1004 	ldr.w	r1, [sl, #4]
   c3688:	f021 0103 	bic.w	r1, r1, #3
   c368c:	187b      	adds	r3, r7, r1
   c368e:	4293      	cmp	r3, r2
   c3690:	f6ff af59 	blt.w	c3546 <_realloc_r+0x5a>
   c3694:	4655      	mov	r5, sl
   c3696:	f8da 100c 	ldr.w	r1, [sl, #12]
   c369a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   c369e:	1f3a      	subs	r2, r7, #4
   c36a0:	2a24      	cmp	r2, #36	; 0x24
   c36a2:	60c1      	str	r1, [r0, #12]
   c36a4:	6088      	str	r0, [r1, #8]
   c36a6:	d9d8      	bls.n	c365a <_realloc_r+0x16e>
   c36a8:	4621      	mov	r1, r4
   c36aa:	4628      	mov	r0, r5
   c36ac:	461f      	mov	r7, r3
   c36ae:	46d1      	mov	r9, sl
   c36b0:	f7ff feac 	bl	c340c <memmove>
   c36b4:	e77a      	b.n	c35ac <_realloc_r+0xc0>
   c36b6:	6841      	ldr	r1, [r0, #4]
   c36b8:	f106 0010 	add.w	r0, r6, #16
   c36bc:	f021 0b03 	bic.w	fp, r1, #3
   c36c0:	44bb      	add	fp, r7
   c36c2:	4583      	cmp	fp, r0
   c36c4:	da58      	bge.n	c3778 <_realloc_r+0x28c>
   c36c6:	f01e 0f01 	tst.w	lr, #1
   c36ca:	f47f af3c 	bne.w	c3546 <_realloc_r+0x5a>
   c36ce:	f854 1c08 	ldr.w	r1, [r4, #-8]
   c36d2:	eba9 0a01 	sub.w	sl, r9, r1
   c36d6:	f8da 1004 	ldr.w	r1, [sl, #4]
   c36da:	f021 0103 	bic.w	r1, r1, #3
   c36de:	448b      	add	fp, r1
   c36e0:	4558      	cmp	r0, fp
   c36e2:	dcd3      	bgt.n	c368c <_realloc_r+0x1a0>
   c36e4:	4655      	mov	r5, sl
   c36e6:	f8da 100c 	ldr.w	r1, [sl, #12]
   c36ea:	f855 0f08 	ldr.w	r0, [r5, #8]!
   c36ee:	1f3a      	subs	r2, r7, #4
   c36f0:	2a24      	cmp	r2, #36	; 0x24
   c36f2:	60c1      	str	r1, [r0, #12]
   c36f4:	6088      	str	r0, [r1, #8]
   c36f6:	f200 808d 	bhi.w	c3814 <_realloc_r+0x328>
   c36fa:	2a13      	cmp	r2, #19
   c36fc:	f240 8087 	bls.w	c380e <_realloc_r+0x322>
   c3700:	6821      	ldr	r1, [r4, #0]
   c3702:	2a1b      	cmp	r2, #27
   c3704:	f8ca 1008 	str.w	r1, [sl, #8]
   c3708:	6861      	ldr	r1, [r4, #4]
   c370a:	f8ca 100c 	str.w	r1, [sl, #12]
   c370e:	f200 8088 	bhi.w	c3822 <_realloc_r+0x336>
   c3712:	f104 0108 	add.w	r1, r4, #8
   c3716:	f10a 0210 	add.w	r2, sl, #16
   c371a:	6808      	ldr	r0, [r1, #0]
   c371c:	6010      	str	r0, [r2, #0]
   c371e:	6848      	ldr	r0, [r1, #4]
   c3720:	6050      	str	r0, [r2, #4]
   c3722:	6889      	ldr	r1, [r1, #8]
   c3724:	6091      	str	r1, [r2, #8]
   c3726:	ebab 0206 	sub.w	r2, fp, r6
   c372a:	eb0a 0106 	add.w	r1, sl, r6
   c372e:	f042 0201 	orr.w	r2, r2, #1
   c3732:	6099      	str	r1, [r3, #8]
   c3734:	604a      	str	r2, [r1, #4]
   c3736:	f8da 3004 	ldr.w	r3, [sl, #4]
   c373a:	4640      	mov	r0, r8
   c373c:	f003 0301 	and.w	r3, r3, #1
   c3740:	431e      	orrs	r6, r3
   c3742:	f8ca 6004 	str.w	r6, [sl, #4]
   c3746:	f7ff fecb 	bl	c34e0 <__malloc_unlock>
   c374a:	e742      	b.n	c35d2 <_realloc_r+0xe6>
   c374c:	6823      	ldr	r3, [r4, #0]
   c374e:	2a1b      	cmp	r2, #27
   c3750:	6003      	str	r3, [r0, #0]
   c3752:	6863      	ldr	r3, [r4, #4]
   c3754:	6043      	str	r3, [r0, #4]
   c3756:	d827      	bhi.n	c37a8 <_realloc_r+0x2bc>
   c3758:	f100 0308 	add.w	r3, r0, #8
   c375c:	f104 0208 	add.w	r2, r4, #8
   c3760:	e70b      	b.n	c357a <_realloc_r+0x8e>
   c3762:	4620      	mov	r0, r4
   c3764:	462a      	mov	r2, r5
   c3766:	6801      	ldr	r1, [r0, #0]
   c3768:	461f      	mov	r7, r3
   c376a:	6011      	str	r1, [r2, #0]
   c376c:	6841      	ldr	r1, [r0, #4]
   c376e:	46d1      	mov	r9, sl
   c3770:	6051      	str	r1, [r2, #4]
   c3772:	6883      	ldr	r3, [r0, #8]
   c3774:	6093      	str	r3, [r2, #8]
   c3776:	e719      	b.n	c35ac <_realloc_r+0xc0>
   c3778:	ebab 0b06 	sub.w	fp, fp, r6
   c377c:	eb09 0106 	add.w	r1, r9, r6
   c3780:	f04b 0201 	orr.w	r2, fp, #1
   c3784:	6099      	str	r1, [r3, #8]
   c3786:	604a      	str	r2, [r1, #4]
   c3788:	f854 3c04 	ldr.w	r3, [r4, #-4]
   c378c:	4640      	mov	r0, r8
   c378e:	f003 0301 	and.w	r3, r3, #1
   c3792:	431e      	orrs	r6, r3
   c3794:	f844 6c04 	str.w	r6, [r4, #-4]
   c3798:	f7ff fea2 	bl	c34e0 <__malloc_unlock>
   c379c:	4625      	mov	r5, r4
   c379e:	e718      	b.n	c35d2 <_realloc_r+0xe6>
   c37a0:	4621      	mov	r1, r4
   c37a2:	f7ff fe33 	bl	c340c <memmove>
   c37a6:	e6ee      	b.n	c3586 <_realloc_r+0x9a>
   c37a8:	68a3      	ldr	r3, [r4, #8]
   c37aa:	2a24      	cmp	r2, #36	; 0x24
   c37ac:	6083      	str	r3, [r0, #8]
   c37ae:	68e3      	ldr	r3, [r4, #12]
   c37b0:	60c3      	str	r3, [r0, #12]
   c37b2:	d018      	beq.n	c37e6 <_realloc_r+0x2fa>
   c37b4:	f100 0310 	add.w	r3, r0, #16
   c37b8:	f104 0210 	add.w	r2, r4, #16
   c37bc:	e6dd      	b.n	c357a <_realloc_r+0x8e>
   c37be:	f850 3c04 	ldr.w	r3, [r0, #-4]
   c37c2:	4625      	mov	r5, r4
   c37c4:	f023 0303 	bic.w	r3, r3, #3
   c37c8:	441f      	add	r7, r3
   c37ca:	e6ef      	b.n	c35ac <_realloc_r+0xc0>
   c37cc:	68a1      	ldr	r1, [r4, #8]
   c37ce:	2a24      	cmp	r2, #36	; 0x24
   c37d0:	f8ca 1010 	str.w	r1, [sl, #16]
   c37d4:	68e1      	ldr	r1, [r4, #12]
   c37d6:	f8ca 1014 	str.w	r1, [sl, #20]
   c37da:	d00d      	beq.n	c37f8 <_realloc_r+0x30c>
   c37dc:	f104 0010 	add.w	r0, r4, #16
   c37e0:	f10a 0218 	add.w	r2, sl, #24
   c37e4:	e7bf      	b.n	c3766 <_realloc_r+0x27a>
   c37e6:	6922      	ldr	r2, [r4, #16]
   c37e8:	f100 0318 	add.w	r3, r0, #24
   c37ec:	6102      	str	r2, [r0, #16]
   c37ee:	6961      	ldr	r1, [r4, #20]
   c37f0:	f104 0218 	add.w	r2, r4, #24
   c37f4:	6141      	str	r1, [r0, #20]
   c37f6:	e6c0      	b.n	c357a <_realloc_r+0x8e>
   c37f8:	6922      	ldr	r2, [r4, #16]
   c37fa:	f104 0018 	add.w	r0, r4, #24
   c37fe:	f8ca 2018 	str.w	r2, [sl, #24]
   c3802:	6961      	ldr	r1, [r4, #20]
   c3804:	f10a 0220 	add.w	r2, sl, #32
   c3808:	f8ca 101c 	str.w	r1, [sl, #28]
   c380c:	e7ab      	b.n	c3766 <_realloc_r+0x27a>
   c380e:	4621      	mov	r1, r4
   c3810:	462a      	mov	r2, r5
   c3812:	e782      	b.n	c371a <_realloc_r+0x22e>
   c3814:	4621      	mov	r1, r4
   c3816:	4628      	mov	r0, r5
   c3818:	9301      	str	r3, [sp, #4]
   c381a:	f7ff fdf7 	bl	c340c <memmove>
   c381e:	9b01      	ldr	r3, [sp, #4]
   c3820:	e781      	b.n	c3726 <_realloc_r+0x23a>
   c3822:	68a1      	ldr	r1, [r4, #8]
   c3824:	2a24      	cmp	r2, #36	; 0x24
   c3826:	f8ca 1010 	str.w	r1, [sl, #16]
   c382a:	68e1      	ldr	r1, [r4, #12]
   c382c:	f8ca 1014 	str.w	r1, [sl, #20]
   c3830:	d006      	beq.n	c3840 <_realloc_r+0x354>
   c3832:	f104 0110 	add.w	r1, r4, #16
   c3836:	f10a 0218 	add.w	r2, sl, #24
   c383a:	e76e      	b.n	c371a <_realloc_r+0x22e>
   c383c:	20070760 	.word	0x20070760
   c3840:	6922      	ldr	r2, [r4, #16]
   c3842:	f104 0118 	add.w	r1, r4, #24
   c3846:	f8ca 2018 	str.w	r2, [sl, #24]
   c384a:	6960      	ldr	r0, [r4, #20]
   c384c:	f10a 0220 	add.w	r2, sl, #32
   c3850:	f8ca 001c 	str.w	r0, [sl, #28]
   c3854:	e761      	b.n	c371a <_realloc_r+0x22e>
   c3856:	bf00      	nop

000c3858 <_sbrk_r>:
   c3858:	b538      	push	{r3, r4, r5, lr}
   c385a:	2300      	movs	r3, #0
   c385c:	4c06      	ldr	r4, [pc, #24]	; (c3878 <_sbrk_r+0x20>)
   c385e:	4605      	mov	r5, r0
   c3860:	4608      	mov	r0, r1
   c3862:	6023      	str	r3, [r4, #0]
   c3864:	f7fd fa0e 	bl	c0c84 <_sbrk>
   c3868:	1c43      	adds	r3, r0, #1
   c386a:	d000      	beq.n	c386e <_sbrk_r+0x16>
   c386c:	bd38      	pop	{r3, r4, r5, pc}
   c386e:	6823      	ldr	r3, [r4, #0]
   c3870:	2b00      	cmp	r3, #0
   c3872:	d0fb      	beq.n	c386c <_sbrk_r+0x14>
   c3874:	602b      	str	r3, [r5, #0]
   c3876:	bd38      	pop	{r3, r4, r5, pc}
   c3878:	20070d70 	.word	0x20070d70

000c387c <__sread>:
   c387c:	b510      	push	{r4, lr}
   c387e:	460c      	mov	r4, r1
   c3880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   c3884:	f000 fa22 	bl	c3ccc <_read_r>
   c3888:	2800      	cmp	r0, #0
   c388a:	db03      	blt.n	c3894 <__sread+0x18>
   c388c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   c388e:	4403      	add	r3, r0
   c3890:	6523      	str	r3, [r4, #80]	; 0x50
   c3892:	bd10      	pop	{r4, pc}
   c3894:	89a3      	ldrh	r3, [r4, #12]
   c3896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   c389a:	81a3      	strh	r3, [r4, #12]
   c389c:	bd10      	pop	{r4, pc}
   c389e:	bf00      	nop

000c38a0 <__swrite>:
   c38a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c38a4:	460c      	mov	r4, r1
   c38a6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   c38aa:	461f      	mov	r7, r3
   c38ac:	05cb      	lsls	r3, r1, #23
   c38ae:	4616      	mov	r6, r2
   c38b0:	4605      	mov	r5, r0
   c38b2:	d507      	bpl.n	c38c4 <__swrite+0x24>
   c38b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   c38b8:	2302      	movs	r3, #2
   c38ba:	2200      	movs	r2, #0
   c38bc:	f000 f9f0 	bl	c3ca0 <_lseek_r>
   c38c0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   c38c4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   c38c8:	81a1      	strh	r1, [r4, #12]
   c38ca:	463b      	mov	r3, r7
   c38cc:	4632      	mov	r2, r6
   c38ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   c38d2:	4628      	mov	r0, r5
   c38d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c38d8:	f000 b8d0 	b.w	c3a7c <_write_r>

000c38dc <__sseek>:
   c38dc:	b510      	push	{r4, lr}
   c38de:	460c      	mov	r4, r1
   c38e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   c38e4:	f000 f9dc 	bl	c3ca0 <_lseek_r>
   c38e8:	89a3      	ldrh	r3, [r4, #12]
   c38ea:	1c42      	adds	r2, r0, #1
   c38ec:	bf0e      	itee	eq
   c38ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   c38f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   c38f6:	6520      	strne	r0, [r4, #80]	; 0x50
   c38f8:	81a3      	strh	r3, [r4, #12]
   c38fa:	bd10      	pop	{r4, pc}

000c38fc <__sclose>:
   c38fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   c3900:	f000 b934 	b.w	c3b6c <_close_r>

000c3904 <strlen>:
   c3904:	f020 0103 	bic.w	r1, r0, #3
   c3908:	f010 0003 	ands.w	r0, r0, #3
   c390c:	f1c0 0000 	rsb	r0, r0, #0
   c3910:	f851 3b04 	ldr.w	r3, [r1], #4
   c3914:	f100 0c04 	add.w	ip, r0, #4
   c3918:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   c391c:	f06f 0200 	mvn.w	r2, #0
   c3920:	bf1c      	itt	ne
   c3922:	fa22 f20c 	lsrne.w	r2, r2, ip
   c3926:	4313      	orrne	r3, r2
   c3928:	f04f 0c01 	mov.w	ip, #1
   c392c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   c3930:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   c3934:	eba3 020c 	sub.w	r2, r3, ip
   c3938:	ea22 0203 	bic.w	r2, r2, r3
   c393c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   c3940:	bf04      	itt	eq
   c3942:	f851 3b04 	ldreq.w	r3, [r1], #4
   c3946:	3004      	addeq	r0, #4
   c3948:	d0f4      	beq.n	c3934 <strlen+0x30>
   c394a:	f1c2 0100 	rsb	r1, r2, #0
   c394e:	ea02 0201 	and.w	r2, r2, r1
   c3952:	fab2 f282 	clz	r2, r2
   c3956:	f1c2 021f 	rsb	r2, r2, #31
   c395a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   c395e:	4770      	bx	lr

000c3960 <__swbuf_r>:
   c3960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c3962:	460d      	mov	r5, r1
   c3964:	4614      	mov	r4, r2
   c3966:	4606      	mov	r6, r0
   c3968:	b110      	cbz	r0, c3970 <__swbuf_r+0x10>
   c396a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   c396c:	2b00      	cmp	r3, #0
   c396e:	d04b      	beq.n	c3a08 <__swbuf_r+0xa8>
   c3970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   c3974:	69a3      	ldr	r3, [r4, #24]
   c3976:	b291      	uxth	r1, r2
   c3978:	0708      	lsls	r0, r1, #28
   c397a:	60a3      	str	r3, [r4, #8]
   c397c:	d539      	bpl.n	c39f2 <__swbuf_r+0x92>
   c397e:	6923      	ldr	r3, [r4, #16]
   c3980:	2b00      	cmp	r3, #0
   c3982:	d036      	beq.n	c39f2 <__swbuf_r+0x92>
   c3984:	b2ed      	uxtb	r5, r5
   c3986:	0489      	lsls	r1, r1, #18
   c3988:	462f      	mov	r7, r5
   c398a:	d515      	bpl.n	c39b8 <__swbuf_r+0x58>
   c398c:	6822      	ldr	r2, [r4, #0]
   c398e:	6961      	ldr	r1, [r4, #20]
   c3990:	1ad3      	subs	r3, r2, r3
   c3992:	428b      	cmp	r3, r1
   c3994:	da1c      	bge.n	c39d0 <__swbuf_r+0x70>
   c3996:	3301      	adds	r3, #1
   c3998:	68a1      	ldr	r1, [r4, #8]
   c399a:	1c50      	adds	r0, r2, #1
   c399c:	3901      	subs	r1, #1
   c399e:	60a1      	str	r1, [r4, #8]
   c39a0:	6020      	str	r0, [r4, #0]
   c39a2:	7015      	strb	r5, [r2, #0]
   c39a4:	6962      	ldr	r2, [r4, #20]
   c39a6:	429a      	cmp	r2, r3
   c39a8:	d01a      	beq.n	c39e0 <__swbuf_r+0x80>
   c39aa:	89a3      	ldrh	r3, [r4, #12]
   c39ac:	07db      	lsls	r3, r3, #31
   c39ae:	d501      	bpl.n	c39b4 <__swbuf_r+0x54>
   c39b0:	2d0a      	cmp	r5, #10
   c39b2:	d015      	beq.n	c39e0 <__swbuf_r+0x80>
   c39b4:	4638      	mov	r0, r7
   c39b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c39b8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   c39ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   c39be:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   c39c2:	81a2      	strh	r2, [r4, #12]
   c39c4:	6822      	ldr	r2, [r4, #0]
   c39c6:	6661      	str	r1, [r4, #100]	; 0x64
   c39c8:	6961      	ldr	r1, [r4, #20]
   c39ca:	1ad3      	subs	r3, r2, r3
   c39cc:	428b      	cmp	r3, r1
   c39ce:	dbe2      	blt.n	c3996 <__swbuf_r+0x36>
   c39d0:	4621      	mov	r1, r4
   c39d2:	4630      	mov	r0, r6
   c39d4:	f7fe fd80 	bl	c24d8 <_fflush_r>
   c39d8:	b940      	cbnz	r0, c39ec <__swbuf_r+0x8c>
   c39da:	2301      	movs	r3, #1
   c39dc:	6822      	ldr	r2, [r4, #0]
   c39de:	e7db      	b.n	c3998 <__swbuf_r+0x38>
   c39e0:	4621      	mov	r1, r4
   c39e2:	4630      	mov	r0, r6
   c39e4:	f7fe fd78 	bl	c24d8 <_fflush_r>
   c39e8:	2800      	cmp	r0, #0
   c39ea:	d0e3      	beq.n	c39b4 <__swbuf_r+0x54>
   c39ec:	f04f 37ff 	mov.w	r7, #4294967295
   c39f0:	e7e0      	b.n	c39b4 <__swbuf_r+0x54>
   c39f2:	4621      	mov	r1, r4
   c39f4:	4630      	mov	r0, r6
   c39f6:	f7fe fc5f 	bl	c22b8 <__swsetup_r>
   c39fa:	2800      	cmp	r0, #0
   c39fc:	d1f6      	bne.n	c39ec <__swbuf_r+0x8c>
   c39fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   c3a02:	6923      	ldr	r3, [r4, #16]
   c3a04:	b291      	uxth	r1, r2
   c3a06:	e7bd      	b.n	c3984 <__swbuf_r+0x24>
   c3a08:	f7fe fdbe 	bl	c2588 <__sinit>
   c3a0c:	e7b0      	b.n	c3970 <__swbuf_r+0x10>
   c3a0e:	bf00      	nop

000c3a10 <_wcrtomb_r>:
   c3a10:	b5f0      	push	{r4, r5, r6, r7, lr}
   c3a12:	4606      	mov	r6, r0
   c3a14:	b085      	sub	sp, #20
   c3a16:	461f      	mov	r7, r3
   c3a18:	b189      	cbz	r1, c3a3e <_wcrtomb_r+0x2e>
   c3a1a:	4c10      	ldr	r4, [pc, #64]	; (c3a5c <_wcrtomb_r+0x4c>)
   c3a1c:	4d10      	ldr	r5, [pc, #64]	; (c3a60 <_wcrtomb_r+0x50>)
   c3a1e:	6824      	ldr	r4, [r4, #0]
   c3a20:	6b64      	ldr	r4, [r4, #52]	; 0x34
   c3a22:	2c00      	cmp	r4, #0
   c3a24:	bf08      	it	eq
   c3a26:	462c      	moveq	r4, r5
   c3a28:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   c3a2c:	47a0      	blx	r4
   c3a2e:	1c43      	adds	r3, r0, #1
   c3a30:	d103      	bne.n	c3a3a <_wcrtomb_r+0x2a>
   c3a32:	2200      	movs	r2, #0
   c3a34:	238a      	movs	r3, #138	; 0x8a
   c3a36:	603a      	str	r2, [r7, #0]
   c3a38:	6033      	str	r3, [r6, #0]
   c3a3a:	b005      	add	sp, #20
   c3a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c3a3e:	460c      	mov	r4, r1
   c3a40:	4a06      	ldr	r2, [pc, #24]	; (c3a5c <_wcrtomb_r+0x4c>)
   c3a42:	4d07      	ldr	r5, [pc, #28]	; (c3a60 <_wcrtomb_r+0x50>)
   c3a44:	6811      	ldr	r1, [r2, #0]
   c3a46:	4622      	mov	r2, r4
   c3a48:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   c3a4a:	a901      	add	r1, sp, #4
   c3a4c:	2c00      	cmp	r4, #0
   c3a4e:	bf08      	it	eq
   c3a50:	462c      	moveq	r4, r5
   c3a52:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   c3a56:	47a0      	blx	r4
   c3a58:	e7e9      	b.n	c3a2e <_wcrtomb_r+0x1e>
   c3a5a:	bf00      	nop
   c3a5c:	200701c0 	.word	0x200701c0
   c3a60:	200705f4 	.word	0x200705f4

000c3a64 <__ascii_wctomb>:
   c3a64:	b119      	cbz	r1, c3a6e <__ascii_wctomb+0xa>
   c3a66:	2aff      	cmp	r2, #255	; 0xff
   c3a68:	d803      	bhi.n	c3a72 <__ascii_wctomb+0xe>
   c3a6a:	700a      	strb	r2, [r1, #0]
   c3a6c:	2101      	movs	r1, #1
   c3a6e:	4608      	mov	r0, r1
   c3a70:	4770      	bx	lr
   c3a72:	238a      	movs	r3, #138	; 0x8a
   c3a74:	f04f 31ff 	mov.w	r1, #4294967295
   c3a78:	6003      	str	r3, [r0, #0]
   c3a7a:	e7f8      	b.n	c3a6e <__ascii_wctomb+0xa>

000c3a7c <_write_r>:
   c3a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c3a7e:	460e      	mov	r6, r1
   c3a80:	2500      	movs	r5, #0
   c3a82:	4c08      	ldr	r4, [pc, #32]	; (c3aa4 <_write_r+0x28>)
   c3a84:	4611      	mov	r1, r2
   c3a86:	4607      	mov	r7, r0
   c3a88:	461a      	mov	r2, r3
   c3a8a:	4630      	mov	r0, r6
   c3a8c:	6025      	str	r5, [r4, #0]
   c3a8e:	f7fc fbb7 	bl	c0200 <_write>
   c3a92:	1c43      	adds	r3, r0, #1
   c3a94:	d000      	beq.n	c3a98 <_write_r+0x1c>
   c3a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c3a98:	6823      	ldr	r3, [r4, #0]
   c3a9a:	2b00      	cmp	r3, #0
   c3a9c:	d0fb      	beq.n	c3a96 <_write_r+0x1a>
   c3a9e:	603b      	str	r3, [r7, #0]
   c3aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c3aa2:	bf00      	nop
   c3aa4:	20070d70 	.word	0x20070d70

000c3aa8 <__register_exitproc>:
   c3aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c3aac:	4d2c      	ldr	r5, [pc, #176]	; (c3b60 <__register_exitproc+0xb8>)
   c3aae:	4606      	mov	r6, r0
   c3ab0:	6828      	ldr	r0, [r5, #0]
   c3ab2:	4698      	mov	r8, r3
   c3ab4:	460f      	mov	r7, r1
   c3ab6:	4691      	mov	r9, r2
   c3ab8:	f7ff f926 	bl	c2d08 <__retarget_lock_acquire_recursive>
   c3abc:	4b29      	ldr	r3, [pc, #164]	; (c3b64 <__register_exitproc+0xbc>)
   c3abe:	681c      	ldr	r4, [r3, #0]
   c3ac0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   c3ac4:	2b00      	cmp	r3, #0
   c3ac6:	d03e      	beq.n	c3b46 <__register_exitproc+0x9e>
   c3ac8:	685a      	ldr	r2, [r3, #4]
   c3aca:	2a1f      	cmp	r2, #31
   c3acc:	dc1c      	bgt.n	c3b08 <__register_exitproc+0x60>
   c3ace:	f102 0e01 	add.w	lr, r2, #1
   c3ad2:	b176      	cbz	r6, c3af2 <__register_exitproc+0x4a>
   c3ad4:	2101      	movs	r1, #1
   c3ad6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   c3ada:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   c3ade:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   c3ae2:	4091      	lsls	r1, r2
   c3ae4:	4308      	orrs	r0, r1
   c3ae6:	2e02      	cmp	r6, #2
   c3ae8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   c3aec:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   c3af0:	d023      	beq.n	c3b3a <__register_exitproc+0x92>
   c3af2:	3202      	adds	r2, #2
   c3af4:	f8c3 e004 	str.w	lr, [r3, #4]
   c3af8:	6828      	ldr	r0, [r5, #0]
   c3afa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   c3afe:	f7ff f905 	bl	c2d0c <__retarget_lock_release_recursive>
   c3b02:	2000      	movs	r0, #0
   c3b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c3b08:	4b17      	ldr	r3, [pc, #92]	; (c3b68 <__register_exitproc+0xc0>)
   c3b0a:	b30b      	cbz	r3, c3b50 <__register_exitproc+0xa8>
   c3b0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   c3b10:	f7ff f976 	bl	c2e00 <malloc>
   c3b14:	4603      	mov	r3, r0
   c3b16:	b1d8      	cbz	r0, c3b50 <__register_exitproc+0xa8>
   c3b18:	2000      	movs	r0, #0
   c3b1a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   c3b1e:	f04f 0e01 	mov.w	lr, #1
   c3b22:	6058      	str	r0, [r3, #4]
   c3b24:	6019      	str	r1, [r3, #0]
   c3b26:	4602      	mov	r2, r0
   c3b28:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   c3b2c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   c3b30:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   c3b34:	2e00      	cmp	r6, #0
   c3b36:	d0dc      	beq.n	c3af2 <__register_exitproc+0x4a>
   c3b38:	e7cc      	b.n	c3ad4 <__register_exitproc+0x2c>
   c3b3a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   c3b3e:	4301      	orrs	r1, r0
   c3b40:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   c3b44:	e7d5      	b.n	c3af2 <__register_exitproc+0x4a>
   c3b46:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   c3b4a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   c3b4e:	e7bb      	b.n	c3ac8 <__register_exitproc+0x20>
   c3b50:	6828      	ldr	r0, [r5, #0]
   c3b52:	f7ff f8db 	bl	c2d0c <__retarget_lock_release_recursive>
   c3b56:	f04f 30ff 	mov.w	r0, #4294967295
   c3b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c3b5e:	bf00      	nop
   c3b60:	200705f0 	.word	0x200705f0
   c3b64:	000c409c 	.word	0x000c409c
   c3b68:	000c2e01 	.word	0x000c2e01

000c3b6c <_close_r>:
   c3b6c:	b538      	push	{r3, r4, r5, lr}
   c3b6e:	2300      	movs	r3, #0
   c3b70:	4c06      	ldr	r4, [pc, #24]	; (c3b8c <_close_r+0x20>)
   c3b72:	4605      	mov	r5, r0
   c3b74:	4608      	mov	r0, r1
   c3b76:	6023      	str	r3, [r4, #0]
   c3b78:	f7fd f8a0 	bl	c0cbc <_close>
   c3b7c:	1c43      	adds	r3, r0, #1
   c3b7e:	d000      	beq.n	c3b82 <_close_r+0x16>
   c3b80:	bd38      	pop	{r3, r4, r5, pc}
   c3b82:	6823      	ldr	r3, [r4, #0]
   c3b84:	2b00      	cmp	r3, #0
   c3b86:	d0fb      	beq.n	c3b80 <_close_r+0x14>
   c3b88:	602b      	str	r3, [r5, #0]
   c3b8a:	bd38      	pop	{r3, r4, r5, pc}
   c3b8c:	20070d70 	.word	0x20070d70

000c3b90 <_fclose_r>:
   c3b90:	b570      	push	{r4, r5, r6, lr}
   c3b92:	b159      	cbz	r1, c3bac <_fclose_r+0x1c>
   c3b94:	4605      	mov	r5, r0
   c3b96:	460c      	mov	r4, r1
   c3b98:	b110      	cbz	r0, c3ba0 <_fclose_r+0x10>
   c3b9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   c3b9c:	2b00      	cmp	r3, #0
   c3b9e:	d03c      	beq.n	c3c1a <_fclose_r+0x8a>
   c3ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   c3ba2:	07d8      	lsls	r0, r3, #31
   c3ba4:	d505      	bpl.n	c3bb2 <_fclose_r+0x22>
   c3ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   c3baa:	b92b      	cbnz	r3, c3bb8 <_fclose_r+0x28>
   c3bac:	2600      	movs	r6, #0
   c3bae:	4630      	mov	r0, r6
   c3bb0:	bd70      	pop	{r4, r5, r6, pc}
   c3bb2:	89a3      	ldrh	r3, [r4, #12]
   c3bb4:	0599      	lsls	r1, r3, #22
   c3bb6:	d53c      	bpl.n	c3c32 <_fclose_r+0xa2>
   c3bb8:	4621      	mov	r1, r4
   c3bba:	4628      	mov	r0, r5
   c3bbc:	f7fe fbf0 	bl	c23a0 <__sflush_r>
   c3bc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   c3bc2:	4606      	mov	r6, r0
   c3bc4:	b133      	cbz	r3, c3bd4 <_fclose_r+0x44>
   c3bc6:	69e1      	ldr	r1, [r4, #28]
   c3bc8:	4628      	mov	r0, r5
   c3bca:	4798      	blx	r3
   c3bcc:	2800      	cmp	r0, #0
   c3bce:	bfb8      	it	lt
   c3bd0:	f04f 36ff 	movlt.w	r6, #4294967295
   c3bd4:	89a3      	ldrh	r3, [r4, #12]
   c3bd6:	061a      	lsls	r2, r3, #24
   c3bd8:	d422      	bmi.n	c3c20 <_fclose_r+0x90>
   c3bda:	6b21      	ldr	r1, [r4, #48]	; 0x30
   c3bdc:	b141      	cbz	r1, c3bf0 <_fclose_r+0x60>
   c3bde:	f104 0340 	add.w	r3, r4, #64	; 0x40
   c3be2:	4299      	cmp	r1, r3
   c3be4:	d002      	beq.n	c3bec <_fclose_r+0x5c>
   c3be6:	4628      	mov	r0, r5
   c3be8:	f7fe fdf4 	bl	c27d4 <_free_r>
   c3bec:	2300      	movs	r3, #0
   c3bee:	6323      	str	r3, [r4, #48]	; 0x30
   c3bf0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   c3bf2:	b121      	cbz	r1, c3bfe <_fclose_r+0x6e>
   c3bf4:	4628      	mov	r0, r5
   c3bf6:	f7fe fded 	bl	c27d4 <_free_r>
   c3bfa:	2300      	movs	r3, #0
   c3bfc:	6463      	str	r3, [r4, #68]	; 0x44
   c3bfe:	f7fe fcf3 	bl	c25e8 <__sfp_lock_acquire>
   c3c02:	2200      	movs	r2, #0
   c3c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
   c3c06:	81a2      	strh	r2, [r4, #12]
   c3c08:	07db      	lsls	r3, r3, #31
   c3c0a:	d50e      	bpl.n	c3c2a <_fclose_r+0x9a>
   c3c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   c3c0e:	f7ff f879 	bl	c2d04 <__retarget_lock_close_recursive>
   c3c12:	f7fe fcef 	bl	c25f4 <__sfp_lock_release>
   c3c16:	4630      	mov	r0, r6
   c3c18:	bd70      	pop	{r4, r5, r6, pc}
   c3c1a:	f7fe fcb5 	bl	c2588 <__sinit>
   c3c1e:	e7bf      	b.n	c3ba0 <_fclose_r+0x10>
   c3c20:	6921      	ldr	r1, [r4, #16]
   c3c22:	4628      	mov	r0, r5
   c3c24:	f7fe fdd6 	bl	c27d4 <_free_r>
   c3c28:	e7d7      	b.n	c3bda <_fclose_r+0x4a>
   c3c2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   c3c2c:	f7ff f86e 	bl	c2d0c <__retarget_lock_release_recursive>
   c3c30:	e7ec      	b.n	c3c0c <_fclose_r+0x7c>
   c3c32:	6da0      	ldr	r0, [r4, #88]	; 0x58
   c3c34:	f7ff f868 	bl	c2d08 <__retarget_lock_acquire_recursive>
   c3c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   c3c3c:	2b00      	cmp	r3, #0
   c3c3e:	d1bb      	bne.n	c3bb8 <_fclose_r+0x28>
   c3c40:	6e66      	ldr	r6, [r4, #100]	; 0x64
   c3c42:	f016 0601 	ands.w	r6, r6, #1
   c3c46:	d1b1      	bne.n	c3bac <_fclose_r+0x1c>
   c3c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
   c3c4a:	f7ff f85f 	bl	c2d0c <__retarget_lock_release_recursive>
   c3c4e:	4630      	mov	r0, r6
   c3c50:	bd70      	pop	{r4, r5, r6, pc}
   c3c52:	bf00      	nop

000c3c54 <_fstat_r>:
   c3c54:	b570      	push	{r4, r5, r6, lr}
   c3c56:	460d      	mov	r5, r1
   c3c58:	2300      	movs	r3, #0
   c3c5a:	4c07      	ldr	r4, [pc, #28]	; (c3c78 <_fstat_r+0x24>)
   c3c5c:	4606      	mov	r6, r0
   c3c5e:	4611      	mov	r1, r2
   c3c60:	4628      	mov	r0, r5
   c3c62:	6023      	str	r3, [r4, #0]
   c3c64:	f7fd f82d 	bl	c0cc2 <_fstat>
   c3c68:	1c43      	adds	r3, r0, #1
   c3c6a:	d000      	beq.n	c3c6e <_fstat_r+0x1a>
   c3c6c:	bd70      	pop	{r4, r5, r6, pc}
   c3c6e:	6823      	ldr	r3, [r4, #0]
   c3c70:	2b00      	cmp	r3, #0
   c3c72:	d0fb      	beq.n	c3c6c <_fstat_r+0x18>
   c3c74:	6033      	str	r3, [r6, #0]
   c3c76:	bd70      	pop	{r4, r5, r6, pc}
   c3c78:	20070d70 	.word	0x20070d70

000c3c7c <_isatty_r>:
   c3c7c:	b538      	push	{r3, r4, r5, lr}
   c3c7e:	2300      	movs	r3, #0
   c3c80:	4c06      	ldr	r4, [pc, #24]	; (c3c9c <_isatty_r+0x20>)
   c3c82:	4605      	mov	r5, r0
   c3c84:	4608      	mov	r0, r1
   c3c86:	6023      	str	r3, [r4, #0]
   c3c88:	f7fd f820 	bl	c0ccc <_isatty>
   c3c8c:	1c43      	adds	r3, r0, #1
   c3c8e:	d000      	beq.n	c3c92 <_isatty_r+0x16>
   c3c90:	bd38      	pop	{r3, r4, r5, pc}
   c3c92:	6823      	ldr	r3, [r4, #0]
   c3c94:	2b00      	cmp	r3, #0
   c3c96:	d0fb      	beq.n	c3c90 <_isatty_r+0x14>
   c3c98:	602b      	str	r3, [r5, #0]
   c3c9a:	bd38      	pop	{r3, r4, r5, pc}
   c3c9c:	20070d70 	.word	0x20070d70

000c3ca0 <_lseek_r>:
   c3ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c3ca2:	460e      	mov	r6, r1
   c3ca4:	2500      	movs	r5, #0
   c3ca6:	4c08      	ldr	r4, [pc, #32]	; (c3cc8 <_lseek_r+0x28>)
   c3ca8:	4611      	mov	r1, r2
   c3caa:	4607      	mov	r7, r0
   c3cac:	461a      	mov	r2, r3
   c3cae:	4630      	mov	r0, r6
   c3cb0:	6025      	str	r5, [r4, #0]
   c3cb2:	f7fd f80d 	bl	c0cd0 <_lseek>
   c3cb6:	1c43      	adds	r3, r0, #1
   c3cb8:	d000      	beq.n	c3cbc <_lseek_r+0x1c>
   c3cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c3cbc:	6823      	ldr	r3, [r4, #0]
   c3cbe:	2b00      	cmp	r3, #0
   c3cc0:	d0fb      	beq.n	c3cba <_lseek_r+0x1a>
   c3cc2:	603b      	str	r3, [r7, #0]
   c3cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c3cc6:	bf00      	nop
   c3cc8:	20070d70 	.word	0x20070d70

000c3ccc <_read_r>:
   c3ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c3cce:	460e      	mov	r6, r1
   c3cd0:	2500      	movs	r5, #0
   c3cd2:	4c08      	ldr	r4, [pc, #32]	; (c3cf4 <_read_r+0x28>)
   c3cd4:	4611      	mov	r1, r2
   c3cd6:	4607      	mov	r7, r0
   c3cd8:	461a      	mov	r2, r3
   c3cda:	4630      	mov	r0, r6
   c3cdc:	6025      	str	r5, [r4, #0]
   c3cde:	f7fc fa71 	bl	c01c4 <_read>
   c3ce2:	1c43      	adds	r3, r0, #1
   c3ce4:	d000      	beq.n	c3ce8 <_read_r+0x1c>
   c3ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c3ce8:	6823      	ldr	r3, [r4, #0]
   c3cea:	2b00      	cmp	r3, #0
   c3cec:	d0fb      	beq.n	c3ce6 <_read_r+0x1a>
   c3cee:	603b      	str	r3, [r7, #0]
   c3cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c3cf2:	bf00      	nop
   c3cf4:	20070d70 	.word	0x20070d70

000c3cf8 <__aeabi_uldivmod>:
   c3cf8:	b953      	cbnz	r3, c3d10 <__aeabi_uldivmod+0x18>
   c3cfa:	b94a      	cbnz	r2, c3d10 <__aeabi_uldivmod+0x18>
   c3cfc:	2900      	cmp	r1, #0
   c3cfe:	bf08      	it	eq
   c3d00:	2800      	cmpeq	r0, #0
   c3d02:	bf1c      	itt	ne
   c3d04:	f04f 31ff 	movne.w	r1, #4294967295
   c3d08:	f04f 30ff 	movne.w	r0, #4294967295
   c3d0c:	f000 b97a 	b.w	c4004 <__aeabi_idiv0>
   c3d10:	f1ad 0c08 	sub.w	ip, sp, #8
   c3d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   c3d18:	f000 f806 	bl	c3d28 <__udivmoddi4>
   c3d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
   c3d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   c3d24:	b004      	add	sp, #16
   c3d26:	4770      	bx	lr

000c3d28 <__udivmoddi4>:
   c3d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c3d2c:	468c      	mov	ip, r1
   c3d2e:	460e      	mov	r6, r1
   c3d30:	4604      	mov	r4, r0
   c3d32:	9d08      	ldr	r5, [sp, #32]
   c3d34:	2b00      	cmp	r3, #0
   c3d36:	d150      	bne.n	c3dda <__udivmoddi4+0xb2>
   c3d38:	428a      	cmp	r2, r1
   c3d3a:	4617      	mov	r7, r2
   c3d3c:	d96c      	bls.n	c3e18 <__udivmoddi4+0xf0>
   c3d3e:	fab2 fe82 	clz	lr, r2
   c3d42:	f1be 0f00 	cmp.w	lr, #0
   c3d46:	d00b      	beq.n	c3d60 <__udivmoddi4+0x38>
   c3d48:	f1ce 0c20 	rsb	ip, lr, #32
   c3d4c:	fa01 f60e 	lsl.w	r6, r1, lr
   c3d50:	fa20 fc0c 	lsr.w	ip, r0, ip
   c3d54:	fa02 f70e 	lsl.w	r7, r2, lr
   c3d58:	ea4c 0c06 	orr.w	ip, ip, r6
   c3d5c:	fa00 f40e 	lsl.w	r4, r0, lr
   c3d60:	0c3a      	lsrs	r2, r7, #16
   c3d62:	fbbc f9f2 	udiv	r9, ip, r2
   c3d66:	b2bb      	uxth	r3, r7
   c3d68:	fb02 cc19 	mls	ip, r2, r9, ip
   c3d6c:	fb09 fa03 	mul.w	sl, r9, r3
   c3d70:	ea4f 4814 	mov.w	r8, r4, lsr #16
   c3d74:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   c3d78:	45b2      	cmp	sl, r6
   c3d7a:	d90a      	bls.n	c3d92 <__udivmoddi4+0x6a>
   c3d7c:	19f6      	adds	r6, r6, r7
   c3d7e:	f109 31ff 	add.w	r1, r9, #4294967295
   c3d82:	f080 8125 	bcs.w	c3fd0 <__udivmoddi4+0x2a8>
   c3d86:	45b2      	cmp	sl, r6
   c3d88:	f240 8122 	bls.w	c3fd0 <__udivmoddi4+0x2a8>
   c3d8c:	f1a9 0902 	sub.w	r9, r9, #2
   c3d90:	443e      	add	r6, r7
   c3d92:	eba6 060a 	sub.w	r6, r6, sl
   c3d96:	fbb6 f0f2 	udiv	r0, r6, r2
   c3d9a:	fb02 6610 	mls	r6, r2, r0, r6
   c3d9e:	fb00 f303 	mul.w	r3, r0, r3
   c3da2:	b2a4      	uxth	r4, r4
   c3da4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   c3da8:	42a3      	cmp	r3, r4
   c3daa:	d909      	bls.n	c3dc0 <__udivmoddi4+0x98>
   c3dac:	19e4      	adds	r4, r4, r7
   c3dae:	f100 32ff 	add.w	r2, r0, #4294967295
   c3db2:	f080 810b 	bcs.w	c3fcc <__udivmoddi4+0x2a4>
   c3db6:	42a3      	cmp	r3, r4
   c3db8:	f240 8108 	bls.w	c3fcc <__udivmoddi4+0x2a4>
   c3dbc:	3802      	subs	r0, #2
   c3dbe:	443c      	add	r4, r7
   c3dc0:	2100      	movs	r1, #0
   c3dc2:	1ae4      	subs	r4, r4, r3
   c3dc4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   c3dc8:	2d00      	cmp	r5, #0
   c3dca:	d062      	beq.n	c3e92 <__udivmoddi4+0x16a>
   c3dcc:	2300      	movs	r3, #0
   c3dce:	fa24 f40e 	lsr.w	r4, r4, lr
   c3dd2:	602c      	str	r4, [r5, #0]
   c3dd4:	606b      	str	r3, [r5, #4]
   c3dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c3dda:	428b      	cmp	r3, r1
   c3ddc:	d907      	bls.n	c3dee <__udivmoddi4+0xc6>
   c3dde:	2d00      	cmp	r5, #0
   c3de0:	d055      	beq.n	c3e8e <__udivmoddi4+0x166>
   c3de2:	2100      	movs	r1, #0
   c3de4:	e885 0041 	stmia.w	r5, {r0, r6}
   c3de8:	4608      	mov	r0, r1
   c3dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c3dee:	fab3 f183 	clz	r1, r3
   c3df2:	2900      	cmp	r1, #0
   c3df4:	f040 808f 	bne.w	c3f16 <__udivmoddi4+0x1ee>
   c3df8:	42b3      	cmp	r3, r6
   c3dfa:	d302      	bcc.n	c3e02 <__udivmoddi4+0xda>
   c3dfc:	4282      	cmp	r2, r0
   c3dfe:	f200 80fc 	bhi.w	c3ffa <__udivmoddi4+0x2d2>
   c3e02:	1a84      	subs	r4, r0, r2
   c3e04:	eb66 0603 	sbc.w	r6, r6, r3
   c3e08:	2001      	movs	r0, #1
   c3e0a:	46b4      	mov	ip, r6
   c3e0c:	2d00      	cmp	r5, #0
   c3e0e:	d040      	beq.n	c3e92 <__udivmoddi4+0x16a>
   c3e10:	e885 1010 	stmia.w	r5, {r4, ip}
   c3e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c3e18:	b912      	cbnz	r2, c3e20 <__udivmoddi4+0xf8>
   c3e1a:	2701      	movs	r7, #1
   c3e1c:	fbb7 f7f2 	udiv	r7, r7, r2
   c3e20:	fab7 fe87 	clz	lr, r7
   c3e24:	f1be 0f00 	cmp.w	lr, #0
   c3e28:	d135      	bne.n	c3e96 <__udivmoddi4+0x16e>
   c3e2a:	2101      	movs	r1, #1
   c3e2c:	1bf6      	subs	r6, r6, r7
   c3e2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   c3e32:	fa1f f887 	uxth.w	r8, r7
   c3e36:	fbb6 f2fc 	udiv	r2, r6, ip
   c3e3a:	fb0c 6612 	mls	r6, ip, r2, r6
   c3e3e:	fb08 f002 	mul.w	r0, r8, r2
   c3e42:	0c23      	lsrs	r3, r4, #16
   c3e44:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   c3e48:	42b0      	cmp	r0, r6
   c3e4a:	d907      	bls.n	c3e5c <__udivmoddi4+0x134>
   c3e4c:	19f6      	adds	r6, r6, r7
   c3e4e:	f102 33ff 	add.w	r3, r2, #4294967295
   c3e52:	d202      	bcs.n	c3e5a <__udivmoddi4+0x132>
   c3e54:	42b0      	cmp	r0, r6
   c3e56:	f200 80d2 	bhi.w	c3ffe <__udivmoddi4+0x2d6>
   c3e5a:	461a      	mov	r2, r3
   c3e5c:	1a36      	subs	r6, r6, r0
   c3e5e:	fbb6 f0fc 	udiv	r0, r6, ip
   c3e62:	fb0c 6610 	mls	r6, ip, r0, r6
   c3e66:	fb08 f800 	mul.w	r8, r8, r0
   c3e6a:	b2a3      	uxth	r3, r4
   c3e6c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   c3e70:	45a0      	cmp	r8, r4
   c3e72:	d907      	bls.n	c3e84 <__udivmoddi4+0x15c>
   c3e74:	19e4      	adds	r4, r4, r7
   c3e76:	f100 33ff 	add.w	r3, r0, #4294967295
   c3e7a:	d202      	bcs.n	c3e82 <__udivmoddi4+0x15a>
   c3e7c:	45a0      	cmp	r8, r4
   c3e7e:	f200 80b9 	bhi.w	c3ff4 <__udivmoddi4+0x2cc>
   c3e82:	4618      	mov	r0, r3
   c3e84:	eba4 0408 	sub.w	r4, r4, r8
   c3e88:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   c3e8c:	e79c      	b.n	c3dc8 <__udivmoddi4+0xa0>
   c3e8e:	4629      	mov	r1, r5
   c3e90:	4628      	mov	r0, r5
   c3e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c3e96:	fa07 f70e 	lsl.w	r7, r7, lr
   c3e9a:	f1ce 0320 	rsb	r3, lr, #32
   c3e9e:	fa26 f203 	lsr.w	r2, r6, r3
   c3ea2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   c3ea6:	fbb2 f1fc 	udiv	r1, r2, ip
   c3eaa:	fa1f f887 	uxth.w	r8, r7
   c3eae:	fb0c 2211 	mls	r2, ip, r1, r2
   c3eb2:	fa06 f60e 	lsl.w	r6, r6, lr
   c3eb6:	fa20 f303 	lsr.w	r3, r0, r3
   c3eba:	fb01 f908 	mul.w	r9, r1, r8
   c3ebe:	4333      	orrs	r3, r6
   c3ec0:	0c1e      	lsrs	r6, r3, #16
   c3ec2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   c3ec6:	45b1      	cmp	r9, r6
   c3ec8:	fa00 f40e 	lsl.w	r4, r0, lr
   c3ecc:	d909      	bls.n	c3ee2 <__udivmoddi4+0x1ba>
   c3ece:	19f6      	adds	r6, r6, r7
   c3ed0:	f101 32ff 	add.w	r2, r1, #4294967295
   c3ed4:	f080 808c 	bcs.w	c3ff0 <__udivmoddi4+0x2c8>
   c3ed8:	45b1      	cmp	r9, r6
   c3eda:	f240 8089 	bls.w	c3ff0 <__udivmoddi4+0x2c8>
   c3ede:	3902      	subs	r1, #2
   c3ee0:	443e      	add	r6, r7
   c3ee2:	eba6 0609 	sub.w	r6, r6, r9
   c3ee6:	fbb6 f0fc 	udiv	r0, r6, ip
   c3eea:	fb0c 6210 	mls	r2, ip, r0, r6
   c3eee:	fb00 f908 	mul.w	r9, r0, r8
   c3ef2:	b29e      	uxth	r6, r3
   c3ef4:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   c3ef8:	45b1      	cmp	r9, r6
   c3efa:	d907      	bls.n	c3f0c <__udivmoddi4+0x1e4>
   c3efc:	19f6      	adds	r6, r6, r7
   c3efe:	f100 33ff 	add.w	r3, r0, #4294967295
   c3f02:	d271      	bcs.n	c3fe8 <__udivmoddi4+0x2c0>
   c3f04:	45b1      	cmp	r9, r6
   c3f06:	d96f      	bls.n	c3fe8 <__udivmoddi4+0x2c0>
   c3f08:	3802      	subs	r0, #2
   c3f0a:	443e      	add	r6, r7
   c3f0c:	eba6 0609 	sub.w	r6, r6, r9
   c3f10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   c3f14:	e78f      	b.n	c3e36 <__udivmoddi4+0x10e>
   c3f16:	f1c1 0720 	rsb	r7, r1, #32
   c3f1a:	fa22 f807 	lsr.w	r8, r2, r7
   c3f1e:	408b      	lsls	r3, r1
   c3f20:	ea48 0303 	orr.w	r3, r8, r3
   c3f24:	fa26 f407 	lsr.w	r4, r6, r7
   c3f28:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   c3f2c:	fbb4 f9fe 	udiv	r9, r4, lr
   c3f30:	fa1f fc83 	uxth.w	ip, r3
   c3f34:	fb0e 4419 	mls	r4, lr, r9, r4
   c3f38:	408e      	lsls	r6, r1
   c3f3a:	fa20 f807 	lsr.w	r8, r0, r7
   c3f3e:	fb09 fa0c 	mul.w	sl, r9, ip
   c3f42:	ea48 0806 	orr.w	r8, r8, r6
   c3f46:	ea4f 4618 	mov.w	r6, r8, lsr #16
   c3f4a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   c3f4e:	45a2      	cmp	sl, r4
   c3f50:	fa02 f201 	lsl.w	r2, r2, r1
   c3f54:	fa00 f601 	lsl.w	r6, r0, r1
   c3f58:	d908      	bls.n	c3f6c <__udivmoddi4+0x244>
   c3f5a:	18e4      	adds	r4, r4, r3
   c3f5c:	f109 30ff 	add.w	r0, r9, #4294967295
   c3f60:	d244      	bcs.n	c3fec <__udivmoddi4+0x2c4>
   c3f62:	45a2      	cmp	sl, r4
   c3f64:	d942      	bls.n	c3fec <__udivmoddi4+0x2c4>
   c3f66:	f1a9 0902 	sub.w	r9, r9, #2
   c3f6a:	441c      	add	r4, r3
   c3f6c:	eba4 040a 	sub.w	r4, r4, sl
   c3f70:	fbb4 f0fe 	udiv	r0, r4, lr
   c3f74:	fb0e 4410 	mls	r4, lr, r0, r4
   c3f78:	fb00 fc0c 	mul.w	ip, r0, ip
   c3f7c:	fa1f f888 	uxth.w	r8, r8
   c3f80:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   c3f84:	45a4      	cmp	ip, r4
   c3f86:	d907      	bls.n	c3f98 <__udivmoddi4+0x270>
   c3f88:	18e4      	adds	r4, r4, r3
   c3f8a:	f100 3eff 	add.w	lr, r0, #4294967295
   c3f8e:	d229      	bcs.n	c3fe4 <__udivmoddi4+0x2bc>
   c3f90:	45a4      	cmp	ip, r4
   c3f92:	d927      	bls.n	c3fe4 <__udivmoddi4+0x2bc>
   c3f94:	3802      	subs	r0, #2
   c3f96:	441c      	add	r4, r3
   c3f98:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   c3f9c:	fba0 8902 	umull	r8, r9, r0, r2
   c3fa0:	eba4 0c0c 	sub.w	ip, r4, ip
   c3fa4:	45cc      	cmp	ip, r9
   c3fa6:	46c2      	mov	sl, r8
   c3fa8:	46ce      	mov	lr, r9
   c3faa:	d315      	bcc.n	c3fd8 <__udivmoddi4+0x2b0>
   c3fac:	d012      	beq.n	c3fd4 <__udivmoddi4+0x2ac>
   c3fae:	b155      	cbz	r5, c3fc6 <__udivmoddi4+0x29e>
   c3fb0:	ebb6 030a 	subs.w	r3, r6, sl
   c3fb4:	eb6c 060e 	sbc.w	r6, ip, lr
   c3fb8:	fa06 f707 	lsl.w	r7, r6, r7
   c3fbc:	40cb      	lsrs	r3, r1
   c3fbe:	431f      	orrs	r7, r3
   c3fc0:	40ce      	lsrs	r6, r1
   c3fc2:	602f      	str	r7, [r5, #0]
   c3fc4:	606e      	str	r6, [r5, #4]
   c3fc6:	2100      	movs	r1, #0
   c3fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c3fcc:	4610      	mov	r0, r2
   c3fce:	e6f7      	b.n	c3dc0 <__udivmoddi4+0x98>
   c3fd0:	4689      	mov	r9, r1
   c3fd2:	e6de      	b.n	c3d92 <__udivmoddi4+0x6a>
   c3fd4:	4546      	cmp	r6, r8
   c3fd6:	d2ea      	bcs.n	c3fae <__udivmoddi4+0x286>
   c3fd8:	ebb8 0a02 	subs.w	sl, r8, r2
   c3fdc:	eb69 0e03 	sbc.w	lr, r9, r3
   c3fe0:	3801      	subs	r0, #1
   c3fe2:	e7e4      	b.n	c3fae <__udivmoddi4+0x286>
   c3fe4:	4670      	mov	r0, lr
   c3fe6:	e7d7      	b.n	c3f98 <__udivmoddi4+0x270>
   c3fe8:	4618      	mov	r0, r3
   c3fea:	e78f      	b.n	c3f0c <__udivmoddi4+0x1e4>
   c3fec:	4681      	mov	r9, r0
   c3fee:	e7bd      	b.n	c3f6c <__udivmoddi4+0x244>
   c3ff0:	4611      	mov	r1, r2
   c3ff2:	e776      	b.n	c3ee2 <__udivmoddi4+0x1ba>
   c3ff4:	3802      	subs	r0, #2
   c3ff6:	443c      	add	r4, r7
   c3ff8:	e744      	b.n	c3e84 <__udivmoddi4+0x15c>
   c3ffa:	4608      	mov	r0, r1
   c3ffc:	e706      	b.n	c3e0c <__udivmoddi4+0xe4>
   c3ffe:	3a02      	subs	r2, #2
   c4000:	443e      	add	r6, r7
   c4002:	e72b      	b.n	c3e5c <__udivmoddi4+0x134>

000c4004 <__aeabi_idiv0>:
   c4004:	4770      	bx	lr
   c4006:	bf00      	nop
   c4008:	20707061 	.word	0x20707061
   c400c:	202d2032 	.word	0x202d2032
   c4010:	6e6e7572 	.word	0x6e6e7572
   c4014:	20676e69 	.word	0x20676e69
   c4018:	00200a0d 	.word	0x00200a0d
   c401c:	70706120 	.word	0x70706120
   c4020:	2d203220 	.word	0x2d203220
   c4024:	2d2d2d2d 	.word	0x2d2d2d2d
   c4028:	2d2d2d2d 	.word	0x2d2d2d2d
   c402c:	66202d2d 	.word	0x66202d2d
   c4030:	73696e69 	.word	0x73696e69
   c4034:	20646568 	.word	0x20646568
   c4038:	00000a0d 	.word	0x00000a0d
   c403c:	4e504720 	.word	0x4e504720
   c4040:	77204d56 	.word	0x77204d56
   c4044:	65746972 	.word	0x65746972
   c4048:	72657020 	.word	0x72657020
   c404c:	74636566 	.word	0x74636566
   c4050:	2b2b2b2b 	.word	0x2b2b2b2b
   c4054:	2b2b2b2b 	.word	0x2b2b2b2b
   c4058:	2b2b2b2b 	.word	0x2b2b2b2b
   c405c:	2b2b2b2b 	.word	0x2b2b2b2b
   c4060:	2b2b2b2b 	.word	0x2b2b2b2b
   c4064:	6e2f2b2b 	.word	0x6e2f2b2b
   c4068:	00000020 	.word	0x00000020
   c406c:	4e504720 	.word	0x4e504720
   c4070:	77204d56 	.word	0x77204d56
   c4074:	65746972 	.word	0x65746972
   c4078:	72726520 	.word	0x72726520
   c407c:	2a20726f 	.word	0x2a20726f
   c4080:	2a2a2a2a 	.word	0x2a2a2a2a
   c4084:	2a2a2a2a 	.word	0x2a2a2a2a
   c4088:	2a2a2a2a 	.word	0x2a2a2a2a
   c408c:	2a2a2a2a 	.word	0x2a2a2a2a
   c4090:	2a2a2a2a 	.word	0x2a2a2a2a
   c4094:	0a0d2a2a 	.word	0x0a0d2a2a
   c4098:	00000020 	.word	0x00000020

000c409c <_global_impure_ptr>:
   c409c:	200701c8 33323130 37363534 42413938     ... 0123456789AB
   c40ac:	46454443 00000000 33323130 37363534     CDEF....01234567
   c40bc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   c40cc:	0000296c                                l)..

000c40d0 <blanks.7217>:
   c40d0:	20202020 20202020 20202020 20202020                     

000c40e0 <zeroes.7218>:
   c40e0:	30303030 30303030 30303030 30303030     0000000000000000
   c40f0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

000c4100 <_ctype_>:
   c4100:	20202000 20202020 28282020 20282828     .         ((((( 
   c4110:	20202020 20202020 20202020 20202020                     
   c4120:	10108820 10101010 10101010 10101010      ...............
   c4130:	04040410 04040404 10040404 10101010     ................
   c4140:	41411010 41414141 01010101 01010101     ..AAAAAA........
   c4150:	01010101 01010101 01010101 10101010     ................
   c4160:	42421010 42424242 02020202 02020202     ..BBBBBB........
   c4170:	02020202 02020202 02020202 10101010     ................
   c4180:	00000020 00000000 00000000 00000000      ...............
	...

000c4204 <_init>:
   c4204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c4206:	bf00      	nop
   c4208:	bcf8      	pop	{r3, r4, r5, r6, r7}
   c420a:	bc08      	pop	{r3}
   c420c:	469e      	mov	lr, r3
   c420e:	4770      	bx	lr

000c4210 <__init_array_start>:
   c4210:	000c2381 	.word	0x000c2381

000c4214 <__frame_dummy_init_array_entry>:
   c4214:	000c0119                                ....

000c4218 <_fini>:
   c4218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c421a:	bf00      	nop
   c421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   c421e:	bc08      	pop	{r3}
   c4220:	469e      	mov	lr, r3
   c4222:	4770      	bx	lr

000c4224 <__fini_array_start>:
   c4224:	000c00f5 	.word	0x000c00f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	200701b8 	.word	0x200701b8

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
2007012c:	b430      	push	{r4, r5}
2007012e:	b082      	sub	sp, #8
20070130:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
//#else
	//return EFC_RC_NOT_SUPPORT;
//#endif

	if (p_ul_buf == NULL) {
20070132:	b35b      	cbz	r3, 2007018c <efc_perform_read_sequence+0x60>
20070134:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20070136:	6803      	ldr	r3, [r0, #0]
20070138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2007013c:	6003      	str	r3, [r0, #0]
//	 SAMV71 || SAMV70 || SAMS70 || SAME70)
//	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
	//		| EEFC_FCR_FCMD(ul_cmd_st);
//#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2007013e:	b2c9      	uxtb	r1, r1
20070140:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070144:	6041      	str	r1, [r0, #4]
//#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070146:	6883      	ldr	r3, [r0, #8]
20070148:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2007014a:	9b01      	ldr	r3, [sp, #4]
2007014c:	f013 0f01 	tst.w	r3, #1
20070150:	d1f9      	bne.n	20070146 <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070152:	b14d      	cbz	r5, 20070168 <efc_perform_read_sequence+0x3c>
20070154:	4621      	mov	r1, r4
20070156:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2007015a:	4c0d      	ldr	r4, [pc, #52]	; (20070190 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007015c:	f854 5f04 	ldr.w	r5, [r4, #4]!
20070160:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070164:	4299      	cmp	r1, r3
20070166:	d1f9      	bne.n	2007015c <efc_perform_read_sequence+0x30>
	// SAMV71 || SAMV70 || SAMS70 || SAME70)
		//	EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
		//	EEFC_FCR_FCMD(ul_cmd_sp);
//#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20070168:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2007016a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2007016e:	6042      	str	r2, [r0, #4]
//#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070170:	6883      	ldr	r3, [r0, #8]
20070172:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070174:	9b01      	ldr	r3, [sp, #4]
20070176:	f013 0f01 	tst.w	r3, #1
2007017a:	d0f9      	beq.n	20070170 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2007017c:	6803      	ldr	r3, [r0, #0]
2007017e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20070182:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20070184:	2000      	movs	r0, #0
}
20070186:	b002      	add	sp, #8
20070188:	bc30      	pop	{r4, r5}
2007018a:	4770      	bx	lr
		return EFC_RC_INVALID;
2007018c:	2002      	movs	r0, #2
2007018e:	e7fa      	b.n	20070186 <efc_perform_read_sequence+0x5a>
20070190:	0007fffc 	.word	0x0007fffc

20070194 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20070194:	6001      	str	r1, [r0, #0]
20070196:	4770      	bx	lr

20070198 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20070198:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2007019a:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
2007019c:	6883      	ldr	r3, [r0, #8]
2007019e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200701a0:	9b01      	ldr	r3, [sp, #4]
200701a2:	f013 0f01 	tst.w	r3, #1
200701a6:	d0f9      	beq.n	2007019c <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
200701a8:	9801      	ldr	r0, [sp, #4]
}
200701aa:	f000 0006 	and.w	r0, r0, #6
200701ae:	b002      	add	sp, #8
200701b0:	4770      	bx	lr
200701b2:	bf00      	nop

200701b4 <g_interrupt_enabled>:
200701b4:	0001 0000                                   ....

200701b8 <SystemCoreClock>:
200701b8:	0900 003d                                   ..=.

200701bc <g_b_led0_active>:
200701bc:	0101                                             .

200701bd <g_b_led1_active>:
200701bd:	0001 c800                                        ...

200701c0 <_impure_ptr>:
200701c0:	01c8 2007 0000 0000                         ... ....

200701c8 <impure_data>:
200701c8:	0000 0000 04b4 2007 051c 2007 0584 2007     ....... ... ... 
	...
20070270:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070280:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200705f0 <__atexit_recursive_mutex>:
200705f0:	0d4c 2007                                   L.. 

200705f4 <__global_locale>:
200705f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20070614:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20070634:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20070654:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20070674:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20070694:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200706b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200706d4:	3a65 000c 3355 000c 0000 0000 4100 000c     e:..U3.......A..
200706e4:	40fc 000c 40b0 000c 40b0 000c 40b0 000c     .@...@...@...@..
200706f4:	40b0 000c 40b0 000c 40b0 000c 40b0 000c     .@...@...@...@..
20070704:	40b0 000c 40b0 000c ffff ffff ffff ffff     .@...@..........
20070714:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2007073c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20070760 <__malloc_av_>:
	...
20070768:	0760 2007 0760 2007 0768 2007 0768 2007     `.. `.. h.. h.. 
20070778:	0770 2007 0770 2007 0778 2007 0778 2007     p.. p.. x.. x.. 
20070788:	0780 2007 0780 2007 0788 2007 0788 2007     ... ... ... ... 
20070798:	0790 2007 0790 2007 0798 2007 0798 2007     ... ... ... ... 
200707a8:	07a0 2007 07a0 2007 07a8 2007 07a8 2007     ... ... ... ... 
200707b8:	07b0 2007 07b0 2007 07b8 2007 07b8 2007     ... ... ... ... 
200707c8:	07c0 2007 07c0 2007 07c8 2007 07c8 2007     ... ... ... ... 
200707d8:	07d0 2007 07d0 2007 07d8 2007 07d8 2007     ... ... ... ... 
200707e8:	07e0 2007 07e0 2007 07e8 2007 07e8 2007     ... ... ... ... 
200707f8:	07f0 2007 07f0 2007 07f8 2007 07f8 2007     ... ... ... ... 
20070808:	0800 2007 0800 2007 0808 2007 0808 2007     ... ... ... ... 
20070818:	0810 2007 0810 2007 0818 2007 0818 2007     ... ... ... ... 
20070828:	0820 2007 0820 2007 0828 2007 0828 2007      ..  .. (.. (.. 
20070838:	0830 2007 0830 2007 0838 2007 0838 2007     0.. 0.. 8.. 8.. 
20070848:	0840 2007 0840 2007 0848 2007 0848 2007     @.. @.. H.. H.. 
20070858:	0850 2007 0850 2007 0858 2007 0858 2007     P.. P.. X.. X.. 
20070868:	0860 2007 0860 2007 0868 2007 0868 2007     `.. `.. h.. h.. 
20070878:	0870 2007 0870 2007 0878 2007 0878 2007     p.. p.. x.. x.. 
20070888:	0880 2007 0880 2007 0888 2007 0888 2007     ... ... ... ... 
20070898:	0890 2007 0890 2007 0898 2007 0898 2007     ... ... ... ... 
200708a8:	08a0 2007 08a0 2007 08a8 2007 08a8 2007     ... ... ... ... 
200708b8:	08b0 2007 08b0 2007 08b8 2007 08b8 2007     ... ... ... ... 
200708c8:	08c0 2007 08c0 2007 08c8 2007 08c8 2007     ... ... ... ... 
200708d8:	08d0 2007 08d0 2007 08d8 2007 08d8 2007     ... ... ... ... 
200708e8:	08e0 2007 08e0 2007 08e8 2007 08e8 2007     ... ... ... ... 
200708f8:	08f0 2007 08f0 2007 08f8 2007 08f8 2007     ... ... ... ... 
20070908:	0900 2007 0900 2007 0908 2007 0908 2007     ... ... ... ... 
20070918:	0910 2007 0910 2007 0918 2007 0918 2007     ... ... ... ... 
20070928:	0920 2007 0920 2007 0928 2007 0928 2007      ..  .. (.. (.. 
20070938:	0930 2007 0930 2007 0938 2007 0938 2007     0.. 0.. 8.. 8.. 
20070948:	0940 2007 0940 2007 0948 2007 0948 2007     @.. @.. H.. H.. 
20070958:	0950 2007 0950 2007 0958 2007 0958 2007     P.. P.. X.. X.. 
20070968:	0960 2007 0960 2007 0968 2007 0968 2007     `.. `.. h.. h.. 
20070978:	0970 2007 0970 2007 0978 2007 0978 2007     p.. p.. x.. x.. 
20070988:	0980 2007 0980 2007 0988 2007 0988 2007     ... ... ... ... 
20070998:	0990 2007 0990 2007 0998 2007 0998 2007     ... ... ... ... 
200709a8:	09a0 2007 09a0 2007 09a8 2007 09a8 2007     ... ... ... ... 
200709b8:	09b0 2007 09b0 2007 09b8 2007 09b8 2007     ... ... ... ... 
200709c8:	09c0 2007 09c0 2007 09c8 2007 09c8 2007     ... ... ... ... 
200709d8:	09d0 2007 09d0 2007 09d8 2007 09d8 2007     ... ... ... ... 
200709e8:	09e0 2007 09e0 2007 09e8 2007 09e8 2007     ... ... ... ... 
200709f8:	09f0 2007 09f0 2007 09f8 2007 09f8 2007     ... ... ... ... 
20070a08:	0a00 2007 0a00 2007 0a08 2007 0a08 2007     ... ... ... ... 
20070a18:	0a10 2007 0a10 2007 0a18 2007 0a18 2007     ... ... ... ... 
20070a28:	0a20 2007 0a20 2007 0a28 2007 0a28 2007      ..  .. (.. (.. 
20070a38:	0a30 2007 0a30 2007 0a38 2007 0a38 2007     0.. 0.. 8.. 8.. 
20070a48:	0a40 2007 0a40 2007 0a48 2007 0a48 2007     @.. @.. H.. H.. 
20070a58:	0a50 2007 0a50 2007 0a58 2007 0a58 2007     P.. P.. X.. X.. 
20070a68:	0a60 2007 0a60 2007 0a68 2007 0a68 2007     `.. `.. h.. h.. 
20070a78:	0a70 2007 0a70 2007 0a78 2007 0a78 2007     p.. p.. x.. x.. 
20070a88:	0a80 2007 0a80 2007 0a88 2007 0a88 2007     ... ... ... ... 
20070a98:	0a90 2007 0a90 2007 0a98 2007 0a98 2007     ... ... ... ... 
20070aa8:	0aa0 2007 0aa0 2007 0aa8 2007 0aa8 2007     ... ... ... ... 
20070ab8:	0ab0 2007 0ab0 2007 0ab8 2007 0ab8 2007     ... ... ... ... 
20070ac8:	0ac0 2007 0ac0 2007 0ac8 2007 0ac8 2007     ... ... ... ... 
20070ad8:	0ad0 2007 0ad0 2007 0ad8 2007 0ad8 2007     ... ... ... ... 
20070ae8:	0ae0 2007 0ae0 2007 0ae8 2007 0ae8 2007     ... ... ... ... 
20070af8:	0af0 2007 0af0 2007 0af8 2007 0af8 2007     ... ... ... ... 
20070b08:	0b00 2007 0b00 2007 0b08 2007 0b08 2007     ... ... ... ... 
20070b18:	0b10 2007 0b10 2007 0b18 2007 0b18 2007     ... ... ... ... 
20070b28:	0b20 2007 0b20 2007 0b28 2007 0b28 2007      ..  .. (.. (.. 
20070b38:	0b30 2007 0b30 2007 0b38 2007 0b38 2007     0.. 0.. 8.. 8.. 
20070b48:	0b40 2007 0b40 2007 0b48 2007 0b48 2007     @.. @.. H.. H.. 
20070b58:	0b50 2007 0b50 2007 0b58 2007 0b58 2007     P.. P.. X.. X.. 

20070b68 <__malloc_sbrk_base>:
20070b68:	ffff ffff                                   ....

20070b6c <__malloc_trim_threshold>:
20070b6c:	0000 0002                                   ....
